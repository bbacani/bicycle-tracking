/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10068.0, "series": [{"data": [[0.0, 177.0], [0.1, 180.0], [0.2, 180.0], [0.3, 180.0], [0.4, 185.0], [0.5, 185.0], [0.6, 185.0], [0.7, 187.0], [0.8, 187.0], [0.9, 187.0], [1.0, 187.0], [1.1, 190.0], [1.2, 190.0], [1.3, 192.0], [1.4, 192.0], [1.5, 193.0], [1.6, 194.0], [1.7, 194.0], [1.8, 196.0], [1.9, 197.0], [2.0, 197.0], [2.1, 199.0], [2.2, 199.0], [2.3, 200.0], [2.4, 200.0], [2.5, 200.0], [2.6, 201.0], [2.7, 202.0], [2.8, 202.0], [2.9, 202.0], [3.0, 203.0], [3.1, 203.0], [3.2, 204.0], [3.3, 204.0], [3.4, 204.0], [3.5, 204.0], [3.6, 205.0], [3.7, 205.0], [3.8, 205.0], [3.9, 206.0], [4.0, 207.0], [4.1, 207.0], [4.2, 207.0], [4.3, 208.0], [4.4, 208.0], [4.5, 208.0], [4.6, 208.0], [4.7, 208.0], [4.8, 209.0], [4.9, 209.0], [5.0, 210.0], [5.1, 210.0], [5.2, 210.0], [5.3, 210.0], [5.4, 211.0], [5.5, 211.0], [5.6, 211.0], [5.7, 212.0], [5.8, 212.0], [5.9, 212.0], [6.0, 212.0], [6.1, 212.0], [6.2, 212.0], [6.3, 212.0], [6.4, 213.0], [6.5, 213.0], [6.6, 213.0], [6.7, 213.0], [6.8, 213.0], [6.9, 215.0], [7.0, 215.0], [7.1, 215.0], [7.2, 216.0], [7.3, 216.0], [7.4, 217.0], [7.5, 218.0], [7.6, 218.0], [7.7, 219.0], [7.8, 219.0], [7.9, 219.0], [8.0, 220.0], [8.1, 220.0], [8.2, 220.0], [8.3, 221.0], [8.4, 221.0], [8.5, 221.0], [8.6, 221.0], [8.7, 221.0], [8.8, 221.0], [8.9, 221.0], [9.0, 221.0], [9.1, 221.0], [9.2, 222.0], [9.3, 222.0], [9.4, 222.0], [9.5, 222.0], [9.6, 222.0], [9.7, 223.0], [9.8, 223.0], [9.9, 223.0], [10.0, 223.0], [10.1, 223.0], [10.2, 223.0], [10.3, 224.0], [10.4, 224.0], [10.5, 224.0], [10.6, 224.0], [10.7, 224.0], [10.8, 225.0], [10.9, 225.0], [11.0, 225.0], [11.1, 225.0], [11.2, 225.0], [11.3, 225.0], [11.4, 225.0], [11.5, 225.0], [11.6, 225.0], [11.7, 226.0], [11.8, 226.0], [11.9, 226.0], [12.0, 226.0], [12.1, 227.0], [12.2, 227.0], [12.3, 227.0], [12.4, 228.0], [12.5, 228.0], [12.6, 228.0], [12.7, 228.0], [12.8, 228.0], [12.9, 228.0], [13.0, 229.0], [13.1, 229.0], [13.2, 229.0], [13.3, 229.0], [13.4, 230.0], [13.5, 230.0], [13.6, 230.0], [13.7, 230.0], [13.8, 230.0], [13.9, 230.0], [14.0, 230.0], [14.1, 231.0], [14.2, 231.0], [14.3, 231.0], [14.4, 231.0], [14.5, 231.0], [14.6, 232.0], [14.7, 232.0], [14.8, 232.0], [14.9, 233.0], [15.0, 233.0], [15.1, 233.0], [15.2, 233.0], [15.3, 234.0], [15.4, 234.0], [15.5, 235.0], [15.6, 235.0], [15.7, 235.0], [15.8, 235.0], [15.9, 235.0], [16.0, 235.0], [16.1, 235.0], [16.2, 235.0], [16.3, 236.0], [16.4, 236.0], [16.5, 236.0], [16.6, 236.0], [16.7, 236.0], [16.8, 236.0], [16.9, 236.0], [17.0, 236.0], [17.1, 237.0], [17.2, 237.0], [17.3, 237.0], [17.4, 237.0], [17.5, 238.0], [17.6, 238.0], [17.7, 238.0], [17.8, 239.0], [17.9, 239.0], [18.0, 239.0], [18.1, 239.0], [18.2, 239.0], [18.3, 240.0], [18.4, 240.0], [18.5, 240.0], [18.6, 240.0], [18.7, 241.0], [18.8, 241.0], [18.9, 241.0], [19.0, 242.0], [19.1, 242.0], [19.2, 242.0], [19.3, 242.0], [19.4, 242.0], [19.5, 243.0], [19.6, 243.0], [19.7, 244.0], [19.8, 244.0], [19.9, 244.0], [20.0, 244.0], [20.1, 244.0], [20.2, 244.0], [20.3, 245.0], [20.4, 245.0], [20.5, 245.0], [20.6, 245.0], [20.7, 245.0], [20.8, 245.0], [20.9, 245.0], [21.0, 246.0], [21.1, 247.0], [21.2, 247.0], [21.3, 248.0], [21.4, 248.0], [21.5, 248.0], [21.6, 248.0], [21.7, 248.0], [21.8, 249.0], [21.9, 249.0], [22.0, 249.0], [22.1, 249.0], [22.2, 249.0], [22.3, 249.0], [22.4, 250.0], [22.5, 250.0], [22.6, 250.0], [22.7, 250.0], [22.8, 250.0], [22.9, 251.0], [23.0, 251.0], [23.1, 251.0], [23.2, 251.0], [23.3, 251.0], [23.4, 252.0], [23.5, 252.0], [23.6, 252.0], [23.7, 252.0], [23.8, 252.0], [23.9, 253.0], [24.0, 253.0], [24.1, 253.0], [24.2, 253.0], [24.3, 254.0], [24.4, 254.0], [24.5, 255.0], [24.6, 255.0], [24.7, 255.0], [24.8, 255.0], [24.9, 255.0], [25.0, 255.0], [25.1, 256.0], [25.2, 256.0], [25.3, 256.0], [25.4, 257.0], [25.5, 257.0], [25.6, 258.0], [25.7, 259.0], [25.8, 259.0], [25.9, 259.0], [26.0, 260.0], [26.1, 260.0], [26.2, 260.0], [26.3, 260.0], [26.4, 261.0], [26.5, 261.0], [26.6, 261.0], [26.7, 261.0], [26.8, 261.0], [26.9, 262.0], [27.0, 262.0], [27.1, 264.0], [27.2, 264.0], [27.3, 265.0], [27.4, 266.0], [27.5, 266.0], [27.6, 267.0], [27.7, 269.0], [27.8, 270.0], [27.9, 270.0], [28.0, 270.0], [28.1, 272.0], [28.2, 274.0], [28.3, 274.0], [28.4, 275.0], [28.5, 278.0], [28.6, 279.0], [28.7, 280.0], [28.8, 280.0], [28.9, 282.0], [29.0, 283.0], [29.1, 284.0], [29.2, 285.0], [29.3, 286.0], [29.4, 287.0], [29.5, 287.0], [29.6, 288.0], [29.7, 288.0], [29.8, 288.0], [29.9, 291.0], [30.0, 291.0], [30.1, 294.0], [30.2, 296.0], [30.3, 296.0], [30.4, 297.0], [30.5, 300.0], [30.6, 301.0], [30.7, 301.0], [30.8, 302.0], [30.9, 304.0], [31.0, 305.0], [31.1, 305.0], [31.2, 305.0], [31.3, 307.0], [31.4, 308.0], [31.5, 310.0], [31.6, 312.0], [31.7, 315.0], [31.8, 316.0], [31.9, 317.0], [32.0, 319.0], [32.1, 320.0], [32.2, 321.0], [32.3, 322.0], [32.4, 323.0], [32.5, 323.0], [32.6, 324.0], [32.7, 326.0], [32.8, 327.0], [32.9, 327.0], [33.0, 331.0], [33.1, 332.0], [33.2, 334.0], [33.3, 336.0], [33.4, 338.0], [33.5, 342.0], [33.6, 344.0], [33.7, 344.0], [33.8, 344.0], [33.9, 353.0], [34.0, 354.0], [34.1, 354.0], [34.2, 354.0], [34.3, 354.0], [34.4, 357.0], [34.5, 357.0], [34.6, 358.0], [34.7, 358.0], [34.8, 360.0], [34.9, 361.0], [35.0, 361.0], [35.1, 362.0], [35.2, 363.0], [35.3, 363.0], [35.4, 364.0], [35.5, 364.0], [35.6, 364.0], [35.7, 365.0], [35.8, 365.0], [35.9, 365.0], [36.0, 366.0], [36.1, 367.0], [36.2, 370.0], [36.3, 372.0], [36.4, 372.0], [36.5, 373.0], [36.6, 373.0], [36.7, 377.0], [36.8, 377.0], [36.9, 378.0], [37.0, 378.0], [37.1, 380.0], [37.2, 380.0], [37.3, 381.0], [37.4, 382.0], [37.5, 382.0], [37.6, 382.0], [37.7, 384.0], [37.8, 384.0], [37.9, 385.0], [38.0, 386.0], [38.1, 387.0], [38.2, 388.0], [38.3, 389.0], [38.4, 390.0], [38.5, 390.0], [38.6, 392.0], [38.7, 392.0], [38.8, 392.0], [38.9, 393.0], [39.0, 395.0], [39.1, 398.0], [39.2, 400.0], [39.3, 401.0], [39.4, 404.0], [39.5, 405.0], [39.6, 412.0], [39.7, 414.0], [39.8, 416.0], [39.9, 416.0], [40.0, 419.0], [40.1, 419.0], [40.2, 419.0], [40.3, 419.0], [40.4, 422.0], [40.5, 424.0], [40.6, 424.0], [40.7, 425.0], [40.8, 425.0], [40.9, 425.0], [41.0, 426.0], [41.1, 426.0], [41.2, 427.0], [41.3, 427.0], [41.4, 428.0], [41.5, 428.0], [41.6, 429.0], [41.7, 429.0], [41.8, 431.0], [41.9, 431.0], [42.0, 431.0], [42.1, 431.0], [42.2, 431.0], [42.3, 433.0], [42.4, 433.0], [42.5, 433.0], [42.6, 434.0], [42.7, 434.0], [42.8, 434.0], [42.9, 435.0], [43.0, 435.0], [43.1, 437.0], [43.2, 445.0], [43.3, 445.0], [43.4, 445.0], [43.5, 447.0], [43.6, 447.0], [43.7, 449.0], [43.8, 450.0], [43.9, 451.0], [44.0, 452.0], [44.1, 453.0], [44.2, 453.0], [44.3, 455.0], [44.4, 474.0], [44.5, 476.0], [44.6, 479.0], [44.7, 485.0], [44.8, 487.0], [44.9, 491.0], [45.0, 503.0], [45.1, 508.0], [45.2, 514.0], [45.3, 519.0], [45.4, 521.0], [45.5, 521.0], [45.6, 527.0], [45.7, 528.0], [45.8, 529.0], [45.9, 531.0], [46.0, 540.0], [46.1, 542.0], [46.2, 542.0], [46.3, 549.0], [46.4, 557.0], [46.5, 558.0], [46.6, 562.0], [46.7, 570.0], [46.8, 579.0], [46.9, 580.0], [47.0, 584.0], [47.1, 588.0], [47.2, 590.0], [47.3, 592.0], [47.4, 592.0], [47.5, 593.0], [47.6, 593.0], [47.7, 615.0], [47.8, 617.0], [47.9, 638.0], [48.0, 640.0], [48.1, 641.0], [48.2, 641.0], [48.3, 645.0], [48.4, 668.0], [48.5, 672.0], [48.6, 679.0], [48.7, 707.0], [48.8, 711.0], [48.9, 711.0], [49.0, 722.0], [49.1, 723.0], [49.2, 748.0], [49.3, 753.0], [49.4, 755.0], [49.5, 755.0], [49.6, 783.0], [49.7, 799.0], [49.8, 801.0], [49.9, 892.0], [50.0, 948.0], [50.1, 970.0], [50.2, 981.0], [50.3, 985.0], [50.4, 1024.0], [50.5, 1031.0], [50.6, 1088.0], [50.7, 1089.0], [50.8, 1091.0], [50.9, 1102.0], [51.0, 1126.0], [51.1, 1160.0], [51.2, 1175.0], [51.3, 10001.0], [51.4, 10001.0], [51.5, 10001.0], [51.6, 10001.0], [51.7, 10001.0], [51.8, 10001.0], [51.9, 10001.0], [52.0, 10001.0], [52.1, 10001.0], [52.2, 10001.0], [52.3, 10001.0], [52.4, 10001.0], [52.5, 10001.0], [52.6, 10001.0], [52.7, 10001.0], [52.8, 10001.0], [52.9, 10001.0], [53.0, 10002.0], [53.1, 10002.0], [53.2, 10002.0], [53.3, 10002.0], [53.4, 10002.0], [53.5, 10002.0], [53.6, 10002.0], [53.7, 10002.0], [53.8, 10002.0], [53.9, 10002.0], [54.0, 10002.0], [54.1, 10002.0], [54.2, 10002.0], [54.3, 10002.0], [54.4, 10002.0], [54.5, 10002.0], [54.6, 10002.0], [54.7, 10002.0], [54.8, 10002.0], [54.9, 10002.0], [55.0, 10002.0], [55.1, 10002.0], [55.2, 10002.0], [55.3, 10002.0], [55.4, 10002.0], [55.5, 10002.0], [55.6, 10002.0], [55.7, 10002.0], [55.8, 10002.0], [55.9, 10002.0], [56.0, 10003.0], [56.1, 10003.0], [56.2, 10003.0], [56.3, 10003.0], [56.4, 10003.0], [56.5, 10003.0], [56.6, 10003.0], [56.7, 10003.0], [56.8, 10003.0], [56.9, 10003.0], [57.0, 10003.0], [57.1, 10003.0], [57.2, 10003.0], [57.3, 10003.0], [57.4, 10003.0], [57.5, 10003.0], [57.6, 10003.0], [57.7, 10003.0], [57.8, 10003.0], [57.9, 10003.0], [58.0, 10003.0], [58.1, 10003.0], [58.2, 10003.0], [58.3, 10003.0], [58.4, 10003.0], [58.5, 10003.0], [58.6, 10003.0], [58.7, 10003.0], [58.8, 10003.0], [58.9, 10003.0], [59.0, 10003.0], [59.1, 10003.0], [59.2, 10003.0], [59.3, 10003.0], [59.4, 10003.0], [59.5, 10003.0], [59.6, 10003.0], [59.7, 10003.0], [59.8, 10003.0], [59.9, 10003.0], [60.0, 10003.0], [60.1, 10003.0], [60.2, 10003.0], [60.3, 10003.0], [60.4, 10003.0], [60.5, 10003.0], [60.6, 10003.0], [60.7, 10003.0], [60.8, 10003.0], [60.9, 10003.0], [61.0, 10003.0], [61.1, 10003.0], [61.2, 10003.0], [61.3, 10003.0], [61.4, 10003.0], [61.5, 10003.0], [61.6, 10004.0], [61.7, 10004.0], [61.8, 10004.0], [61.9, 10004.0], [62.0, 10004.0], [62.1, 10004.0], [62.2, 10004.0], [62.3, 10004.0], [62.4, 10004.0], [62.5, 10004.0], [62.6, 10004.0], [62.7, 10004.0], [62.8, 10004.0], [62.9, 10004.0], [63.0, 10004.0], [63.1, 10004.0], [63.2, 10004.0], [63.3, 10004.0], [63.4, 10004.0], [63.5, 10004.0], [63.6, 10004.0], [63.7, 10004.0], [63.8, 10004.0], [63.9, 10004.0], [64.0, 10004.0], [64.1, 10004.0], [64.2, 10004.0], [64.3, 10004.0], [64.4, 10004.0], [64.5, 10004.0], [64.6, 10004.0], [64.7, 10004.0], [64.8, 10004.0], [64.9, 10004.0], [65.0, 10004.0], [65.1, 10004.0], [65.2, 10004.0], [65.3, 10004.0], [65.4, 10004.0], [65.5, 10004.0], [65.6, 10004.0], [65.7, 10004.0], [65.8, 10004.0], [65.9, 10004.0], [66.0, 10004.0], [66.1, 10004.0], [66.2, 10004.0], [66.3, 10004.0], [66.4, 10004.0], [66.5, 10004.0], [66.6, 10004.0], [66.7, 10004.0], [66.8, 10005.0], [66.9, 10005.0], [67.0, 10005.0], [67.1, 10005.0], [67.2, 10005.0], [67.3, 10005.0], [67.4, 10005.0], [67.5, 10005.0], [67.6, 10005.0], [67.7, 10005.0], [67.8, 10005.0], [67.9, 10005.0], [68.0, 10005.0], [68.1, 10005.0], [68.2, 10005.0], [68.3, 10005.0], [68.4, 10005.0], [68.5, 10005.0], [68.6, 10005.0], [68.7, 10005.0], [68.8, 10005.0], [68.9, 10005.0], [69.0, 10005.0], [69.1, 10005.0], [69.2, 10005.0], [69.3, 10005.0], [69.4, 10005.0], [69.5, 10005.0], [69.6, 10005.0], [69.7, 10005.0], [69.8, 10005.0], [69.9, 10005.0], [70.0, 10005.0], [70.1, 10005.0], [70.2, 10005.0], [70.3, 10005.0], [70.4, 10005.0], [70.5, 10005.0], [70.6, 10005.0], [70.7, 10005.0], [70.8, 10005.0], [70.9, 10005.0], [71.0, 10005.0], [71.1, 10005.0], [71.2, 10005.0], [71.3, 10005.0], [71.4, 10005.0], [71.5, 10005.0], [71.6, 10005.0], [71.7, 10005.0], [71.8, 10005.0], [71.9, 10005.0], [72.0, 10005.0], [72.1, 10005.0], [72.2, 10005.0], [72.3, 10005.0], [72.4, 10005.0], [72.5, 10005.0], [72.6, 10005.0], [72.7, 10005.0], [72.8, 10005.0], [72.9, 10005.0], [73.0, 10005.0], [73.1, 10005.0], [73.2, 10005.0], [73.3, 10005.0], [73.4, 10005.0], [73.5, 10005.0], [73.6, 10006.0], [73.7, 10006.0], [73.8, 10006.0], [73.9, 10006.0], [74.0, 10006.0], [74.1, 10006.0], [74.2, 10006.0], [74.3, 10006.0], [74.4, 10006.0], [74.5, 10006.0], [74.6, 10006.0], [74.7, 10006.0], [74.8, 10006.0], [74.9, 10006.0], [75.0, 10006.0], [75.1, 10006.0], [75.2, 10006.0], [75.3, 10006.0], [75.4, 10006.0], [75.5, 10006.0], [75.6, 10006.0], [75.7, 10006.0], [75.8, 10006.0], [75.9, 10006.0], [76.0, 10006.0], [76.1, 10006.0], [76.2, 10006.0], [76.3, 10006.0], [76.4, 10006.0], [76.5, 10006.0], [76.6, 10006.0], [76.7, 10006.0], [76.8, 10006.0], [76.9, 10006.0], [77.0, 10006.0], [77.1, 10006.0], [77.2, 10006.0], [77.3, 10006.0], [77.4, 10006.0], [77.5, 10006.0], [77.6, 10006.0], [77.7, 10006.0], [77.8, 10006.0], [77.9, 10006.0], [78.0, 10006.0], [78.1, 10006.0], [78.2, 10006.0], [78.3, 10006.0], [78.4, 10006.0], [78.5, 10006.0], [78.6, 10006.0], [78.7, 10006.0], [78.8, 10006.0], [78.9, 10006.0], [79.0, 10006.0], [79.1, 10006.0], [79.2, 10006.0], [79.3, 10006.0], [79.4, 10006.0], [79.5, 10006.0], [79.6, 10006.0], [79.7, 10006.0], [79.8, 10006.0], [79.9, 10007.0], [80.0, 10007.0], [80.1, 10007.0], [80.2, 10007.0], [80.3, 10007.0], [80.4, 10007.0], [80.5, 10007.0], [80.6, 10007.0], [80.7, 10007.0], [80.8, 10007.0], [80.9, 10007.0], [81.0, 10007.0], [81.1, 10007.0], [81.2, 10007.0], [81.3, 10007.0], [81.4, 10007.0], [81.5, 10007.0], [81.6, 10007.0], [81.7, 10007.0], [81.8, 10008.0], [81.9, 10008.0], [82.0, 10008.0], [82.1, 10008.0], [82.2, 10008.0], [82.3, 10008.0], [82.4, 10008.0], [82.5, 10008.0], [82.6, 10008.0], [82.7, 10008.0], [82.8, 10008.0], [82.9, 10008.0], [83.0, 10008.0], [83.1, 10008.0], [83.2, 10008.0], [83.3, 10008.0], [83.4, 10009.0], [83.5, 10009.0], [83.6, 10009.0], [83.7, 10009.0], [83.8, 10009.0], [83.9, 10009.0], [84.0, 10009.0], [84.1, 10009.0], [84.2, 10009.0], [84.3, 10009.0], [84.4, 10009.0], [84.5, 10009.0], [84.6, 10010.0], [84.7, 10010.0], [84.8, 10010.0], [84.9, 10010.0], [85.0, 10010.0], [85.1, 10010.0], [85.2, 10010.0], [85.3, 10010.0], [85.4, 10010.0], [85.5, 10010.0], [85.6, 10010.0], [85.7, 10010.0], [85.8, 10010.0], [85.9, 10010.0], [86.0, 10010.0], [86.1, 10011.0], [86.2, 10011.0], [86.3, 10011.0], [86.4, 10011.0], [86.5, 10011.0], [86.6, 10011.0], [86.7, 10011.0], [86.8, 10011.0], [86.9, 10011.0], [87.0, 10011.0], [87.1, 10011.0], [87.2, 10011.0], [87.3, 10011.0], [87.4, 10012.0], [87.5, 10012.0], [87.6, 10012.0], [87.7, 10012.0], [87.8, 10012.0], [87.9, 10012.0], [88.0, 10012.0], [88.1, 10012.0], [88.2, 10012.0], [88.3, 10013.0], [88.4, 10013.0], [88.5, 10013.0], [88.6, 10013.0], [88.7, 10013.0], [88.8, 10013.0], [88.9, 10013.0], [89.0, 10013.0], [89.1, 10013.0], [89.2, 10014.0], [89.3, 10014.0], [89.4, 10014.0], [89.5, 10014.0], [89.6, 10014.0], [89.7, 10014.0], [89.8, 10015.0], [89.9, 10016.0], [90.0, 10016.0], [90.1, 10016.0], [90.2, 10017.0], [90.3, 10018.0], [90.4, 10018.0], [90.5, 10018.0], [90.6, 10018.0], [90.7, 10018.0], [90.8, 10018.0], [90.9, 10019.0], [91.0, 10019.0], [91.1, 10020.0], [91.2, 10020.0], [91.3, 10020.0], [91.4, 10020.0], [91.5, 10022.0], [91.6, 10022.0], [91.7, 10023.0], [91.8, 10023.0], [91.9, 10023.0], [92.0, 10023.0], [92.1, 10023.0], [92.2, 10025.0], [92.3, 10025.0], [92.4, 10026.0], [92.5, 10027.0], [92.6, 10027.0], [92.7, 10028.0], [92.8, 10028.0], [92.9, 10028.0], [93.0, 10028.0], [93.1, 10029.0], [93.2, 10029.0], [93.3, 10029.0], [93.4, 10029.0], [93.5, 10029.0], [93.6, 10029.0], [93.7, 10030.0], [93.8, 10030.0], [93.9, 10032.0], [94.0, 10032.0], [94.1, 10033.0], [94.2, 10033.0], [94.3, 10034.0], [94.4, 10034.0], [94.5, 10035.0], [94.6, 10035.0], [94.7, 10035.0], [94.8, 10035.0], [94.9, 10035.0], [95.0, 10035.0], [95.1, 10036.0], [95.2, 10036.0], [95.3, 10036.0], [95.4, 10037.0], [95.5, 10038.0], [95.6, 10038.0], [95.7, 10038.0], [95.8, 10038.0], [95.9, 10039.0], [96.0, 10039.0], [96.1, 10039.0], [96.2, 10039.0], [96.3, 10040.0], [96.4, 10040.0], [96.5, 10040.0], [96.6, 10041.0], [96.7, 10041.0], [96.8, 10041.0], [96.9, 10041.0], [97.0, 10042.0], [97.1, 10042.0], [97.2, 10042.0], [97.3, 10042.0], [97.4, 10043.0], [97.5, 10043.0], [97.6, 10043.0], [97.7, 10043.0], [97.8, 10044.0], [97.9, 10044.0], [98.0, 10044.0], [98.1, 10044.0], [98.2, 10044.0], [98.3, 10044.0], [98.4, 10045.0], [98.5, 10045.0], [98.6, 10045.0], [98.7, 10045.0], [98.8, 10046.0], [98.9, 10046.0], [99.0, 10046.0], [99.1, 10046.0], [99.2, 10046.0], [99.3, 10047.0], [99.4, 10047.0], [99.5, 10047.0], [99.6, 10049.0], [99.7, 10050.0], [99.8, 10052.0], [99.9, 10060.0], [100.0, 10068.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 0.0], [90.9, 0.0], [91.0, 0.0], [91.1, 0.0], [91.2, 0.0], [91.3, 37.0], [91.4, 37.0], [91.5, 38.0], [91.6, 38.0], [91.7, 39.0], [91.8, 39.0], [91.9, 40.0], [92.0, 40.0], [92.1, 40.0], [92.2, 42.0], [92.3, 42.0], [92.4, 42.0], [92.5, 42.0], [92.6, 42.0], [92.7, 42.0], [92.8, 42.0], [92.9, 42.0], [93.0, 42.0], [93.1, 42.0], [93.2, 42.0], [93.3, 42.0], [93.4, 42.0], [93.5, 43.0], [93.6, 44.0], [93.7, 44.0], [93.8, 45.0], [93.9, 45.0], [94.0, 45.0], [94.1, 45.0], [94.2, 45.0], [94.3, 46.0], [94.4, 46.0], [94.5, 47.0], [94.6, 47.0], [94.7, 47.0], [94.8, 49.0], [94.9, 49.0], [95.0, 49.0], [95.1, 49.0], [95.2, 49.0], [95.3, 49.0], [95.4, 49.0], [95.5, 49.0], [95.6, 50.0], [95.7, 50.0], [95.8, 50.0], [95.9, 50.0], [96.0, 52.0], [96.1, 53.0], [96.2, 62.0], [96.3, 65.0], [96.4, 66.0], [96.5, 66.0], [96.6, 67.0], [96.7, 68.0], [96.8, 69.0], [96.9, 69.0], [97.0, 70.0], [97.1, 70.0], [97.2, 71.0], [97.3, 71.0], [97.4, 71.0], [97.5, 72.0], [97.6, 72.0], [97.7, 73.0], [97.8, 74.0], [97.9, 74.0], [98.0, 75.0], [98.1, 76.0], [98.2, 78.0], [98.3, 86.0], [98.4, 86.0], [98.5, 88.0], [98.6, 88.0], [98.7, 90.0], [98.8, 92.0], [98.9, 108.0], [99.0, 108.0], [99.1, 112.0], [99.2, 114.0], [99.3, 114.0], [99.4, 120.0], [99.5, 122.0], [99.6, 124.0], [99.7, 124.0], [99.8, 125.0], [99.9, 183.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 0.0], [33.5, 0.0], [33.6, 0.0], [33.7, 0.0], [33.8, 0.0], [33.9, 0.0], [34.0, 0.0], [34.1, 0.0], [34.2, 0.0], [34.3, 0.0], [34.4, 0.0], [34.5, 0.0], [34.6, 0.0], [34.7, 0.0], [34.8, 0.0], [34.9, 0.0], [35.0, 0.0], [35.1, 0.0], [35.2, 0.0], [35.3, 0.0], [35.4, 0.0], [35.5, 0.0], [35.6, 0.0], [35.7, 0.0], [35.8, 0.0], [35.9, 0.0], [36.0, 0.0], [36.1, 0.0], [36.2, 0.0], [36.3, 0.0], [36.4, 0.0], [36.5, 0.0], [36.6, 0.0], [36.7, 0.0], [36.8, 0.0], [36.9, 0.0], [37.0, 0.0], [37.1, 0.0], [37.2, 0.0], [37.3, 0.0], [37.4, 0.0], [37.5, 0.0], [37.6, 0.0], [37.7, 0.0], [37.8, 0.0], [37.9, 0.0], [38.0, 0.0], [38.1, 0.0], [38.2, 0.0], [38.3, 0.0], [38.4, 0.0], [38.5, 0.0], [38.6, 0.0], [38.7, 0.0], [38.8, 0.0], [38.9, 0.0], [39.0, 0.0], [39.1, 0.0], [39.2, 0.0], [39.3, 0.0], [39.4, 0.0], [39.5, 0.0], [39.6, 0.0], [39.7, 0.0], [39.8, 0.0], [39.9, 0.0], [40.0, 0.0], [40.1, 0.0], [40.2, 0.0], [40.3, 0.0], [40.4, 0.0], [40.5, 0.0], [40.6, 0.0], [40.7, 0.0], [40.8, 0.0], [40.9, 0.0], [41.0, 0.0], [41.1, 0.0], [41.2, 0.0], [41.3, 0.0], [41.4, 0.0], [41.5, 0.0], [41.6, 0.0], [41.7, 0.0], [41.8, 0.0], [41.9, 0.0], [42.0, 0.0], [42.1, 0.0], [42.2, 0.0], [42.3, 0.0], [42.4, 0.0], [42.5, 0.0], [42.6, 0.0], [42.7, 0.0], [42.8, 0.0], [42.9, 0.0], [43.0, 0.0], [43.1, 0.0], [43.2, 0.0], [43.3, 0.0], [43.4, 0.0], [43.5, 0.0], [43.6, 0.0], [43.7, 0.0], [43.8, 0.0], [43.9, 0.0], [44.0, 0.0], [44.1, 0.0], [44.2, 0.0], [44.3, 0.0], [44.4, 0.0], [44.5, 0.0], [44.6, 0.0], [44.7, 0.0], [44.8, 0.0], [44.9, 0.0], [45.0, 0.0], [45.1, 0.0], [45.2, 0.0], [45.3, 0.0], [45.4, 0.0], [45.5, 0.0], [45.6, 0.0], [45.7, 0.0], [45.8, 0.0], [45.9, 0.0], [46.0, 0.0], [46.1, 0.0], [46.2, 0.0], [46.3, 0.0], [46.4, 0.0], [46.5, 0.0], [46.6, 0.0], [46.7, 0.0], [46.8, 0.0], [46.9, 0.0], [47.0, 0.0], [47.1, 0.0], [47.2, 0.0], [47.3, 0.0], [47.4, 0.0], [47.5, 0.0], [47.6, 0.0], [47.7, 0.0], [47.8, 0.0], [47.9, 0.0], [48.0, 0.0], [48.1, 0.0], [48.2, 0.0], [48.3, 0.0], [48.4, 0.0], [48.5, 0.0], [48.6, 0.0], [48.7, 0.0], [48.8, 0.0], [48.9, 0.0], [49.0, 0.0], [49.1, 0.0], [49.2, 0.0], [49.3, 0.0], [49.4, 0.0], [49.5, 0.0], [49.6, 0.0], [49.7, 0.0], [49.8, 0.0], [49.9, 0.0], [50.0, 0.0], [50.1, 0.0], [50.2, 0.0], [50.3, 0.0], [50.4, 0.0], [50.5, 0.0], [50.6, 0.0], [50.7, 0.0], [50.8, 0.0], [50.9, 0.0], [51.0, 0.0], [51.1, 0.0], [51.2, 0.0], [51.3, 0.0], [51.4, 0.0], [51.5, 0.0], [51.6, 0.0], [51.7, 0.0], [51.8, 0.0], [51.9, 0.0], [52.0, 0.0], [52.1, 0.0], [52.2, 0.0], [52.3, 0.0], [52.4, 0.0], [52.5, 0.0], [52.6, 0.0], [52.7, 0.0], [52.8, 0.0], [52.9, 0.0], [53.0, 0.0], [53.1, 0.0], [53.2, 0.0], [53.3, 0.0], [53.4, 0.0], [53.5, 0.0], [53.6, 0.0], [53.7, 0.0], [53.8, 0.0], [53.9, 0.0], [54.0, 0.0], [54.1, 0.0], [54.2, 0.0], [54.3, 0.0], [54.4, 0.0], [54.5, 0.0], [54.6, 0.0], [54.7, 0.0], [54.8, 0.0], [54.9, 0.0], [55.0, 0.0], [55.1, 0.0], [55.2, 0.0], [55.3, 0.0], [55.4, 0.0], [55.5, 0.0], [55.6, 0.0], [55.7, 0.0], [55.8, 0.0], [55.9, 0.0], [56.0, 0.0], [56.1, 0.0], [56.2, 0.0], [56.3, 0.0], [56.4, 0.0], [56.5, 0.0], [56.6, 0.0], [56.7, 0.0], [56.8, 0.0], [56.9, 0.0], [57.0, 0.0], [57.1, 0.0], [57.2, 0.0], [57.3, 0.0], [57.4, 0.0], [57.5, 0.0], [57.6, 0.0], [57.7, 0.0], [57.8, 0.0], [57.9, 0.0], [58.0, 0.0], [58.1, 0.0], [58.2, 0.0], [58.3, 0.0], [58.4, 0.0], [58.5, 0.0], [58.6, 0.0], [58.7, 0.0], [58.8, 0.0], [58.9, 0.0], [59.0, 0.0], [59.1, 0.0], [59.2, 0.0], [59.3, 0.0], [59.4, 0.0], [59.5, 0.0], [59.6, 0.0], [59.7, 0.0], [59.8, 0.0], [59.9, 0.0], [60.0, 0.0], [60.1, 0.0], [60.2, 0.0], [60.3, 0.0], [60.4, 0.0], [60.5, 0.0], [60.6, 0.0], [60.7, 0.0], [60.8, 0.0], [60.9, 0.0], [61.0, 0.0], [61.1, 0.0], [61.2, 0.0], [61.3, 0.0], [61.4, 0.0], [61.5, 0.0], [61.6, 0.0], [61.7, 0.0], [61.8, 0.0], [61.9, 0.0], [62.0, 0.0], [62.1, 0.0], [62.2, 0.0], [62.3, 0.0], [62.4, 0.0], [62.5, 0.0], [62.6, 0.0], [62.7, 0.0], [62.8, 0.0], [62.9, 0.0], [63.0, 0.0], [63.1, 0.0], [63.2, 0.0], [63.3, 0.0], [63.4, 0.0], [63.5, 0.0], [63.6, 0.0], [63.7, 0.0], [63.8, 0.0], [63.9, 0.0], [64.0, 0.0], [64.1, 0.0], [64.2, 0.0], [64.3, 0.0], [64.4, 0.0], [64.5, 0.0], [64.6, 0.0], [64.7, 0.0], [64.8, 0.0], [64.9, 0.0], [65.0, 0.0], [65.1, 0.0], [65.2, 0.0], [65.3, 0.0], [65.4, 0.0], [65.5, 0.0], [65.6, 0.0], [65.7, 0.0], [65.8, 0.0], [65.9, 0.0], [66.0, 0.0], [66.1, 0.0], [66.2, 0.0], [66.3, 0.0], [66.4, 0.0], [66.5, 0.0], [66.6, 0.0], [66.7, 0.0], [66.8, 0.0], [66.9, 0.0], [67.0, 0.0], [67.1, 0.0], [67.2, 0.0], [67.3, 0.0], [67.4, 0.0], [67.5, 0.0], [67.6, 0.0], [67.7, 0.0], [67.8, 0.0], [67.9, 0.0], [68.0, 0.0], [68.1, 0.0], [68.2, 0.0], [68.3, 0.0], [68.4, 0.0], [68.5, 0.0], [68.6, 0.0], [68.7, 0.0], [68.8, 0.0], [68.9, 0.0], [69.0, 0.0], [69.1, 0.0], [69.2, 0.0], [69.3, 0.0], [69.4, 0.0], [69.5, 0.0], [69.6, 0.0], [69.7, 0.0], [69.8, 0.0], [69.9, 0.0], [70.0, 0.0], [70.1, 0.0], [70.2, 0.0], [70.3, 0.0], [70.4, 0.0], [70.5, 0.0], [70.6, 0.0], [70.7, 0.0], [70.8, 0.0], [70.9, 0.0], [71.0, 0.0], [71.1, 0.0], [71.2, 0.0], [71.3, 0.0], [71.4, 0.0], [71.5, 0.0], [71.6, 0.0], [71.7, 0.0], [71.8, 0.0], [71.9, 0.0], [72.0, 0.0], [72.1, 0.0], [72.2, 0.0], [72.3, 0.0], [72.4, 0.0], [72.5, 0.0], [72.6, 0.0], [72.7, 0.0], [72.8, 0.0], [72.9, 0.0], [73.0, 0.0], [73.1, 0.0], [73.2, 0.0], [73.3, 0.0], [73.4, 0.0], [73.5, 0.0], [73.6, 0.0], [73.7, 0.0], [73.8, 0.0], [73.9, 0.0], [74.0, 0.0], [74.1, 0.0], [74.2, 0.0], [74.3, 0.0], [74.4, 0.0], [74.5, 0.0], [74.6, 0.0], [74.7, 0.0], [74.8, 0.0], [74.9, 0.0], [75.0, 0.0], [75.1, 0.0], [75.2, 0.0], [75.3, 0.0], [75.4, 0.0], [75.5, 0.0], [75.6, 0.0], [75.7, 0.0], [75.8, 0.0], [75.9, 0.0], [76.0, 0.0], [76.1, 0.0], [76.2, 0.0], [76.3, 0.0], [76.4, 0.0], [76.5, 0.0], [76.6, 0.0], [76.7, 0.0], [76.8, 0.0], [76.9, 0.0], [77.0, 0.0], [77.1, 0.0], [77.2, 0.0], [77.3, 0.0], [77.4, 0.0], [77.5, 0.0], [77.6, 0.0], [77.7, 0.0], [77.8, 0.0], [77.9, 0.0], [78.0, 0.0], [78.1, 0.0], [78.2, 0.0], [78.3, 0.0], [78.4, 0.0], [78.5, 0.0], [78.6, 0.0], [78.7, 0.0], [78.8, 0.0], [78.9, 0.0], [79.0, 0.0], [79.1, 0.0], [79.2, 0.0], [79.3, 0.0], [79.4, 0.0], [79.5, 0.0], [79.6, 0.0], [79.7, 0.0], [79.8, 0.0], [79.9, 0.0], [80.0, 0.0], [80.1, 0.0], [80.2, 0.0], [80.3, 0.0], [80.4, 0.0], [80.5, 0.0], [80.6, 0.0], [80.7, 0.0], [80.8, 0.0], [80.9, 0.0], [81.0, 0.0], [81.1, 0.0], [81.2, 0.0], [81.3, 0.0], [81.4, 0.0], [81.5, 0.0], [81.6, 0.0], [81.7, 0.0], [81.8, 0.0], [81.9, 0.0], [82.0, 0.0], [82.1, 0.0], [82.2, 0.0], [82.3, 0.0], [82.4, 0.0], [82.5, 0.0], [82.6, 0.0], [82.7, 0.0], [82.8, 0.0], [82.9, 0.0], [83.0, 0.0], [83.1, 0.0], [83.2, 0.0], [83.3, 0.0], [83.4, 0.0], [83.5, 0.0], [83.6, 0.0], [83.7, 0.0], [83.8, 0.0], [83.9, 0.0], [84.0, 0.0], [84.1, 0.0], [84.2, 0.0], [84.3, 0.0], [84.4, 0.0], [84.5, 0.0], [84.6, 0.0], [84.7, 0.0], [84.8, 0.0], [84.9, 0.0], [85.0, 0.0], [85.1, 0.0], [85.2, 0.0], [85.3, 0.0], [85.4, 0.0], [85.5, 0.0], [85.6, 0.0], [85.7, 0.0], [85.8, 0.0], [85.9, 0.0], [86.0, 0.0], [86.1, 0.0], [86.2, 0.0], [86.3, 0.0], [86.4, 0.0], [86.5, 0.0], [86.6, 0.0], [86.7, 0.0], [86.8, 0.0], [86.9, 0.0], [87.0, 0.0], [87.1, 0.0], [87.2, 0.0], [87.3, 0.0], [87.4, 0.0], [87.5, 0.0], [87.6, 0.0], [87.7, 0.0], [87.8, 0.0], [87.9, 0.0], [88.0, 0.0], [88.1, 0.0], [88.2, 0.0], [88.3, 0.0], [88.4, 0.0], [88.5, 0.0], [88.6, 0.0], [88.7, 0.0], [88.8, 0.0], [88.9, 0.0], [89.0, 0.0], [89.1, 0.0], [89.2, 0.0], [89.3, 0.0], [89.4, 0.0], [89.5, 0.0], [89.6, 0.0], [89.7, 0.0], [89.8, 0.0], [89.9, 0.0], [90.0, 0.0], [90.1, 0.0], [90.2, 0.0], [90.3, 0.0], [90.4, 0.0], [90.5, 0.0], [90.6, 0.0], [90.7, 0.0], [90.8, 1.0], [90.9, 1.0], [91.0, 1.0], [91.1, 1.0], [91.2, 1.0], [91.3, 35.0], [91.4, 38.0], [91.5, 38.0], [91.6, 38.0], [91.7, 38.0], [91.8, 38.0], [91.9, 38.0], [92.0, 38.0], [92.1, 39.0], [92.2, 39.0], [92.3, 39.0], [92.4, 39.0], [92.5, 39.0], [92.6, 39.0], [92.7, 39.0], [92.8, 40.0], [92.9, 40.0], [93.0, 40.0], [93.1, 40.0], [93.2, 41.0], [93.3, 41.0], [93.4, 41.0], [93.5, 41.0], [93.6, 41.0], [93.7, 41.0], [93.8, 42.0], [93.9, 42.0], [94.0, 42.0], [94.1, 42.0], [94.2, 42.0], [94.3, 42.0], [94.4, 44.0], [94.5, 44.0], [94.6, 45.0], [94.7, 47.0], [94.8, 47.0], [94.9, 47.0], [95.0, 47.0], [95.1, 47.0], [95.2, 47.0], [95.3, 48.0], [95.4, 48.0], [95.5, 49.0], [95.6, 50.0], [95.7, 51.0], [95.8, 51.0], [95.9, 51.0], [96.0, 52.0], [96.1, 52.0], [96.2, 53.0], [96.3, 53.0], [96.4, 53.0], [96.5, 54.0], [96.6, 58.0], [96.7, 58.0], [96.8, 58.0], [96.9, 58.0], [97.0, 59.0], [97.1, 59.0], [97.2, 59.0], [97.3, 59.0], [97.4, 60.0], [97.5, 60.0], [97.6, 60.0], [97.7, 63.0], [97.8, 63.0], [97.9, 70.0], [98.0, 70.0], [98.1, 71.0], [98.2, 73.0], [98.3, 73.0], [98.4, 73.0], [98.5, 74.0], [98.6, 76.0], [98.7, 83.0], [98.8, 84.0], [98.9, 84.0], [99.0, 85.0], [99.1, 87.0], [99.2, 87.0], [99.3, 89.0], [99.4, 90.0], [99.5, 92.0], [99.6, 106.0], [99.7, 108.0], [99.8, 208.0], [99.9, 340.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 996.0, "series": [{"data": [[1100.0, 4.0], [300.0, 87.0], [600.0, 10.0], [10000.0, 488.0], [700.0, 11.0], [100.0, 22.0], [200.0, 282.0], [400.0, 58.0], [800.0, 2.0], [900.0, 4.0], [500.0, 27.0], [1000.0, 5.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[0.0, 989.0], [100.0, 11.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 996.0], [300.0, 1.0], [200.0, 1.0], [100.0, 2.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 19.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2739.0, "series": [{"data": [[0.0, 242.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 19.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2739.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 244.7848360655734, "minX": 1.70385432E12, "maxY": 384.5149739583331, "series": [{"data": [[1.70385432E12, 384.5149739583331], [1.70385438E12, 244.7848360655734]], "isOverall": false, "label": "Pub Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70385438E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10068.0, "series": [{"data": [[2.0, 10003.0], [3.0, 10002.0], [4.0, 10001.0], [5.0, 10003.0], [6.0, 10003.0], [7.0, 10003.0], [8.0, 10003.0], [9.0, 10002.0], [10.0, 10007.0], [11.0, 10003.0], [12.0, 10003.0], [13.0, 10003.0], [14.0, 10005.0], [15.0, 10006.0], [16.0, 10003.0], [17.0, 10003.0], [19.0, 10003.0], [20.0, 10002.0], [21.0, 10002.0], [22.0, 10001.0], [23.0, 10001.0], [24.0, 10001.0], [25.0, 10001.0], [26.0, 10005.0], [27.0, 10004.0], [28.0, 10004.0], [30.0, 10004.5], [33.0, 10004.0], [32.0, 10004.0], [35.0, 10005.0], [34.0, 10002.0], [37.0, 10003.0], [36.0, 10003.0], [39.0, 10004.0], [38.0, 10004.0], [41.0, 10002.0], [40.0, 10004.0], [43.0, 10003.0], [42.0, 10003.0], [45.0, 10002.0], [44.0, 10004.0], [47.0, 10006.0], [46.0, 10005.0], [49.0, 10005.0], [48.0, 10005.0], [51.0, 10008.0], [50.0, 10005.0], [53.0, 10009.0], [52.0, 10010.0], [55.0, 10010.0], [54.0, 10008.0], [57.0, 10003.0], [56.0, 10003.0], [59.0, 10003.0], [58.0, 10005.0], [61.0, 10004.0], [60.0, 10004.0], [63.0, 10003.0], [62.0, 10005.0], [67.0, 10001.0], [66.0, 10003.0], [65.0, 10004.0], [64.0, 10005.0], [71.0, 10006.0], [70.0, 10003.0], [69.0, 10005.0], [68.0, 10001.0], [75.0, 10006.0], [74.0, 10006.0], [73.0, 10006.0], [72.0, 10006.0], [79.0, 10004.0], [78.0, 10004.0], [77.0, 10001.0], [76.0, 10005.0], [83.0, 10005.0], [82.0, 10005.0], [81.0, 10006.0], [80.0, 10006.0], [87.0, 10006.0], [86.0, 10004.0], [85.0, 10004.0], [84.0, 10005.0], [91.0, 10006.0], [90.0, 10005.0], [89.0, 10003.0], [95.0, 10006.0], [93.0, 10007.0], [92.0, 10007.0], [99.0, 10002.0], [98.0, 10003.0], [97.0, 10004.0], [96.0, 10005.0], [103.0, 10005.0], [102.0, 10005.0], [101.0, 10005.0], [100.0, 10005.0], [107.0, 10003.0], [106.0, 10002.0], [105.0, 10002.0], [104.0, 10005.0], [111.0, 10005.0], [110.0, 10005.0], [109.0, 10003.0], [108.0, 10003.0], [115.0, 10006.0], [114.0, 10006.0], [113.0, 10004.0], [112.0, 10004.0], [119.0, 10010.0], [118.0, 10010.0], [117.0, 10009.0], [116.0, 10008.0], [123.0, 10011.0], [122.0, 10011.0], [121.0, 10012.0], [120.0, 10010.0], [127.0, 10006.0], [126.0, 10003.0], [125.0, 10004.0], [124.0, 10004.0], [135.0, 10004.0], [134.0, 10003.0], [133.0, 10003.0], [132.0, 10004.0], [131.0, 10006.0], [130.0, 10006.0], [129.0, 10006.0], [128.0, 10006.0], [143.0, 10003.0], [142.0, 10005.0], [141.0, 10003.0], [140.0, 10005.0], [139.0, 10005.0], [138.0, 10004.0], [137.0, 10006.0], [136.0, 10005.0], [151.0, 10005.0], [150.0, 10005.0], [149.0, 10006.0], [148.0, 10006.0], [147.0, 10006.0], [146.0, 10005.0], [145.0, 10005.0], [144.0, 10005.0], [158.0, 10007.0], [157.0, 10006.0], [156.0, 10008.0], [155.0, 10006.0], [154.0, 10016.333333333334], [167.0, 10015.0], [166.0, 10012.0], [165.0, 10002.0], [164.0, 10013.0], [163.0, 10011.0], [162.0, 10010.0], [161.0, 10012.0], [160.0, 10014.5], [175.0, 10018.0], [174.0, 10018.5], [172.0, 10019.0], [171.0, 10019.0], [169.0, 10017.0], [168.0, 10016.0], [183.0, 10005.0], [182.0, 10023.0], [181.0, 10035.0], [180.0, 10025.0], [179.0, 10052.0], [178.0, 10020.0], [177.0, 10020.0], [176.0, 10018.0], [191.0, 10038.0], [190.0, 10039.0], [189.0, 10022.0], [188.0, 10032.0], [187.0, 10023.0], [186.0, 10023.0], [185.0, 10033.0], [184.0, 10025.0], [199.0, 10045.0], [198.0, 10044.0], [197.0, 10042.0], [196.0, 10044.0], [195.0, 10045.0], [194.0, 10035.0], [193.0, 10039.0], [192.0, 10042.0], [207.0, 10008.0], [206.0, 10043.0], [205.0, 10008.0], [204.0, 10004.0], [203.0, 10004.0], [202.0, 10046.0], [201.0, 10046.0], [200.0, 10044.0], [215.0, 10006.0], [214.0, 10002.0], [213.0, 10039.0], [212.0, 10004.0], [211.0, 10038.0], [210.0, 10011.0], [209.0, 10009.0], [208.0, 10044.0], [223.0, 10035.0], [222.0, 10036.0], [221.0, 10016.0], [219.0, 10068.0], [218.0, 10004.0], [217.0, 10006.0], [216.0, 10034.0], [231.0, 10040.0], [230.0, 10042.0], [229.0, 10034.0], [228.0, 10003.0], [227.0, 10040.0], [226.0, 10030.0], [225.0, 10043.0], [224.0, 10035.0], [239.0, 10045.0], [238.0, 10060.0], [237.0, 10043.0], [236.0, 10043.0], [235.0, 10042.0], [234.0, 10038.0], [233.0, 10032.0], [232.0, 10035.0], [247.0, 10002.0], [246.0, 10045.0], [245.0, 10049.0], [244.0, 10005.0], [243.0, 10047.0], [242.0, 10048.5], [240.0, 10046.0], [255.0, 10004.0], [254.0, 10044.0], [253.0, 10044.0], [252.0, 10046.0], [251.0, 10046.0], [250.0, 10006.0], [249.0, 10047.0], [248.0, 10002.0], [268.0, 10020.0], [271.0, 10029.0], [270.0, 10029.0], [269.0, 10004.0], [265.0, 10017.5], [263.0, 10001.0], [257.0, 10041.0], [259.0, 10041.0], [258.0, 10039.0], [262.0, 10038.0], [261.0, 10041.0], [260.0, 10040.0], [286.0, 10006.0], [287.0, 10011.0], [285.0, 10006.0], [284.0, 10004.0], [283.0, 10010.0], [282.0, 10012.0], [281.0, 10006.666666666666], [278.0, 10001.0], [273.0, 10004.0], [272.0, 10005.0], [277.0, 10002.0], [276.0, 10018.0], [302.0, 10005.0], [303.0, 10003.0], [301.0, 10006.0], [300.0, 10003.0], [299.0, 10006.0], [298.0, 10006.0], [297.0, 10007.0], [296.0, 10008.0], [294.0, 10008.0], [288.0, 10006.0], [290.0, 10003.0], [289.0, 10006.0], [293.0, 10006.0], [292.0, 10012.5], [317.0, 10010.0], [318.0, 10010.0], [316.0, 10008.0], [307.0, 10003.0], [306.0, 10006.0], [305.0, 10004.0], [304.0, 10003.0], [315.0, 10008.0], [314.0, 10005.0], [313.0, 10005.0], [312.0, 10006.0], [311.0, 10005.0], [310.0, 10006.0], [309.0, 10005.0], [308.0, 10005.0], [334.0, 3501.0], [335.0, 5115.5], [333.0, 2688.25], [332.0, 3490.3333333333335], [331.0, 5116.0], [330.0, 5117.5], [328.0, 6747.333333333333], [327.0, 250.0], [321.0, 10014.0], [320.0, 10015.5], [323.0, 10014.0], [322.0, 10014.0], [326.0, 10010.0], [325.0, 10013.0], [324.0, 10014.0], [329.0, 3489.6666666666665], [350.0, 3603.3333333333335], [351.0, 3593.3333333333335], [349.0, 2725.5], [348.0, 10006.0], [339.0, 5189.0], [337.0, 5115.0], [336.0, 2239.2], [347.0, 3603.0], [345.0, 5130.0], [346.0, 5206.0], [344.0, 3572.0], [343.0, 1866.3333333333333], [342.0, 3554.3333333333335], [340.0, 1487.125], [341.0, 1676.5714285714287], [366.0, 297.0], [367.0, 327.6666666666667], [365.0, 367.8], [363.0, 311.5], [364.0, 260.42857142857144], [362.0, 370.4], [361.0, 279.75], [360.0, 1282.7], [359.0, 2727.25], [354.0, 1937.1666666666667], [353.0, 2761.75], [355.0, 2217.4], [352.0, 3627.6666666666665], [358.0, 1614.8571428571427], [356.0, 3550.3333333333335], [357.0, 1857.3333333333335], [381.0, 331.87499999999994], [383.0, 1016.7857142857143], [382.0, 1646.857142857143], [380.0, 1131.1818181818182], [379.0, 1513.25], [378.0, 1245.6999999999998], [377.0, 1915.9166666666665], [376.0, 358.3333333333333], [375.0, 6905.681818181817], [374.0, 289.5], [373.0, 338.5], [372.0, 362.55555555555554], [371.0, 324.2857142857143], [370.0, 353.25], [368.0, 329.11111111111114], [369.0, 359.4444444444444], [386.0, 1186.5909090909092], [385.0, 253.93333333333328], [387.0, 901.1875], [396.0, 1349.111111111111], [398.0, 426.6], [399.0, 3265.142857142857], [397.0, 998.125], [384.0, 732.047619047619], [388.0, 1138.3846153846155], [389.0, 396.1666666666667], [392.0, 1496.3333333333333], [394.0, 2189.2], [393.0, 1268.7272727272727], [395.0, 1296.3000000000002], [391.0, 2244.7000000000003], [390.0, 782.8421052631579], [402.0, 5133.5], [405.0, 3499.0], [406.0, 5127.5], [407.0, 10030.0], [404.0, 5143.0], [403.0, 3510.6666666666665], [413.0, 10026.0], [412.0, 10005.0], [401.0, 6766.666666666667], [400.0, 413.5], [415.0, 10006.0], [409.0, 10028.0], [408.0, 10027.0], [411.0, 10005.0], [410.0, 10029.0], [414.0, 10006.0], [431.0, 10006.0], [427.0, 5229.5], [430.0, 10007.0], [429.0, 10001.0], [428.0, 10004.0], [419.0, 10014.0], [418.0, 10002.0], [417.0, 10023.0], [416.0, 10023.0], [426.0, 10007.0], [425.0, 10004.0], [424.0, 10005.0], [423.0, 10012.0], [422.0, 10012.0], [421.0, 10011.0], [420.0, 10016.0], [447.0, 10003.0], [439.0, 3623.6666666666665], [438.0, 10004.0], [437.0, 10005.5], [440.0, 5219.5], [446.0, 10006.0], [445.0, 10007.0], [444.0, 10005.0], [435.0, 10006.0], [434.0, 10006.0], [433.0, 10006.0], [432.0, 10006.0], [443.0, 10013.0], [442.0, 10010.0], [441.0, 10009.0], [461.0, 10005.0], [463.0, 10006.5], [460.0, 10005.0], [450.0, 10001.0], [449.0, 10006.0], [448.0, 10005.0], [459.0, 10002.0], [458.0, 10007.0], [457.0, 10006.0], [456.0, 10008.0], [455.0, 10006.0], [454.0, 10006.0], [453.0, 10006.5], [452.0, 10003.0], [477.0, 10004.0], [479.0, 5213.0], [476.0, 10005.0], [467.0, 10003.0], [466.0, 10003.0], [465.0, 10007.0], [464.0, 10007.0], [475.0, 10005.0], [474.0, 10001.5], [472.0, 10003.0], [471.0, 10003.0], [470.0, 10003.0], [469.0, 10003.0], [468.0, 10003.0], [483.0, 10007.5], [490.0, 437.0], [491.0, 1089.3333333333333], [488.0, 10007.0], [487.0, 10001.0], [486.0, 10003.0], [485.0, 10004.0], [484.0, 10005.0], [481.0, 10011.0], [480.0, 10010.5], [498.0, 426.5], [505.0, 431.0], [511.0, 434.0], [502.0, 1036.3], [500.0, 1031.0], [515.0, 430.0], [1.0, 10004.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[315.3449999999996, 5057.801999999998]], "isOverall": false, "label": "MQTT Connect-Aggregated", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [34.0, 0.0], [37.0, 0.0], [36.0, 0.0], [39.0, 0.0], [38.0, 0.0], [41.0, 0.0], [40.0, 0.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [67.0, 0.0], [66.0, 0.0], [65.0, 0.0], [64.0, 0.0], [71.0, 0.0], [70.0, 0.0], [69.0, 0.0], [68.0, 0.0], [75.0, 0.0], [74.0, 0.0], [73.0, 0.0], [72.0, 0.0], [79.0, 0.0], [78.0, 0.0], [77.0, 0.0], [76.0, 0.0], [83.0, 0.0], [82.0, 0.0], [81.0, 0.0], [80.0, 0.0], [87.0, 0.0], [86.0, 0.0], [85.0, 0.0], [84.0, 0.0], [91.0, 0.0], [90.0, 0.0], [89.0, 0.0], [88.0, 0.0], [95.0, 0.0], [94.0, 0.0], [93.0, 0.0], [92.0, 0.0], [99.0, 0.0], [98.0, 0.0], [97.0, 0.0], [96.0, 0.0], [103.0, 0.0], [102.0, 0.0], [101.0, 0.0], [100.0, 0.0], [107.0, 0.0], [106.0, 0.0], [105.0, 0.0], [104.0, 0.0], [111.0, 0.0], [110.0, 0.0], [109.0, 0.0], [108.0, 0.0], [115.0, 0.0], [114.0, 0.0], [113.0, 0.0], [112.0, 0.0], [119.0, 0.0], [118.0, 0.0], [117.0, 0.0], [116.0, 0.0], [123.0, 0.0], [122.0, 0.0], [121.0, 0.0], [120.0, 0.0], [127.0, 0.0], [126.0, 0.0], [125.0, 0.0], [124.0, 0.0], [135.0, 0.0], [134.0, 0.0], [133.0, 0.0], [132.0, 0.0], [131.0, 0.0], [130.0, 0.0], [129.0, 0.0], [128.0, 0.0], [143.0, 0.0], [142.0, 0.0], [141.0, 0.0], [140.0, 0.0], [139.0, 0.0], [138.0, 0.0], [137.0, 0.0], [136.0, 0.0], [151.0, 0.0], [150.0, 0.0], [149.0, 0.0], [148.0, 0.0], [147.0, 0.0], [146.0, 0.0], [145.0, 0.0], [144.0, 0.0], [159.0, 0.0], [158.0, 0.0], [157.0, 0.0], [156.0, 0.0], [155.0, 0.0], [154.0, 0.0], [167.0, 0.0], [166.0, 0.0], [165.0, 0.0], [164.0, 0.0], [163.0, 0.0], [162.0, 0.0], [161.0, 0.0], [160.0, 0.0], [175.0, 0.0], [174.0, 0.0], [173.0, 0.0], [172.0, 0.0], [171.0, 0.0], [169.0, 0.0], [168.0, 0.0], [183.0, 0.0], [182.0, 0.0], [181.0, 0.0], [180.0, 0.0], [179.0, 0.0], [178.0, 0.0], [177.0, 0.0], [176.0, 0.0], [191.0, 0.0], [190.0, 0.0], [189.0, 0.0], [188.0, 0.0], [187.0, 0.0], [186.0, 0.0], [185.0, 0.0], [184.0, 0.0], [199.0, 0.0], [198.0, 0.0], [197.0, 0.0], [196.0, 0.0], [195.0, 0.0], [194.0, 0.0], [193.0, 0.0], [192.0, 0.0], [207.0, 0.0], [206.0, 0.0], [205.0, 0.0], [204.0, 0.0], [203.0, 0.0], [202.0, 0.0], [201.0, 0.0], [200.0, 0.0], [215.0, 0.0], [214.0, 0.0], [213.0, 0.0], [212.0, 0.0], [211.0, 0.0], [210.0, 0.0], [209.0, 0.0], [208.0, 0.0], [223.0, 0.0], [222.0, 0.0], [221.0, 0.0], [220.0, 0.0], [219.0, 0.0], [218.0, 0.0], [217.0, 0.0], [216.0, 0.0], [231.0, 0.0], [230.0, 0.0], [229.0, 0.0], [228.0, 0.0], [227.0, 0.0], [226.0, 0.0], [225.0, 0.0], [224.0, 0.0], [239.0, 0.0], [238.0, 0.0], [237.0, 0.0], [236.0, 0.0], [235.0, 0.0], [234.0, 0.0], [233.0, 0.0], [232.0, 0.0], [247.0, 0.0], [246.0, 0.0], [245.0, 0.0], [244.0, 0.0], [243.0, 0.0], [242.0, 0.0], [240.0, 0.0], [255.0, 0.0], [254.0, 0.0], [253.0, 0.0], [252.0, 0.0], [251.0, 0.0], [250.0, 0.0], [249.0, 0.0], [248.0, 0.0], [268.0, 0.0], [271.0, 0.0], [270.0, 0.0], [269.0, 0.0], [265.0, 0.0], [263.0, 0.0], [257.0, 0.0], [256.0, 0.0], [259.0, 0.0], [258.0, 0.0], [262.0, 0.0], [261.0, 0.0], [260.0, 0.0], [286.0, 0.0], [287.0, 0.0], [285.0, 0.0], [284.0, 0.0], [283.0, 0.0], [282.0, 0.0], [281.0, 0.0], [278.0, 0.0], [273.0, 0.0], [272.0, 0.0], [277.0, 0.0], [276.0, 0.0], [302.0, 0.0], [303.0, 0.0], [301.0, 0.0], [300.0, 0.0], [299.0, 0.0], [298.0, 0.0], [297.0, 0.0], [296.0, 0.0], [294.0, 0.0], [288.0, 0.0], [290.0, 0.0], [289.0, 0.0], [293.0, 0.0], [292.0, 0.0], [317.0, 0.0], [318.0, 0.0], [316.0, 0.0], [307.0, 0.0], [306.0, 0.0], [305.0, 0.0], [304.0, 0.0], [315.0, 0.0], [314.0, 0.0], [313.0, 0.0], [312.0, 0.0], [311.0, 0.0], [310.0, 0.0], [309.0, 0.0], [308.0, 0.0], [334.0, 0.0], [335.0, 0.0], [333.0, 0.0], [332.0, 0.0], [331.0, 0.0], [329.0, 0.0], [328.0, 23.666666666666664], [327.0, 0.0], [321.0, 0.0], [320.0, 0.0], [323.0, 0.0], [322.0, 0.0], [326.0, 0.0], [325.0, 0.0], [324.0, 0.0], [330.0, 0.0], [350.0, 0.0], [351.0, 0.0], [349.0, 0.0], [348.0, 0.0], [347.0, 0.0], [346.0, 0.0], [345.0, 0.0], [344.0, 0.0], [343.0, 0.0], [336.0, 0.0], [339.0, 0.0], [338.0, 0.0], [337.0, 0.0], [342.0, 0.0], [341.0, 0.0], [340.0, 0.0], [366.0, 0.0], [367.0, 0.0], [365.0, 0.0], [363.0, 0.0], [364.0, 0.0], [361.0, 0.0], [360.0, 0.0], [362.0, 0.0], [359.0, 0.0], [352.0, 0.0], [353.0, 0.0], [355.0, 22.4], [354.0, 0.0], [358.0, 0.0], [357.0, 33.0], [356.0, 0.0], [383.0, 14.777777777777777], [379.0, 0.0], [378.0, 18.299999999999997], [377.0, 0.0], [382.0, 17.583333333333332], [381.0, 0.0], [375.0, 0.0], [376.0, 0.0], [374.0, 0.0], [372.0, 63.69999999999999], [373.0, 0.0], [371.0, 12.0], [380.0, 0.0], [370.0, 20.666666666666668], [368.0, 15.625], [369.0, 0.0], [386.0, 17.578947368421055], [389.0, 8.333333333333334], [388.0, 0.0], [387.0, 0.0], [397.0, 8.0], [396.0, 12.636363636363637], [385.0, 4.0], [384.0, 3.4545454545454546], [391.0, 11.714285714285714], [390.0, 4.333333333333333], [393.0, 6.0], [394.0, 0.0], [395.0, 0.0], [392.0, 0.0], [399.0, 0.0], [398.0, 0.0], [402.0, 0.0], [405.0, 0.0], [406.0, 0.0], [407.0, 0.0], [404.0, 0.0], [403.0, 0.0], [413.0, 0.0], [412.0, 0.0], [401.0, 0.0], [400.0, 0.0], [415.0, 0.0], [409.0, 0.0], [408.0, 0.0], [411.0, 0.0], [410.0, 0.0], [414.0, 0.0], [430.0, 0.0], [431.0, 0.0], [429.0, 0.0], [428.0, 0.0], [427.0, 0.0], [426.0, 0.0], [425.0, 0.0], [424.0, 0.0], [423.0, 0.0], [417.0, 0.0], [416.0, 0.0], [419.0, 0.0], [418.0, 0.0], [422.0, 0.0], [421.0, 0.0], [420.0, 0.0], [446.0, 0.0], [440.0, 20.666666666666664], [434.0, 35.5], [433.0, 0.0], [432.0, 0.0], [435.0, 0.0], [439.0, 0.0], [438.0, 0.0], [437.0, 0.0], [442.0, 32.66666666666667], [447.0, 0.0], [445.0, 0.0], [444.0, 0.0], [443.0, 0.0], [441.0, 0.0], [462.0, 0.0], [463.0, 0.0], [461.0, 0.0], [460.0, 0.0], [459.0, 0.0], [458.0, 0.0], [457.0, 0.0], [456.0, 0.0], [455.0, 0.0], [449.0, 0.0], [448.0, 0.0], [451.0, 0.0], [450.0, 0.0], [454.0, 0.0], [453.0, 0.0], [477.0, 0.0], [464.0, 25.0], [465.0, 21.0], [466.0, 0.0], [476.0, 0.0], [467.0, 0.0], [468.0, 37.25], [469.0, 0.0], [470.0, 39.2], [471.0, 0.0], [474.0, 40.0], [473.0, 0.0], [472.0, 24.5], [475.0, 34.0], [478.0, 0.0], [493.0, 42.0], [492.0, 42.0], [483.0, 0.0], [482.0, 0.0], [481.0, 0.0], [480.0, 0.0], [491.0, 42.0], [490.0, 42.0], [489.0, 42.0], [488.0, 0.0], [487.0, 0.0], [486.0, 0.0], [485.0, 0.0], [484.0, 0.0], [510.0, 39.0], [508.0, 42.0], [511.0, 42.0], [509.0, 42.0], [506.0, 42.0], [505.0, 40.0], [504.0, 44.0], [503.0, 46.0], [499.0, 40.5], [497.0, 45.0], [502.0, 38.0], [501.0, 37.0], [500.0, 40.0], [512.0, 40.5], [515.0, 44.0], [514.0, 40.0], [513.0, 37.0], [1.0, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[317.2650000000001, 5.543000000000006]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 1.0], [10.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [34.0, 0.0], [37.0, 0.0], [36.0, 0.0], [39.0, 0.0], [38.0, 0.0], [41.0, 0.0], [40.0, 0.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [67.0, 0.0], [66.0, 0.0], [65.0, 0.0], [64.0, 0.0], [71.0, 0.0], [70.0, 0.0], [69.0, 0.0], [68.0, 0.0], [75.0, 0.0], [74.0, 0.0], [73.0, 0.0], [72.0, 0.0], [79.0, 0.0], [78.0, 0.0], [77.0, 0.0], [76.0, 0.0], [83.0, 0.0], [82.0, 0.0], [81.0, 0.0], [80.0, 0.0], [87.0, 0.0], [86.0, 0.0], [85.0, 0.0], [84.0, 0.0], [91.0, 0.0], [90.0, 0.0], [89.0, 0.0], [95.0, 0.0], [93.0, 0.0], [92.0, 0.0], [99.0, 0.0], [98.0, 0.0], [97.0, 0.0], [96.0, 0.0], [103.0, 0.0], [102.0, 0.0], [101.0, 0.0], [100.0, 0.0], [107.0, 0.0], [106.0, 0.0], [105.0, 0.0], [104.0, 0.0], [111.0, 0.0], [110.0, 0.0], [109.0, 0.0], [108.0, 0.0], [115.0, 0.0], [114.0, 0.0], [113.0, 0.0], [112.0, 0.0], [119.0, 0.0], [118.0, 0.0], [117.0, 0.0], [116.0, 0.0], [123.0, 0.0], [122.0, 0.0], [121.0, 0.0], [120.0, 0.0], [127.0, 0.0], [126.0, 0.0], [125.0, 0.0], [124.0, 0.0], [135.0, 0.0], [134.0, 0.0], [133.0, 0.0], [132.0, 0.0], [131.0, 0.0], [130.0, 0.0], [129.0, 0.0], [128.0, 0.0], [143.0, 0.0], [142.0, 0.0], [141.0, 0.0], [140.0, 0.0], [139.0, 0.0], [138.0, 0.0], [137.0, 0.0], [136.0, 0.0], [151.0, 0.0], [150.0, 0.0], [149.0, 0.0], [148.0, 0.0], [147.0, 0.0], [146.0, 0.0], [145.0, 0.0], [144.0, 0.0], [159.0, 0.0], [158.0, 0.0], [157.0, 0.0], [156.0, 0.0], [155.0, 0.0], [154.0, 0.0], [167.0, 0.0], [166.0, 0.0], [165.0, 0.0], [164.0, 0.0], [163.0, 0.0], [162.0, 0.0], [161.0, 0.0], [160.0, 0.0], [175.0, 0.0], [174.0, 0.0], [172.0, 0.0], [171.0, 0.0], [169.0, 0.0], [168.0, 0.0], [183.0, 0.0], [182.0, 0.0], [181.0, 0.0], [180.0, 0.0], [179.0, 0.0], [178.0, 0.0], [177.0, 0.0], [176.0, 0.0], [191.0, 0.0], [190.0, 0.0], [189.0, 0.0], [188.0, 0.0], [187.0, 0.0], [186.0, 0.0], [185.0, 0.0], [184.0, 0.0], [199.0, 0.0], [198.0, 0.0], [197.0, 0.0], [196.0, 0.0], [195.0, 0.0], [194.0, 0.0], [193.0, 0.0], [192.0, 0.0], [207.0, 0.0], [206.0, 0.0], [205.0, 0.0], [204.0, 0.0], [203.0, 0.0], [202.0, 0.0], [201.0, 0.0], [200.0, 0.0], [215.0, 0.0], [214.0, 0.0], [213.0, 0.0], [212.0, 0.0], [211.0, 0.0], [210.0, 0.0], [209.0, 0.0], [208.0, 0.0], [223.0, 0.0], [222.0, 0.0], [221.0, 0.0], [220.0, 0.0], [219.0, 0.0], [218.0, 1.0], [217.0, 0.0], [216.0, 0.0], [231.0, 0.0], [230.0, 0.0], [229.0, 0.0], [228.0, 0.0], [227.0, 0.0], [226.0, 0.0], [225.0, 0.0], [224.0, 0.0], [239.0, 0.0], [238.0, 0.0], [237.0, 0.0], [236.0, 0.0], [235.0, 0.0], [234.0, 0.0], [233.0, 0.0], [232.0, 0.0], [247.0, 0.0], [246.0, 0.0], [245.0, 0.0], [244.0, 0.0], [243.0, 0.0], [242.0, 0.0], [240.0, 0.0], [255.0, 0.0], [254.0, 0.0], [253.0, 0.0], [252.0, 0.0], [251.0, 0.0], [250.0, 0.0], [249.0, 0.0], [248.0, 0.0], [268.0, 0.0], [271.0, 0.0], [270.0, 0.0], [269.0, 0.0], [265.0, 0.0], [263.0, 0.0], [257.0, 0.0], [256.0, 0.0], [259.0, 0.0], [258.0, 0.0], [262.0, 0.0], [261.0, 0.0], [260.0, 0.0], [286.0, 0.0], [287.0, 0.0], [285.0, 0.0], [284.0, 0.0], [283.0, 0.0], [282.0, 0.0], [281.0, 0.0], [278.0, 0.0], [273.0, 0.0], [272.0, 0.0], [277.0, 0.0], [276.0, 0.0], [302.0, 0.0], [303.0, 0.0], [301.0, 0.0], [300.0, 0.0], [299.0, 0.0], [298.0, 0.0], [297.0, 0.0], [296.0, 0.0], [294.0, 0.0], [288.0, 0.0], [290.0, 0.0], [289.0, 0.0], [293.0, 0.0], [292.0, 0.0], [317.0, 0.0], [318.0, 0.0], [316.0, 0.0], [307.0, 0.0], [306.0, 0.0], [305.0, 0.0], [304.0, 0.0], [315.0, 0.0], [314.0, 0.0], [313.0, 0.0], [312.0, 0.0], [311.0, 0.0], [310.0, 0.0], [309.0, 0.0], [308.0, 0.0], [334.0, 0.0], [335.0, 0.0], [333.0, 0.0], [332.0, 0.0], [331.0, 0.0], [329.0, 0.0], [328.0, 0.0], [327.0, 0.0], [321.0, 0.0], [320.0, 0.0], [323.0, 0.0], [322.0, 0.0], [326.0, 0.0], [325.0, 0.0], [324.0, 0.0], [330.0, 0.0], [350.0, 0.0], [351.0, 0.0], [349.0, 0.0], [348.0, 0.0], [347.0, 0.0], [346.0, 0.0], [345.0, 0.0], [344.0, 0.0], [343.0, 0.0], [336.0, 0.0], [339.0, 0.0], [338.0, 0.0], [337.0, 0.0], [342.0, 12.0], [341.0, 0.0], [340.0, 0.0], [366.0, 13.7], [367.0, 7.7272727272727275], [365.0, 10.555555555555557], [363.0, 5.222222222222223], [364.0, 8.222222222222221], [362.0, 0.2], [360.0, 0.0], [361.0, 0.0], [359.0, 0.0], [352.0, 0.0], [353.0, 0.0], [355.0, 0.0], [354.0, 0.0], [358.0, 0.0], [357.0, 0.0], [356.0, 0.0], [383.0, 0.0], [380.0, 8.4], [379.0, 14.499999999999998], [377.0, 3.4615384615384617], [376.0, 18.28571428571429], [381.0, 8.083333333333334], [382.0, 5.0], [378.0, 13.375], [375.0, 0.0], [370.0, 0.0], [369.0, 34.5], [371.0, 0.0], [368.0, 16.2], [374.0, 0.0], [372.0, 0.0], [384.0, 4.944444444444444], [386.0, 0.0], [388.0, 0.0], [387.0, 0.0], [396.0, 0.0], [398.0, 0.0], [399.0, 0.0], [397.0, 0.0], [385.0, 18.782608695652172], [389.0, 6.857142857142858], [392.0, 0.0], [394.0, 17.625], [395.0, 15.374999999999998], [393.0, 34.0], [391.0, 0.0], [390.0, 0.0], [402.0, 0.0], [405.0, 36.0], [406.0, 0.0], [407.0, 0.0], [404.0, 0.0], [403.0, 0.0], [413.0, 0.0], [412.0, 0.0], [401.0, 0.0], [400.0, 0.0], [415.0, 0.0], [409.0, 0.0], [408.0, 0.0], [411.0, 0.0], [410.0, 0.0], [414.0, 0.0], [431.0, 0.0], [420.0, 26.0], [422.0, 0.0], [421.0, 0.0], [427.0, 46.8], [430.0, 0.0], [429.0, 0.0], [428.0, 0.0], [419.0, 0.0], [418.0, 0.0], [417.0, 0.0], [416.0, 0.0], [423.0, 0.0], [426.0, 0.0], [425.0, 0.0], [424.0, 0.0], [446.0, 0.0], [440.0, 45.77777777777778], [434.0, 49.4], [433.0, 0.0], [432.0, 0.0], [435.0, 0.0], [439.0, 0.0], [438.0, 0.0], [437.0, 0.0], [441.0, 27.0], [447.0, 0.0], [445.0, 0.0], [444.0, 0.0], [443.0, 0.0], [442.0, 0.0], [462.0, 0.0], [463.0, 0.0], [461.0, 0.0], [460.0, 0.0], [459.0, 0.0], [458.0, 0.0], [457.0, 0.0], [456.0, 0.0], [455.0, 0.0], [449.0, 0.0], [448.0, 0.0], [451.0, 0.0], [450.0, 0.0], [454.0, 0.0], [453.0, 0.0], [476.0, 0.0], [478.0, 0.0], [466.0, 23.5], [465.0, 0.0], [464.0, 0.0], [467.0, 0.0], [475.0, 34.0], [477.0, 0.0], [474.0, 0.0], [472.0, 0.0], [471.0, 0.0], [470.0, 0.0], [469.0, 0.0], [468.0, 0.0], [483.0, 0.0], [488.0, 0.0], [492.0, 35.0], [491.0, 41.333333333333336], [487.0, 0.0], [486.0, 0.0], [485.0, 0.0], [484.0, 0.0], [482.0, 0.0], [481.0, 0.0], [480.0, 0.0], [511.0, 39.0], [504.0, 39.0], [502.0, 39.0], [501.0, 39.44444444444444], [515.0, 39.833333333333336], [514.0, 40.0], [513.0, 38.0], [1.0, 0.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}, {"data": [[316.3670000000006, 5.213999999999998]], "isOverall": false, "label": "MQTT Pub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 515.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.70385432E12, "maxY": 1114.2666666666667, "series": [{"data": [[1.70385432E12, 1031.3166666666666], [1.70385438E12, 1114.2666666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70385432E12, 104.4], [1.70385438E12, 0.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70385438E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70385432E12, "maxY": 10011.602459016394, "series": [{"data": [[1.70385432E12, 336.21093750000006], [1.70385438E12, 10011.602459016394]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.70385432E12, 10.826171875000007], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.70385432E12, 10.179687499999996], [1.70385438E12, 0.004098360655737706]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70385438E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70385432E12, "maxY": 10.173828125, "series": [{"data": [[1.70385432E12, 0.0], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.70385432E12, 0.0], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.70385432E12, 10.173828125], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70385438E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70385432E12, "maxY": 4.9E-324, "series": [{"data": [[1.70385432E12, 0.0], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.70385432E12, 0.0], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.70385432E12, 0.0], [1.70385438E12, 0.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70385438E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 35.0, "minX": 1.70385432E12, "maxY": 1175.0, "series": [{"data": [[1.70385432E12, 1175.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70385432E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70385432E12, 434.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70385432E12, 1138.9199999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70385432E12, 71.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70385432E12, 942.3999999999987]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70385432E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 41.0, "maxY": 74.0, "series": [{"data": [[41.0, 42.0], [1495.0, 74.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1464.0, 0.0], [1495.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1495.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 41.0, "maxY": 4.9E-324, "series": [{"data": [[41.0, 0.0], [1495.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[1464.0, 0.0], [1495.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1495.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.266666666666666, "minX": 1.70385432E12, "maxY": 33.733333333333334, "series": [{"data": [[1.70385432E12, 33.733333333333334], [1.70385438E12, 16.266666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70385438E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.35, "minX": 1.70385432E12, "maxY": 16.266666666666666, "series": [{"data": [[1.70385432E12, 4.35]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70385432E12, 14.166666666666666], [1.70385438E12, 16.266666666666666]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.70385432E12, 7.083333333333333], [1.70385438E12, 8.133333333333333]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70385438E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.45, "minX": 1.70385432E12, "maxY": 8.133333333333333, "series": [{"data": [[1.70385432E12, 7.083333333333333], [1.70385438E12, 8.133333333333333]], "isOverall": false, "label": "MQTT Connect-failure", "isController": false}, {"data": [[1.70385432E12, 7.083333333333333], [1.70385438E12, 8.133333333333333]], "isOverall": false, "label": "MQTT Pub Sampler-failure", "isController": false}, {"data": [[1.70385432E12, 1.45]], "isOverall": false, "label": "MQTT Pub Sampler-success", "isController": false}, {"data": [[1.70385432E12, 1.45]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.70385432E12, 7.083333333333333], [1.70385438E12, 8.133333333333333]], "isOverall": false, "label": "MQTT DisConnect-failure", "isController": false}, {"data": [[1.70385432E12, 1.45]], "isOverall": false, "label": "MQTT Connect-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70385438E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.35, "minX": 1.70385432E12, "maxY": 24.4, "series": [{"data": [[1.70385432E12, 4.35]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70385432E12, 21.25], [1.70385438E12, 24.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70385438E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

