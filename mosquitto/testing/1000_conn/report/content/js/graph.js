/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 0.0, "minX": 0.0, "maxY": 10216.0, "series": [{"data": [[0.0, 178.0], [0.1, 178.0], [0.2, 182.0], [0.3, 183.0], [0.4, 185.0], [0.5, 185.0], [0.6, 185.0], [0.7, 185.0], [0.8, 187.0], [0.9, 187.0], [1.0, 187.0], [1.1, 188.0], [1.2, 189.0], [1.3, 189.0], [1.4, 189.0], [1.5, 190.0], [1.6, 191.0], [1.7, 191.0], [1.8, 191.0], [1.9, 191.0], [2.0, 192.0], [2.1, 194.0], [2.2, 194.0], [2.3, 194.0], [2.4, 194.0], [2.5, 194.0], [2.6, 194.0], [2.7, 195.0], [2.8, 195.0], [2.9, 195.0], [3.0, 196.0], [3.1, 196.0], [3.2, 196.0], [3.3, 196.0], [3.4, 197.0], [3.5, 197.0], [3.6, 197.0], [3.7, 197.0], [3.8, 198.0], [3.9, 198.0], [4.0, 198.0], [4.1, 198.0], [4.2, 198.0], [4.3, 199.0], [4.4, 199.0], [4.5, 199.0], [4.6, 200.0], [4.7, 200.0], [4.8, 200.0], [4.9, 200.0], [5.0, 201.0], [5.1, 202.0], [5.2, 202.0], [5.3, 202.0], [5.4, 202.0], [5.5, 204.0], [5.6, 204.0], [5.7, 204.0], [5.8, 204.0], [5.9, 205.0], [6.0, 205.0], [6.1, 205.0], [6.2, 205.0], [6.3, 205.0], [6.4, 205.0], [6.5, 205.0], [6.6, 205.0], [6.7, 205.0], [6.8, 206.0], [6.9, 206.0], [7.0, 206.0], [7.1, 206.0], [7.2, 207.0], [7.3, 207.0], [7.4, 207.0], [7.5, 208.0], [7.6, 208.0], [7.7, 208.0], [7.8, 208.0], [7.9, 208.0], [8.0, 209.0], [8.1, 209.0], [8.2, 209.0], [8.3, 209.0], [8.4, 209.0], [8.5, 210.0], [8.6, 210.0], [8.7, 210.0], [8.8, 211.0], [8.9, 211.0], [9.0, 213.0], [9.1, 213.0], [9.2, 213.0], [9.3, 213.0], [9.4, 213.0], [9.5, 213.0], [9.6, 214.0], [9.7, 214.0], [9.8, 215.0], [9.9, 215.0], [10.0, 215.0], [10.1, 215.0], [10.2, 216.0], [10.3, 216.0], [10.4, 216.0], [10.5, 216.0], [10.6, 216.0], [10.7, 216.0], [10.8, 216.0], [10.9, 216.0], [11.0, 216.0], [11.1, 216.0], [11.2, 217.0], [11.3, 217.0], [11.4, 218.0], [11.5, 218.0], [11.6, 218.0], [11.7, 218.0], [11.8, 218.0], [11.9, 219.0], [12.0, 219.0], [12.1, 219.0], [12.2, 220.0], [12.3, 220.0], [12.4, 220.0], [12.5, 221.0], [12.6, 221.0], [12.7, 221.0], [12.8, 221.0], [12.9, 221.0], [13.0, 221.0], [13.1, 221.0], [13.2, 221.0], [13.3, 222.0], [13.4, 222.0], [13.5, 222.0], [13.6, 223.0], [13.7, 223.0], [13.8, 223.0], [13.9, 223.0], [14.0, 223.0], [14.1, 224.0], [14.2, 225.0], [14.3, 225.0], [14.4, 225.0], [14.5, 225.0], [14.6, 226.0], [14.7, 226.0], [14.8, 226.0], [14.9, 227.0], [15.0, 227.0], [15.1, 227.0], [15.2, 228.0], [15.3, 228.0], [15.4, 229.0], [15.5, 229.0], [15.6, 229.0], [15.7, 230.0], [15.8, 230.0], [15.9, 230.0], [16.0, 230.0], [16.1, 231.0], [16.2, 231.0], [16.3, 231.0], [16.4, 231.0], [16.5, 231.0], [16.6, 231.0], [16.7, 231.0], [16.8, 232.0], [16.9, 232.0], [17.0, 232.0], [17.1, 232.0], [17.2, 232.0], [17.3, 232.0], [17.4, 232.0], [17.5, 233.0], [17.6, 233.0], [17.7, 233.0], [17.8, 233.0], [17.9, 234.0], [18.0, 234.0], [18.1, 235.0], [18.2, 235.0], [18.3, 235.0], [18.4, 236.0], [18.5, 236.0], [18.6, 236.0], [18.7, 236.0], [18.8, 236.0], [18.9, 236.0], [19.0, 236.0], [19.1, 236.0], [19.2, 237.0], [19.3, 237.0], [19.4, 237.0], [19.5, 237.0], [19.6, 237.0], [19.7, 238.0], [19.8, 239.0], [19.9, 239.0], [20.0, 239.0], [20.1, 239.0], [20.2, 239.0], [20.3, 239.0], [20.4, 239.0], [20.5, 240.0], [20.6, 240.0], [20.7, 240.0], [20.8, 241.0], [20.9, 241.0], [21.0, 242.0], [21.1, 242.0], [21.2, 242.0], [21.3, 242.0], [21.4, 243.0], [21.5, 243.0], [21.6, 243.0], [21.7, 244.0], [21.8, 244.0], [21.9, 245.0], [22.0, 245.0], [22.1, 245.0], [22.2, 245.0], [22.3, 245.0], [22.4, 246.0], [22.5, 246.0], [22.6, 246.0], [22.7, 246.0], [22.8, 247.0], [22.9, 247.0], [23.0, 247.0], [23.1, 247.0], [23.2, 248.0], [23.3, 248.0], [23.4, 250.0], [23.5, 250.0], [23.6, 250.0], [23.7, 250.0], [23.8, 250.0], [23.9, 251.0], [24.0, 251.0], [24.1, 251.0], [24.2, 251.0], [24.3, 252.0], [24.4, 252.0], [24.5, 252.0], [24.6, 252.0], [24.7, 253.0], [24.8, 254.0], [24.9, 254.0], [25.0, 255.0], [25.1, 255.0], [25.2, 256.0], [25.3, 256.0], [25.4, 256.0], [25.5, 256.0], [25.6, 256.0], [25.7, 256.0], [25.8, 256.0], [25.9, 256.0], [26.0, 256.0], [26.1, 257.0], [26.2, 257.0], [26.3, 257.0], [26.4, 257.0], [26.5, 259.0], [26.6, 260.0], [26.7, 263.0], [26.8, 263.0], [26.9, 263.0], [27.0, 264.0], [27.1, 266.0], [27.2, 266.0], [27.3, 267.0], [27.4, 269.0], [27.5, 275.0], [27.6, 275.0], [27.7, 276.0], [27.8, 277.0], [27.9, 280.0], [28.0, 285.0], [28.1, 285.0], [28.2, 285.0], [28.3, 285.0], [28.4, 286.0], [28.5, 286.0], [28.6, 287.0], [28.7, 288.0], [28.8, 289.0], [28.9, 289.0], [29.0, 291.0], [29.1, 292.0], [29.2, 292.0], [29.3, 294.0], [29.4, 294.0], [29.5, 294.0], [29.6, 296.0], [29.7, 297.0], [29.8, 297.0], [29.9, 298.0], [30.0, 302.0], [30.1, 302.0], [30.2, 302.0], [30.3, 303.0], [30.4, 303.0], [30.5, 305.0], [30.6, 306.0], [30.7, 306.0], [30.8, 307.0], [30.9, 308.0], [31.0, 309.0], [31.1, 309.0], [31.2, 312.0], [31.3, 313.0], [31.4, 315.0], [31.5, 315.0], [31.6, 315.0], [31.7, 315.0], [31.8, 317.0], [31.9, 317.0], [32.0, 317.0], [32.1, 321.0], [32.2, 323.0], [32.3, 324.0], [32.4, 324.0], [32.5, 326.0], [32.6, 326.0], [32.7, 327.0], [32.8, 327.0], [32.9, 327.0], [33.0, 328.0], [33.1, 328.0], [33.2, 328.0], [33.3, 329.0], [33.4, 331.0], [33.5, 333.0], [33.6, 333.0], [33.7, 333.0], [33.8, 339.0], [33.9, 340.0], [34.0, 345.0], [34.1, 345.0], [34.2, 345.0], [34.3, 346.0], [34.4, 348.0], [34.5, 348.0], [34.6, 349.0], [34.7, 349.0], [34.8, 356.0], [34.9, 363.0], [35.0, 363.0], [35.1, 363.0], [35.2, 363.0], [35.3, 370.0], [35.4, 370.0], [35.5, 370.0], [35.6, 371.0], [35.7, 371.0], [35.8, 371.0], [35.9, 375.0], [36.0, 379.0], [36.1, 380.0], [36.2, 380.0], [36.3, 380.0], [36.4, 380.0], [36.5, 381.0], [36.6, 384.0], [36.7, 384.0], [36.8, 385.0], [36.9, 386.0], [37.0, 388.0], [37.1, 388.0], [37.2, 388.0], [37.3, 393.0], [37.4, 396.0], [37.5, 397.0], [37.6, 397.0], [37.7, 400.0], [37.8, 402.0], [37.9, 403.0], [38.0, 403.0], [38.1, 403.0], [38.2, 404.0], [38.3, 406.0], [38.4, 406.0], [38.5, 406.0], [38.6, 407.0], [38.7, 408.0], [38.8, 408.0], [38.9, 409.0], [39.0, 410.0], [39.1, 410.0], [39.2, 410.0], [39.3, 410.0], [39.4, 410.0], [39.5, 411.0], [39.6, 412.0], [39.7, 412.0], [39.8, 412.0], [39.9, 415.0], [40.0, 415.0], [40.1, 415.0], [40.2, 416.0], [40.3, 418.0], [40.4, 419.0], [40.5, 419.0], [40.6, 419.0], [40.7, 420.0], [40.8, 420.0], [40.9, 421.0], [41.0, 421.0], [41.1, 421.0], [41.2, 421.0], [41.3, 422.0], [41.4, 422.0], [41.5, 423.0], [41.6, 424.0], [41.7, 427.0], [41.8, 427.0], [41.9, 427.0], [42.0, 428.0], [42.1, 428.0], [42.2, 429.0], [42.3, 429.0], [42.4, 430.0], [42.5, 430.0], [42.6, 431.0], [42.7, 431.0], [42.8, 431.0], [42.9, 431.0], [43.0, 432.0], [43.1, 433.0], [43.2, 433.0], [43.3, 434.0], [43.4, 435.0], [43.5, 435.0], [43.6, 435.0], [43.7, 436.0], [43.8, 437.0], [43.9, 437.0], [44.0, 437.0], [44.1, 438.0], [44.2, 438.0], [44.3, 439.0], [44.4, 439.0], [44.5, 442.0], [44.6, 445.0], [44.7, 445.0], [44.8, 445.0], [44.9, 445.0], [45.0, 446.0], [45.1, 447.0], [45.2, 448.0], [45.3, 448.0], [45.4, 449.0], [45.5, 451.0], [45.6, 453.0], [45.7, 453.0], [45.8, 454.0], [45.9, 455.0], [46.0, 456.0], [46.1, 457.0], [46.2, 457.0], [46.3, 460.0], [46.4, 460.0], [46.5, 461.0], [46.6, 461.0], [46.7, 463.0], [46.8, 463.0], [46.9, 463.0], [47.0, 463.0], [47.1, 463.0], [47.2, 464.0], [47.3, 464.0], [47.4, 464.0], [47.5, 464.0], [47.6, 464.0], [47.7, 465.0], [47.8, 466.0], [47.9, 466.0], [48.0, 466.0], [48.1, 466.0], [48.2, 466.0], [48.3, 466.0], [48.4, 467.0], [48.5, 467.0], [48.6, 467.0], [48.7, 467.0], [48.8, 467.0], [48.9, 468.0], [49.0, 468.0], [49.1, 468.0], [49.2, 468.0], [49.3, 469.0], [49.4, 469.0], [49.5, 470.0], [49.6, 470.0], [49.7, 471.0], [49.8, 471.0], [49.9, 473.0], [50.0, 473.0], [50.1, 473.0], [50.2, 474.0], [50.3, 474.0], [50.4, 474.0], [50.5, 474.0], [50.6, 474.0], [50.7, 475.0], [50.8, 475.0], [50.9, 475.0], [51.0, 477.0], [51.1, 477.0], [51.2, 478.0], [51.3, 478.0], [51.4, 478.0], [51.5, 479.0], [51.6, 479.0], [51.7, 479.0], [51.8, 479.0], [51.9, 480.0], [52.0, 480.0], [52.1, 481.0], [52.2, 481.0], [52.3, 482.0], [52.4, 483.0], [52.5, 485.0], [52.6, 485.0], [52.7, 488.0], [52.8, 488.0], [52.9, 491.0], [53.0, 492.0], [53.1, 492.0], [53.2, 494.0], [53.3, 494.0], [53.4, 497.0], [53.5, 497.0], [53.6, 502.0], [53.7, 507.0], [53.8, 507.0], [53.9, 507.0], [54.0, 507.0], [54.1, 511.0], [54.2, 511.0], [54.3, 512.0], [54.4, 512.0], [54.5, 512.0], [54.6, 513.0], [54.7, 517.0], [54.8, 517.0], [54.9, 518.0], [55.0, 518.0], [55.1, 519.0], [55.2, 519.0], [55.3, 536.0], [55.4, 538.0], [55.5, 540.0], [55.6, 542.0], [55.7, 542.0], [55.8, 544.0], [55.9, 545.0], [56.0, 550.0], [56.1, 550.0], [56.2, 558.0], [56.3, 560.0], [56.4, 561.0], [56.5, 561.0], [56.6, 569.0], [56.7, 570.0], [56.8, 573.0], [56.9, 573.0], [57.0, 598.0], [57.1, 604.0], [57.2, 607.0], [57.3, 619.0], [57.4, 619.0], [57.5, 622.0], [57.6, 650.0], [57.7, 656.0], [57.8, 656.0], [57.9, 657.0], [58.0, 657.0], [58.1, 676.0], [58.2, 676.0], [58.3, 685.0], [58.4, 698.0], [58.5, 703.0], [58.6, 703.0], [58.7, 703.0], [58.8, 798.0], [58.9, 798.0], [59.0, 801.0], [59.1, 801.0], [59.2, 801.0], [59.3, 801.0], [59.4, 804.0], [59.5, 804.0], [59.6, 811.0], [59.7, 818.0], [59.8, 839.0], [59.9, 849.0], [60.0, 849.0], [60.1, 853.0], [60.2, 861.0], [60.3, 864.0], [60.4, 864.0], [60.5, 875.0], [60.6, 880.0], [60.7, 888.0], [60.8, 888.0], [60.9, 896.0], [61.0, 903.0], [61.1, 922.0], [61.2, 929.0], [61.3, 929.0], [61.4, 930.0], [61.5, 930.0], [61.6, 934.0], [61.7, 934.0], [61.8, 946.0], [61.9, 948.0], [62.0, 958.0], [62.1, 958.0], [62.2, 970.0], [62.3, 982.0], [62.4, 983.0], [62.5, 983.0], [62.6, 985.0], [62.7, 992.0], [62.8, 996.0], [62.9, 1022.0], [63.0, 1022.0], [63.1, 1031.0], [63.2, 1039.0], [63.3, 1040.0], [63.4, 1040.0], [63.5, 1046.0], [63.6, 1055.0], [63.7, 1085.0], [63.8, 1085.0], [63.9, 1092.0], [64.0, 1094.0], [64.1, 1094.0], [64.2, 1095.0], [64.3, 1095.0], [64.4, 1095.0], [64.5, 1096.0], [64.6, 1097.0], [64.7, 1097.0], [64.8, 1097.0], [64.9, 1100.0], [65.0, 1116.0], [65.1, 1116.0], [65.2, 1122.0], [65.3, 1146.0], [65.4, 1230.0], [65.5, 1259.0], [65.6, 1259.0], [65.7, 1324.0], [65.8, 1352.0], [65.9, 1381.0], [66.0, 1381.0], [66.1, 1416.0], [66.2, 1433.0], [66.3, 1500.0], [66.4, 1500.0], [66.5, 1518.0], [66.6, 1519.0], [66.7, 10000.0], [66.8, 10000.0], [66.9, 10000.0], [67.0, 10000.0], [67.1, 10001.0], [67.2, 10001.0], [67.3, 10001.0], [67.4, 10001.0], [67.5, 10001.0], [67.6, 10001.0], [67.7, 10001.0], [67.8, 10001.0], [67.9, 10001.0], [68.0, 10001.0], [68.1, 10001.0], [68.2, 10001.0], [68.3, 10001.0], [68.4, 10001.0], [68.5, 10001.0], [68.6, 10001.0], [68.7, 10001.0], [68.8, 10001.0], [68.9, 10001.0], [69.0, 10001.0], [69.1, 10001.0], [69.2, 10001.0], [69.3, 10001.0], [69.4, 10001.0], [69.5, 10001.0], [69.6, 10002.0], [69.7, 10002.0], [69.8, 10002.0], [69.9, 10002.0], [70.0, 10002.0], [70.1, 10002.0], [70.2, 10002.0], [70.3, 10002.0], [70.4, 10002.0], [70.5, 10002.0], [70.6, 10002.0], [70.7, 10002.0], [70.8, 10002.0], [70.9, 10002.0], [71.0, 10002.0], [71.1, 10002.0], [71.2, 10002.0], [71.3, 10002.0], [71.4, 10002.0], [71.5, 10002.0], [71.6, 10002.0], [71.7, 10002.0], [71.8, 10002.0], [71.9, 10002.0], [72.0, 10002.0], [72.1, 10002.0], [72.2, 10002.0], [72.3, 10002.0], [72.4, 10002.0], [72.5, 10002.0], [72.6, 10002.0], [72.7, 10002.0], [72.8, 10003.0], [72.9, 10003.0], [73.0, 10003.0], [73.1, 10003.0], [73.2, 10003.0], [73.3, 10003.0], [73.4, 10003.0], [73.5, 10003.0], [73.6, 10003.0], [73.7, 10003.0], [73.8, 10003.0], [73.9, 10003.0], [74.0, 10003.0], [74.1, 10003.0], [74.2, 10003.0], [74.3, 10003.0], [74.4, 10003.0], [74.5, 10003.0], [74.6, 10003.0], [74.7, 10003.0], [74.8, 10003.0], [74.9, 10003.0], [75.0, 10003.0], [75.1, 10003.0], [75.2, 10003.0], [75.3, 10003.0], [75.4, 10003.0], [75.5, 10003.0], [75.6, 10003.0], [75.7, 10003.0], [75.8, 10003.0], [75.9, 10003.0], [76.0, 10003.0], [76.1, 10004.0], [76.2, 10004.0], [76.3, 10004.0], [76.4, 10004.0], [76.5, 10004.0], [76.6, 10004.0], [76.7, 10004.0], [76.8, 10004.0], [76.9, 10004.0], [77.0, 10004.0], [77.1, 10004.0], [77.2, 10004.0], [77.3, 10004.0], [77.4, 10004.0], [77.5, 10004.0], [77.6, 10004.0], [77.7, 10004.0], [77.8, 10004.0], [77.9, 10004.0], [78.0, 10004.0], [78.1, 10004.0], [78.2, 10004.0], [78.3, 10004.0], [78.4, 10004.0], [78.5, 10004.0], [78.6, 10004.0], [78.7, 10004.0], [78.8, 10004.0], [78.9, 10004.0], [79.0, 10004.0], [79.1, 10004.0], [79.2, 10005.0], [79.3, 10005.0], [79.4, 10005.0], [79.5, 10005.0], [79.6, 10005.0], [79.7, 10005.0], [79.8, 10005.0], [79.9, 10005.0], [80.0, 10005.0], [80.1, 10005.0], [80.2, 10005.0], [80.3, 10005.0], [80.4, 10005.0], [80.5, 10005.0], [80.6, 10005.0], [80.7, 10005.0], [80.8, 10005.0], [80.9, 10005.0], [81.0, 10005.0], [81.1, 10005.0], [81.2, 10005.0], [81.3, 10005.0], [81.4, 10005.0], [81.5, 10005.0], [81.6, 10005.0], [81.7, 10005.0], [81.8, 10005.0], [81.9, 10005.0], [82.0, 10005.0], [82.1, 10005.0], [82.2, 10005.0], [82.3, 10005.0], [82.4, 10005.0], [82.5, 10005.0], [82.6, 10005.0], [82.7, 10005.0], [82.8, 10005.0], [82.9, 10005.0], [83.0, 10005.0], [83.1, 10005.0], [83.2, 10005.0], [83.3, 10005.0], [83.4, 10005.0], [83.5, 10005.0], [83.6, 10005.0], [83.7, 10005.0], [83.8, 10005.0], [83.9, 10005.0], [84.0, 10005.0], [84.1, 10005.0], [84.2, 10006.0], [84.3, 10006.0], [84.4, 10006.0], [84.5, 10006.0], [84.6, 10006.0], [84.7, 10006.0], [84.8, 10006.0], [84.9, 10006.0], [85.0, 10006.0], [85.1, 10006.0], [85.2, 10006.0], [85.3, 10006.0], [85.4, 10006.0], [85.5, 10006.0], [85.6, 10006.0], [85.7, 10006.0], [85.8, 10006.0], [85.9, 10006.0], [86.0, 10007.0], [86.1, 10007.0], [86.2, 10007.0], [86.3, 10007.0], [86.4, 10007.0], [86.5, 10007.0], [86.6, 10007.0], [86.7, 10007.0], [86.8, 10007.0], [86.9, 10007.0], [87.0, 10007.0], [87.1, 10007.0], [87.2, 10007.0], [87.3, 10007.0], [87.4, 10007.0], [87.5, 10007.0], [87.6, 10007.0], [87.7, 10007.0], [87.8, 10007.0], [87.9, 10007.0], [88.0, 10007.0], [88.1, 10008.0], [88.2, 10008.0], [88.3, 10008.0], [88.4, 10008.0], [88.5, 10008.0], [88.6, 10008.0], [88.7, 10008.0], [88.8, 10008.0], [88.9, 10008.0], [89.0, 10008.0], [89.1, 10008.0], [89.2, 10008.0], [89.3, 10008.0], [89.4, 10008.0], [89.5, 10008.0], [89.6, 10008.0], [89.7, 10008.0], [89.8, 10008.0], [89.9, 10008.0], [90.0, 10009.0], [90.1, 10009.0], [90.2, 10009.0], [90.3, 10009.0], [90.4, 10010.0], [90.5, 10010.0], [90.6, 10010.0], [90.7, 10010.0], [90.8, 10010.0], [90.9, 10010.0], [91.0, 10010.0], [91.1, 10011.0], [91.2, 10011.0], [91.3, 10011.0], [91.4, 10011.0], [91.5, 10012.0], [91.6, 10012.0], [91.7, 10012.0], [91.8, 10013.0], [91.9, 10013.0], [92.0, 10013.0], [92.1, 10013.0], [92.2, 10014.0], [92.3, 10014.0], [92.4, 10014.0], [92.5, 10014.0], [92.6, 10014.0], [92.7, 10014.0], [92.8, 10015.0], [92.9, 10016.0], [93.0, 10016.0], [93.1, 10016.0], [93.2, 10016.0], [93.3, 10016.0], [93.4, 10017.0], [93.5, 10017.0], [93.6, 10017.0], [93.7, 10017.0], [93.8, 10017.0], [93.9, 10017.0], [94.0, 10017.0], [94.1, 10017.0], [94.2, 10018.0], [94.3, 10018.0], [94.4, 10018.0], [94.5, 10018.0], [94.6, 10018.0], [94.7, 10018.0], [94.8, 10018.0], [94.9, 10018.0], [95.0, 10018.0], [95.1, 10019.0], [95.2, 10019.0], [95.3, 10019.0], [95.4, 10019.0], [95.5, 10020.0], [95.6, 10020.0], [95.7, 10020.0], [95.8, 10021.0], [95.9, 10021.0], [96.0, 10021.0], [96.1, 10022.0], [96.2, 10022.0], [96.3, 10022.0], [96.4, 10032.0], [96.5, 10033.0], [96.6, 10033.0], [96.7, 10034.0], [96.8, 10038.0], [96.9, 10039.0], [97.0, 10039.0], [97.1, 10050.0], [97.2, 10055.0], [97.3, 10056.0], [97.4, 10065.0], [97.5, 10065.0], [97.6, 10065.0], [97.7, 10070.0], [97.8, 10073.0], [97.9, 10073.0], [98.0, 10074.0], [98.1, 10076.0], [98.2, 10090.0], [98.3, 10090.0], [98.4, 10091.0], [98.5, 10101.0], [98.6, 10104.0], [98.7, 10130.0], [98.8, 10130.0], [98.9, 10154.0], [99.0, 10162.0], [99.1, 10163.0], [99.2, 10163.0], [99.3, 10181.0], [99.4, 10191.0], [99.5, 10211.0], [99.6, 10211.0], [99.7, 10212.0], [99.8, 10214.0], [99.9, 10216.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 41.0], [33.5, 41.0], [33.6, 42.0], [33.7, 42.0], [33.8, 42.0], [33.9, 42.0], [34.0, 42.0], [34.1, 42.0], [34.2, 42.0], [34.3, 42.0], [34.4, 43.0], [34.5, 43.0], [34.6, 43.0], [34.7, 43.0], [34.8, 43.0], [34.9, 43.0], [35.0, 43.0], [35.1, 43.0], [35.2, 43.0], [35.3, 43.0], [35.4, 43.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 44.0], [36.2, 44.0], [36.3, 44.0], [36.4, 44.0], [36.5, 44.0], [36.6, 44.0], [36.7, 44.0], [36.8, 44.0], [36.9, 44.0], [37.0, 44.0], [37.1, 44.0], [37.2, 44.0], [37.3, 44.0], [37.4, 44.0], [37.5, 44.0], [37.6, 44.0], [37.7, 44.0], [37.8, 45.0], [37.9, 45.0], [38.0, 45.0], [38.1, 45.0], [38.2, 45.0], [38.3, 45.0], [38.4, 45.0], [38.5, 46.0], [38.6, 46.0], [38.7, 46.0], [38.8, 46.0], [38.9, 46.0], [39.0, 47.0], [39.1, 47.0], [39.2, 47.0], [39.3, 47.0], [39.4, 47.0], [39.5, 47.0], [39.6, 47.0], [39.7, 47.0], [39.8, 47.0], [39.9, 47.0], [40.0, 48.0], [40.1, 48.0], [40.2, 48.0], [40.3, 48.0], [40.4, 48.0], [40.5, 48.0], [40.6, 48.0], [40.7, 48.0], [40.8, 48.0], [40.9, 48.0], [41.0, 48.0], [41.1, 48.0], [41.2, 48.0], [41.3, 48.0], [41.4, 48.0], [41.5, 48.0], [41.6, 48.0], [41.7, 48.0], [41.8, 48.0], [41.9, 48.0], [42.0, 48.0], [42.1, 48.0], [42.2, 49.0], [42.3, 49.0], [42.4, 49.0], [42.5, 49.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 50.0], [43.2, 50.0], [43.3, 50.0], [43.4, 50.0], [43.5, 50.0], [43.6, 50.0], [43.7, 50.0], [43.8, 51.0], [43.9, 51.0], [44.0, 51.0], [44.1, 51.0], [44.2, 52.0], [44.3, 52.0], [44.4, 52.0], [44.5, 52.0], [44.6, 52.0], [44.7, 53.0], [44.8, 53.0], [44.9, 53.0], [45.0, 53.0], [45.1, 53.0], [45.2, 53.0], [45.3, 53.0], [45.4, 53.0], [45.5, 53.0], [45.6, 54.0], [45.7, 54.0], [45.8, 54.0], [45.9, 54.0], [46.0, 54.0], [46.1, 54.0], [46.2, 54.0], [46.3, 54.0], [46.4, 54.0], [46.5, 54.0], [46.6, 54.0], [46.7, 54.0], [46.8, 54.0], [46.9, 55.0], [47.0, 55.0], [47.1, 55.0], [47.2, 55.0], [47.3, 55.0], [47.4, 55.0], [47.5, 55.0], [47.6, 55.0], [47.7, 56.0], [47.8, 56.0], [47.9, 56.0], [48.0, 56.0], [48.1, 56.0], [48.2, 56.0], [48.3, 56.0], [48.4, 57.0], [48.5, 57.0], [48.6, 57.0], [48.7, 57.0], [48.8, 57.0], [48.9, 57.0], [49.0, 57.0], [49.1, 57.0], [49.2, 57.0], [49.3, 57.0], [49.4, 58.0], [49.5, 58.0], [49.6, 58.0], [49.7, 58.0], [49.8, 58.0], [49.9, 58.0], [50.0, 58.0], [50.1, 58.0], [50.2, 59.0], [50.3, 59.0], [50.4, 59.0], [50.5, 59.0], [50.6, 59.0], [50.7, 59.0], [50.8, 59.0], [50.9, 59.0], [51.0, 59.0], [51.1, 59.0], [51.2, 59.0], [51.3, 59.0], [51.4, 59.0], [51.5, 60.0], [51.6, 60.0], [51.7, 60.0], [51.8, 60.0], [51.9, 61.0], [52.0, 61.0], [52.1, 61.0], [52.2, 61.0], [52.3, 61.0], [52.4, 61.0], [52.5, 61.0], [52.6, 61.0], [52.7, 62.0], [52.8, 62.0], [52.9, 63.0], [53.0, 63.0], [53.1, 63.0], [53.2, 63.0], [53.3, 63.0], [53.4, 63.0], [53.5, 63.0], [53.6, 63.0], [53.7, 63.0], [53.8, 64.0], [53.9, 64.0], [54.0, 64.0], [54.1, 64.0], [54.2, 64.0], [54.3, 64.0], [54.4, 64.0], [54.5, 64.0], [54.6, 64.0], [54.7, 64.0], [54.8, 64.0], [54.9, 64.0], [55.0, 65.0], [55.1, 65.0], [55.2, 65.0], [55.3, 65.0], [55.4, 65.0], [55.5, 65.0], [55.6, 65.0], [55.7, 65.0], [55.8, 65.0], [55.9, 65.0], [56.0, 66.0], [56.1, 66.0], [56.2, 66.0], [56.3, 66.0], [56.4, 66.0], [56.5, 66.0], [56.6, 66.0], [56.7, 66.0], [56.8, 66.0], [56.9, 66.0], [57.0, 66.0], [57.1, 67.0], [57.2, 67.0], [57.3, 67.0], [57.4, 67.0], [57.5, 67.0], [57.6, 67.0], [57.7, 67.0], [57.8, 67.0], [57.9, 67.0], [58.0, 67.0], [58.1, 67.0], [58.2, 67.0], [58.3, 68.0], [58.4, 68.0], [58.5, 68.0], [58.6, 68.0], [58.7, 68.0], [58.8, 68.0], [58.9, 68.0], [59.0, 68.0], [59.1, 68.0], [59.2, 68.0], [59.3, 68.0], [59.4, 68.0], [59.5, 68.0], [59.6, 68.0], [59.7, 69.0], [59.8, 69.0], [59.9, 69.0], [60.0, 69.0], [60.1, 69.0], [60.2, 69.0], [60.3, 69.0], [60.4, 69.0], [60.5, 70.0], [60.6, 70.0], [60.7, 70.0], [60.8, 70.0], [60.9, 70.0], [61.0, 70.0], [61.1, 70.0], [61.2, 70.0], [61.3, 70.0], [61.4, 70.0], [61.5, 70.0], [61.6, 71.0], [61.7, 71.0], [61.8, 71.0], [61.9, 71.0], [62.0, 71.0], [62.1, 71.0], [62.2, 71.0], [62.3, 71.0], [62.4, 72.0], [62.5, 72.0], [62.6, 72.0], [62.7, 72.0], [62.8, 72.0], [62.9, 73.0], [63.0, 73.0], [63.1, 73.0], [63.2, 73.0], [63.3, 73.0], [63.4, 73.0], [63.5, 73.0], [63.6, 73.0], [63.7, 73.0], [63.8, 73.0], [63.9, 73.0], [64.0, 73.0], [64.1, 73.0], [64.2, 74.0], [64.3, 74.0], [64.4, 74.0], [64.5, 74.0], [64.6, 74.0], [64.7, 74.0], [64.8, 74.0], [64.9, 74.0], [65.0, 74.0], [65.1, 74.0], [65.2, 74.0], [65.3, 74.0], [65.4, 74.0], [65.5, 74.0], [65.6, 74.0], [65.7, 74.0], [65.8, 74.0], [65.9, 74.0], [66.0, 74.0], [66.1, 75.0], [66.2, 75.0], [66.3, 75.0], [66.4, 75.0], [66.5, 75.0], [66.6, 75.0], [66.7, 75.0], [66.8, 75.0], [66.9, 75.0], [67.0, 75.0], [67.1, 75.0], [67.2, 75.0], [67.3, 75.0], [67.4, 75.0], [67.5, 75.0], [67.6, 75.0], [67.7, 75.0], [67.8, 75.0], [67.9, 76.0], [68.0, 76.0], [68.1, 76.0], [68.2, 76.0], [68.3, 76.0], [68.4, 76.0], [68.5, 76.0], [68.6, 76.0], [68.7, 76.0], [68.8, 76.0], [68.9, 76.0], [69.0, 76.0], [69.1, 77.0], [69.2, 77.0], [69.3, 77.0], [69.4, 77.0], [69.5, 77.0], [69.6, 77.0], [69.7, 78.0], [69.8, 78.0], [69.9, 78.0], [70.0, 78.0], [70.1, 78.0], [70.2, 78.0], [70.3, 78.0], [70.4, 79.0], [70.5, 79.0], [70.6, 79.0], [70.7, 79.0], [70.8, 79.0], [70.9, 79.0], [71.0, 79.0], [71.1, 79.0], [71.2, 79.0], [71.3, 79.0], [71.4, 79.0], [71.5, 79.0], [71.6, 79.0], [71.7, 79.0], [71.8, 80.0], [71.9, 80.0], [72.0, 80.0], [72.1, 80.0], [72.2, 80.0], [72.3, 80.0], [72.4, 80.0], [72.5, 80.0], [72.6, 80.0], [72.7, 80.0], [72.8, 80.0], [72.9, 80.0], [73.0, 81.0], [73.1, 81.0], [73.2, 82.0], [73.3, 82.0], [73.4, 82.0], [73.5, 82.0], [73.6, 82.0], [73.7, 82.0], [73.8, 82.0], [73.9, 82.0], [74.0, 82.0], [74.1, 82.0], [74.2, 82.0], [74.3, 83.0], [74.4, 83.0], [74.5, 83.0], [74.6, 83.0], [74.7, 83.0], [74.8, 83.0], [74.9, 84.0], [75.0, 84.0], [75.1, 85.0], [75.2, 85.0], [75.3, 85.0], [75.4, 85.0], [75.5, 85.0], [75.6, 85.0], [75.7, 85.0], [75.8, 85.0], [75.9, 85.0], [76.0, 85.0], [76.1, 85.0], [76.2, 85.0], [76.3, 85.0], [76.4, 86.0], [76.5, 86.0], [76.6, 86.0], [76.7, 86.0], [76.8, 86.0], [76.9, 86.0], [77.0, 86.0], [77.1, 86.0], [77.2, 86.0], [77.3, 86.0], [77.4, 87.0], [77.5, 87.0], [77.6, 87.0], [77.7, 87.0], [77.8, 87.0], [77.9, 87.0], [78.0, 87.0], [78.1, 87.0], [78.2, 87.0], [78.3, 87.0], [78.4, 87.0], [78.5, 87.0], [78.6, 87.0], [78.7, 87.0], [78.8, 87.0], [78.9, 87.0], [79.0, 87.0], [79.1, 87.0], [79.2, 87.0], [79.3, 87.0], [79.4, 87.0], [79.5, 88.0], [79.6, 88.0], [79.7, 88.0], [79.8, 88.0], [79.9, 88.0], [80.0, 88.0], [80.1, 88.0], [80.2, 88.0], [80.3, 88.0], [80.4, 88.0], [80.5, 88.0], [80.6, 88.0], [80.7, 88.0], [80.8, 88.0], [80.9, 88.0], [81.0, 88.0], [81.1, 88.0], [81.2, 88.0], [81.3, 88.0], [81.4, 88.0], [81.5, 88.0], [81.6, 88.0], [81.7, 88.0], [81.8, 89.0], [81.9, 89.0], [82.0, 89.0], [82.1, 89.0], [82.2, 89.0], [82.3, 89.0], [82.4, 89.0], [82.5, 89.0], [82.6, 90.0], [82.7, 90.0], [82.8, 90.0], [82.9, 90.0], [83.0, 90.0], [83.1, 90.0], [83.2, 90.0], [83.3, 90.0], [83.4, 90.0], [83.5, 90.0], [83.6, 90.0], [83.7, 90.0], [83.8, 91.0], [83.9, 91.0], [84.0, 91.0], [84.1, 91.0], [84.2, 91.0], [84.3, 91.0], [84.4, 91.0], [84.5, 91.0], [84.6, 91.0], [84.7, 91.0], [84.8, 91.0], [84.9, 91.0], [85.0, 91.0], [85.1, 91.0], [85.2, 91.0], [85.3, 91.0], [85.4, 91.0], [85.5, 91.0], [85.6, 92.0], [85.7, 92.0], [85.8, 92.0], [85.9, 92.0], [86.0, 92.0], [86.1, 92.0], [86.2, 92.0], [86.3, 92.0], [86.4, 92.0], [86.5, 92.0], [86.6, 92.0], [86.7, 92.0], [86.8, 92.0], [86.9, 92.0], [87.0, 92.0], [87.1, 92.0], [87.2, 93.0], [87.3, 93.0], [87.4, 93.0], [87.5, 93.0], [87.6, 93.0], [87.7, 93.0], [87.8, 93.0], [87.9, 93.0], [88.0, 93.0], [88.1, 93.0], [88.2, 93.0], [88.3, 93.0], [88.4, 93.0], [88.5, 93.0], [88.6, 93.0], [88.7, 94.0], [88.8, 94.0], [88.9, 94.0], [89.0, 94.0], [89.1, 94.0], [89.2, 94.0], [89.3, 94.0], [89.4, 94.0], [89.5, 95.0], [89.6, 95.0], [89.7, 95.0], [89.8, 95.0], [89.9, 95.0], [90.0, 95.0], [90.1, 95.0], [90.2, 96.0], [90.3, 96.0], [90.4, 97.0], [90.5, 97.0], [90.6, 97.0], [90.7, 97.0], [90.8, 97.0], [90.9, 98.0], [91.0, 98.0], [91.1, 98.0], [91.2, 98.0], [91.3, 98.0], [91.4, 98.0], [91.5, 98.0], [91.6, 98.0], [91.7, 99.0], [91.8, 99.0], [91.9, 99.0], [92.0, 99.0], [92.1, 99.0], [92.2, 99.0], [92.3, 99.0], [92.4, 100.0], [92.5, 100.0], [92.6, 100.0], [92.7, 100.0], [92.8, 101.0], [92.9, 101.0], [93.0, 102.0], [93.1, 102.0], [93.2, 102.0], [93.3, 103.0], [93.4, 103.0], [93.5, 104.0], [93.6, 104.0], [93.7, 105.0], [93.8, 105.0], [93.9, 106.0], [94.0, 106.0], [94.1, 107.0], [94.2, 107.0], [94.3, 108.0], [94.4, 108.0], [94.5, 108.0], [94.6, 108.0], [94.7, 108.0], [94.8, 110.0], [94.9, 110.0], [95.0, 111.0], [95.1, 112.0], [95.2, 113.0], [95.3, 113.0], [95.4, 113.0], [95.5, 113.0], [95.6, 120.0], [95.7, 120.0], [95.8, 120.0], [95.9, 322.0], [96.0, 331.0], [96.1, 331.0], [96.2, 331.0], [96.3, 333.0], [96.4, 352.0], [96.5, 360.0], [96.6, 360.0], [96.7, 367.0], [96.8, 371.0], [96.9, 372.0], [97.0, 372.0], [97.1, 375.0], [97.2, 377.0], [97.3, 380.0], [97.4, 384.0], [97.5, 384.0], [97.6, 388.0], [97.7, 389.0], [97.8, 392.0], [97.9, 392.0], [98.0, 392.0], [98.1, 392.0], [98.2, 392.0], [98.3, 392.0], [98.4, 394.0], [98.5, 394.0], [98.6, 394.0], [98.7, 397.0], [98.8, 397.0], [98.9, 399.0], [99.0, 399.0], [99.1, 399.0], [99.2, 399.0], [99.3, 399.0], [99.4, 399.0], [99.5, 402.0], [99.6, 402.0], [99.7, 411.0], [99.8, 413.0], [99.9, 422.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 0.0], [0.1, 0.0], [0.2, 0.0], [0.3, 0.0], [0.4, 0.0], [0.5, 0.0], [0.6, 0.0], [0.7, 0.0], [0.8, 0.0], [0.9, 0.0], [1.0, 0.0], [1.1, 0.0], [1.2, 0.0], [1.3, 0.0], [1.4, 0.0], [1.5, 0.0], [1.6, 0.0], [1.7, 0.0], [1.8, 0.0], [1.9, 0.0], [2.0, 0.0], [2.1, 0.0], [2.2, 0.0], [2.3, 0.0], [2.4, 0.0], [2.5, 0.0], [2.6, 0.0], [2.7, 0.0], [2.8, 0.0], [2.9, 0.0], [3.0, 0.0], [3.1, 0.0], [3.2, 0.0], [3.3, 0.0], [3.4, 0.0], [3.5, 0.0], [3.6, 0.0], [3.7, 0.0], [3.8, 0.0], [3.9, 0.0], [4.0, 0.0], [4.1, 0.0], [4.2, 0.0], [4.3, 0.0], [4.4, 0.0], [4.5, 0.0], [4.6, 0.0], [4.7, 0.0], [4.8, 0.0], [4.9, 0.0], [5.0, 0.0], [5.1, 0.0], [5.2, 0.0], [5.3, 0.0], [5.4, 0.0], [5.5, 0.0], [5.6, 0.0], [5.7, 0.0], [5.8, 0.0], [5.9, 0.0], [6.0, 0.0], [6.1, 0.0], [6.2, 0.0], [6.3, 0.0], [6.4, 0.0], [6.5, 0.0], [6.6, 0.0], [6.7, 0.0], [6.8, 0.0], [6.9, 0.0], [7.0, 0.0], [7.1, 0.0], [7.2, 0.0], [7.3, 0.0], [7.4, 0.0], [7.5, 0.0], [7.6, 0.0], [7.7, 0.0], [7.8, 0.0], [7.9, 0.0], [8.0, 0.0], [8.1, 0.0], [8.2, 0.0], [8.3, 0.0], [8.4, 0.0], [8.5, 0.0], [8.6, 0.0], [8.7, 0.0], [8.8, 0.0], [8.9, 0.0], [9.0, 0.0], [9.1, 0.0], [9.2, 0.0], [9.3, 0.0], [9.4, 0.0], [9.5, 0.0], [9.6, 0.0], [9.7, 0.0], [9.8, 0.0], [9.9, 0.0], [10.0, 0.0], [10.1, 0.0], [10.2, 0.0], [10.3, 0.0], [10.4, 0.0], [10.5, 0.0], [10.6, 0.0], [10.7, 0.0], [10.8, 0.0], [10.9, 0.0], [11.0, 0.0], [11.1, 0.0], [11.2, 0.0], [11.3, 0.0], [11.4, 0.0], [11.5, 0.0], [11.6, 0.0], [11.7, 0.0], [11.8, 0.0], [11.9, 0.0], [12.0, 0.0], [12.1, 0.0], [12.2, 0.0], [12.3, 0.0], [12.4, 0.0], [12.5, 0.0], [12.6, 0.0], [12.7, 0.0], [12.8, 0.0], [12.9, 0.0], [13.0, 0.0], [13.1, 0.0], [13.2, 0.0], [13.3, 0.0], [13.4, 0.0], [13.5, 0.0], [13.6, 0.0], [13.7, 0.0], [13.8, 0.0], [13.9, 0.0], [14.0, 0.0], [14.1, 0.0], [14.2, 0.0], [14.3, 0.0], [14.4, 0.0], [14.5, 0.0], [14.6, 0.0], [14.7, 0.0], [14.8, 0.0], [14.9, 0.0], [15.0, 0.0], [15.1, 0.0], [15.2, 0.0], [15.3, 0.0], [15.4, 0.0], [15.5, 0.0], [15.6, 0.0], [15.7, 0.0], [15.8, 0.0], [15.9, 0.0], [16.0, 0.0], [16.1, 0.0], [16.2, 0.0], [16.3, 0.0], [16.4, 0.0], [16.5, 0.0], [16.6, 0.0], [16.7, 0.0], [16.8, 0.0], [16.9, 0.0], [17.0, 0.0], [17.1, 0.0], [17.2, 0.0], [17.3, 0.0], [17.4, 0.0], [17.5, 0.0], [17.6, 0.0], [17.7, 0.0], [17.8, 0.0], [17.9, 0.0], [18.0, 0.0], [18.1, 0.0], [18.2, 0.0], [18.3, 0.0], [18.4, 0.0], [18.5, 0.0], [18.6, 0.0], [18.7, 0.0], [18.8, 0.0], [18.9, 0.0], [19.0, 0.0], [19.1, 0.0], [19.2, 0.0], [19.3, 0.0], [19.4, 0.0], [19.5, 0.0], [19.6, 0.0], [19.7, 0.0], [19.8, 0.0], [19.9, 0.0], [20.0, 0.0], [20.1, 0.0], [20.2, 0.0], [20.3, 0.0], [20.4, 0.0], [20.5, 0.0], [20.6, 0.0], [20.7, 0.0], [20.8, 0.0], [20.9, 0.0], [21.0, 0.0], [21.1, 0.0], [21.2, 0.0], [21.3, 0.0], [21.4, 0.0], [21.5, 0.0], [21.6, 0.0], [21.7, 0.0], [21.8, 0.0], [21.9, 0.0], [22.0, 0.0], [22.1, 0.0], [22.2, 0.0], [22.3, 0.0], [22.4, 0.0], [22.5, 0.0], [22.6, 0.0], [22.7, 0.0], [22.8, 0.0], [22.9, 0.0], [23.0, 0.0], [23.1, 0.0], [23.2, 0.0], [23.3, 0.0], [23.4, 0.0], [23.5, 0.0], [23.6, 0.0], [23.7, 0.0], [23.8, 0.0], [23.9, 0.0], [24.0, 0.0], [24.1, 0.0], [24.2, 0.0], [24.3, 0.0], [24.4, 0.0], [24.5, 0.0], [24.6, 0.0], [24.7, 0.0], [24.8, 0.0], [24.9, 0.0], [25.0, 0.0], [25.1, 0.0], [25.2, 0.0], [25.3, 0.0], [25.4, 0.0], [25.5, 0.0], [25.6, 0.0], [25.7, 0.0], [25.8, 0.0], [25.9, 0.0], [26.0, 0.0], [26.1, 0.0], [26.2, 0.0], [26.3, 0.0], [26.4, 0.0], [26.5, 0.0], [26.6, 0.0], [26.7, 0.0], [26.8, 0.0], [26.9, 0.0], [27.0, 0.0], [27.1, 0.0], [27.2, 0.0], [27.3, 0.0], [27.4, 0.0], [27.5, 0.0], [27.6, 0.0], [27.7, 0.0], [27.8, 0.0], [27.9, 0.0], [28.0, 0.0], [28.1, 0.0], [28.2, 0.0], [28.3, 0.0], [28.4, 0.0], [28.5, 0.0], [28.6, 0.0], [28.7, 0.0], [28.8, 0.0], [28.9, 0.0], [29.0, 0.0], [29.1, 0.0], [29.2, 0.0], [29.3, 0.0], [29.4, 0.0], [29.5, 0.0], [29.6, 0.0], [29.7, 0.0], [29.8, 0.0], [29.9, 0.0], [30.0, 0.0], [30.1, 0.0], [30.2, 0.0], [30.3, 0.0], [30.4, 0.0], [30.5, 0.0], [30.6, 0.0], [30.7, 0.0], [30.8, 0.0], [30.9, 0.0], [31.0, 0.0], [31.1, 0.0], [31.2, 0.0], [31.3, 0.0], [31.4, 0.0], [31.5, 0.0], [31.6, 0.0], [31.7, 0.0], [31.8, 0.0], [31.9, 0.0], [32.0, 0.0], [32.1, 0.0], [32.2, 0.0], [32.3, 0.0], [32.4, 0.0], [32.5, 0.0], [32.6, 0.0], [32.7, 0.0], [32.8, 0.0], [32.9, 0.0], [33.0, 0.0], [33.1, 0.0], [33.2, 0.0], [33.3, 0.0], [33.4, 39.0], [33.5, 40.0], [33.6, 41.0], [33.7, 41.0], [33.8, 41.0], [33.9, 42.0], [34.0, 42.0], [34.1, 42.0], [34.2, 42.0], [34.3, 42.0], [34.4, 42.0], [34.5, 42.0], [34.6, 42.0], [34.7, 42.0], [34.8, 42.0], [34.9, 43.0], [35.0, 43.0], [35.1, 43.0], [35.2, 43.0], [35.3, 43.0], [35.4, 43.0], [35.5, 43.0], [35.6, 43.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 44.0], [36.2, 44.0], [36.3, 44.0], [36.4, 44.0], [36.5, 44.0], [36.6, 45.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 45.0], [37.3, 45.0], [37.4, 45.0], [37.5, 45.0], [37.6, 45.0], [37.7, 46.0], [37.8, 46.0], [37.9, 46.0], [38.0, 46.0], [38.1, 46.0], [38.2, 46.0], [38.3, 46.0], [38.4, 46.0], [38.5, 46.0], [38.6, 47.0], [38.7, 47.0], [38.8, 47.0], [38.9, 47.0], [39.0, 47.0], [39.1, 48.0], [39.2, 48.0], [39.3, 48.0], [39.4, 48.0], [39.5, 48.0], [39.6, 48.0], [39.7, 48.0], [39.8, 48.0], [39.9, 48.0], [40.0, 48.0], [40.1, 48.0], [40.2, 48.0], [40.3, 48.0], [40.4, 48.0], [40.5, 48.0], [40.6, 48.0], [40.7, 48.0], [40.8, 48.0], [40.9, 48.0], [41.0, 48.0], [41.1, 48.0], [41.2, 49.0], [41.3, 49.0], [41.4, 49.0], [41.5, 49.0], [41.6, 49.0], [41.7, 49.0], [41.8, 49.0], [41.9, 49.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 51.0], [43.2, 51.0], [43.3, 51.0], [43.4, 51.0], [43.5, 51.0], [43.6, 51.0], [43.7, 51.0], [43.8, 51.0], [43.9, 52.0], [44.0, 52.0], [44.1, 52.0], [44.2, 53.0], [44.3, 53.0], [44.4, 53.0], [44.5, 54.0], [44.6, 54.0], [44.7, 55.0], [44.8, 55.0], [44.9, 55.0], [45.0, 55.0], [45.1, 55.0], [45.2, 55.0], [45.3, 55.0], [45.4, 55.0], [45.5, 55.0], [45.6, 56.0], [45.7, 56.0], [45.8, 56.0], [45.9, 56.0], [46.0, 56.0], [46.1, 56.0], [46.2, 56.0], [46.3, 56.0], [46.4, 57.0], [46.5, 57.0], [46.6, 57.0], [46.7, 57.0], [46.8, 57.0], [46.9, 57.0], [47.0, 57.0], [47.1, 57.0], [47.2, 57.0], [47.3, 57.0], [47.4, 58.0], [47.5, 58.0], [47.6, 58.0], [47.7, 58.0], [47.8, 58.0], [47.9, 58.0], [48.0, 58.0], [48.1, 58.0], [48.2, 58.0], [48.3, 58.0], [48.4, 58.0], [48.5, 58.0], [48.6, 59.0], [48.7, 59.0], [48.8, 59.0], [48.9, 59.0], [49.0, 59.0], [49.1, 59.0], [49.2, 59.0], [49.3, 59.0], [49.4, 60.0], [49.5, 60.0], [49.6, 60.0], [49.7, 60.0], [49.8, 60.0], [49.9, 60.0], [50.0, 60.0], [50.1, 60.0], [50.2, 60.0], [50.3, 60.0], [50.4, 60.0], [50.5, 60.0], [50.6, 61.0], [50.7, 61.0], [50.8, 61.0], [50.9, 61.0], [51.0, 61.0], [51.1, 61.0], [51.2, 61.0], [51.3, 61.0], [51.4, 61.0], [51.5, 61.0], [51.6, 61.0], [51.7, 61.0], [51.8, 61.0], [51.9, 61.0], [52.0, 62.0], [52.1, 62.0], [52.2, 62.0], [52.3, 62.0], [52.4, 62.0], [52.5, 62.0], [52.6, 62.0], [52.7, 63.0], [52.8, 63.0], [52.9, 63.0], [53.0, 64.0], [53.1, 64.0], [53.2, 64.0], [53.3, 64.0], [53.4, 64.0], [53.5, 64.0], [53.6, 64.0], [53.7, 64.0], [53.8, 64.0], [53.9, 64.0], [54.0, 64.0], [54.1, 64.0], [54.2, 65.0], [54.3, 65.0], [54.4, 65.0], [54.5, 65.0], [54.6, 65.0], [54.7, 65.0], [54.8, 65.0], [54.9, 65.0], [55.0, 66.0], [55.1, 66.0], [55.2, 66.0], [55.3, 66.0], [55.4, 66.0], [55.5, 66.0], [55.6, 66.0], [55.7, 66.0], [55.8, 66.0], [55.9, 66.0], [56.0, 66.0], [56.1, 66.0], [56.2, 66.0], [56.3, 66.0], [56.4, 66.0], [56.5, 66.0], [56.6, 66.0], [56.7, 66.0], [56.8, 67.0], [56.9, 67.0], [57.0, 67.0], [57.1, 67.0], [57.2, 67.0], [57.3, 67.0], [57.4, 67.0], [57.5, 67.0], [57.6, 67.0], [57.7, 67.0], [57.8, 67.0], [57.9, 67.0], [58.0, 68.0], [58.1, 68.0], [58.2, 68.0], [58.3, 68.0], [58.4, 68.0], [58.5, 69.0], [58.6, 69.0], [58.7, 69.0], [58.8, 69.0], [58.9, 69.0], [59.0, 69.0], [59.1, 69.0], [59.2, 69.0], [59.3, 69.0], [59.4, 69.0], [59.5, 69.0], [59.6, 69.0], [59.7, 70.0], [59.8, 70.0], [59.9, 70.0], [60.0, 70.0], [60.1, 70.0], [60.2, 70.0], [60.3, 70.0], [60.4, 70.0], [60.5, 70.0], [60.6, 71.0], [60.7, 71.0], [60.8, 71.0], [60.9, 71.0], [61.0, 71.0], [61.1, 71.0], [61.2, 71.0], [61.3, 71.0], [61.4, 71.0], [61.5, 71.0], [61.6, 71.0], [61.7, 71.0], [61.8, 72.0], [61.9, 72.0], [62.0, 72.0], [62.1, 72.0], [62.2, 72.0], [62.3, 72.0], [62.4, 72.0], [62.5, 72.0], [62.6, 72.0], [62.7, 72.0], [62.8, 73.0], [62.9, 73.0], [63.0, 73.0], [63.1, 73.0], [63.2, 73.0], [63.3, 73.0], [63.4, 73.0], [63.5, 74.0], [63.6, 74.0], [63.7, 74.0], [63.8, 74.0], [63.9, 74.0], [64.0, 74.0], [64.1, 75.0], [64.2, 75.0], [64.3, 75.0], [64.4, 75.0], [64.5, 75.0], [64.6, 75.0], [64.7, 75.0], [64.8, 75.0], [64.9, 75.0], [65.0, 75.0], [65.1, 75.0], [65.2, 75.0], [65.3, 75.0], [65.4, 76.0], [65.5, 76.0], [65.6, 76.0], [65.7, 76.0], [65.8, 76.0], [65.9, 76.0], [66.0, 76.0], [66.1, 76.0], [66.2, 76.0], [66.3, 77.0], [66.4, 77.0], [66.5, 77.0], [66.6, 77.0], [66.7, 77.0], [66.8, 77.0], [66.9, 77.0], [67.0, 77.0], [67.1, 77.0], [67.2, 77.0], [67.3, 77.0], [67.4, 77.0], [67.5, 77.0], [67.6, 78.0], [67.7, 78.0], [67.8, 78.0], [67.9, 78.0], [68.0, 79.0], [68.1, 79.0], [68.2, 79.0], [68.3, 79.0], [68.4, 79.0], [68.5, 79.0], [68.6, 79.0], [68.7, 79.0], [68.8, 80.0], [68.9, 80.0], [69.0, 80.0], [69.1, 80.0], [69.2, 81.0], [69.3, 81.0], [69.4, 81.0], [69.5, 81.0], [69.6, 81.0], [69.7, 81.0], [69.8, 81.0], [69.9, 81.0], [70.0, 81.0], [70.1, 81.0], [70.2, 81.0], [70.3, 81.0], [70.4, 82.0], [70.5, 82.0], [70.6, 82.0], [70.7, 82.0], [70.8, 82.0], [70.9, 82.0], [71.0, 82.0], [71.1, 82.0], [71.2, 82.0], [71.3, 82.0], [71.4, 82.0], [71.5, 82.0], [71.6, 82.0], [71.7, 82.0], [71.8, 83.0], [71.9, 83.0], [72.0, 83.0], [72.1, 83.0], [72.2, 83.0], [72.3, 83.0], [72.4, 83.0], [72.5, 83.0], [72.6, 83.0], [72.7, 83.0], [72.8, 83.0], [72.9, 83.0], [73.0, 83.0], [73.1, 83.0], [73.2, 83.0], [73.3, 83.0], [73.4, 83.0], [73.5, 83.0], [73.6, 84.0], [73.7, 84.0], [73.8, 84.0], [73.9, 84.0], [74.0, 84.0], [74.1, 84.0], [74.2, 84.0], [74.3, 84.0], [74.4, 85.0], [74.5, 85.0], [74.6, 85.0], [74.7, 85.0], [74.8, 85.0], [74.9, 85.0], [75.0, 85.0], [75.1, 85.0], [75.2, 85.0], [75.3, 85.0], [75.4, 86.0], [75.5, 86.0], [75.6, 86.0], [75.7, 86.0], [75.8, 86.0], [75.9, 86.0], [76.0, 86.0], [76.1, 86.0], [76.2, 86.0], [76.3, 86.0], [76.4, 86.0], [76.5, 86.0], [76.6, 86.0], [76.7, 86.0], [76.8, 86.0], [76.9, 87.0], [77.0, 88.0], [77.1, 88.0], [77.2, 88.0], [77.3, 88.0], [77.4, 88.0], [77.5, 88.0], [77.6, 88.0], [77.7, 88.0], [77.8, 88.0], [77.9, 88.0], [78.0, 88.0], [78.1, 88.0], [78.2, 88.0], [78.3, 88.0], [78.4, 88.0], [78.5, 88.0], [78.6, 89.0], [78.7, 89.0], [78.8, 89.0], [78.9, 89.0], [79.0, 89.0], [79.1, 89.0], [79.2, 89.0], [79.3, 89.0], [79.4, 89.0], [79.5, 89.0], [79.6, 89.0], [79.7, 89.0], [79.8, 89.0], [79.9, 89.0], [80.0, 90.0], [80.1, 90.0], [80.2, 90.0], [80.3, 90.0], [80.4, 90.0], [80.5, 90.0], [80.6, 90.0], [80.7, 90.0], [80.8, 90.0], [80.9, 90.0], [81.0, 91.0], [81.1, 91.0], [81.2, 91.0], [81.3, 91.0], [81.4, 91.0], [81.5, 91.0], [81.6, 91.0], [81.7, 91.0], [81.8, 92.0], [81.9, 92.0], [82.0, 92.0], [82.1, 92.0], [82.2, 92.0], [82.3, 92.0], [82.4, 92.0], [82.5, 92.0], [82.6, 93.0], [82.7, 93.0], [82.8, 93.0], [82.9, 93.0], [83.0, 93.0], [83.1, 94.0], [83.2, 94.0], [83.3, 94.0], [83.4, 94.0], [83.5, 95.0], [83.6, 95.0], [83.7, 95.0], [83.8, 95.0], [83.9, 95.0], [84.0, 95.0], [84.1, 95.0], [84.2, 95.0], [84.3, 95.0], [84.4, 96.0], [84.5, 96.0], [84.6, 96.0], [84.7, 96.0], [84.8, 96.0], [84.9, 97.0], [85.0, 97.0], [85.1, 97.0], [85.2, 97.0], [85.3, 97.0], [85.4, 97.0], [85.5, 97.0], [85.6, 97.0], [85.7, 97.0], [85.8, 97.0], [85.9, 98.0], [86.0, 98.0], [86.1, 99.0], [86.2, 99.0], [86.3, 99.0], [86.4, 99.0], [86.5, 99.0], [86.6, 99.0], [86.7, 99.0], [86.8, 99.0], [86.9, 99.0], [87.0, 100.0], [87.1, 100.0], [87.2, 100.0], [87.3, 100.0], [87.4, 100.0], [87.5, 101.0], [87.6, 101.0], [87.7, 101.0], [87.8, 101.0], [87.9, 101.0], [88.0, 101.0], [88.1, 102.0], [88.2, 102.0], [88.3, 102.0], [88.4, 102.0], [88.5, 102.0], [88.6, 103.0], [88.7, 103.0], [88.8, 103.0], [88.9, 103.0], [89.0, 103.0], [89.1, 103.0], [89.2, 103.0], [89.3, 103.0], [89.4, 103.0], [89.5, 103.0], [89.6, 103.0], [89.7, 103.0], [89.8, 103.0], [89.9, 104.0], [90.0, 104.0], [90.1, 104.0], [90.2, 104.0], [90.3, 104.0], [90.4, 104.0], [90.5, 105.0], [90.6, 105.0], [90.7, 105.0], [90.8, 106.0], [90.9, 106.0], [91.0, 106.0], [91.1, 107.0], [91.2, 107.0], [91.3, 108.0], [91.4, 108.0], [91.5, 108.0], [91.6, 109.0], [91.7, 109.0], [91.8, 111.0], [91.9, 111.0], [92.0, 111.0], [92.1, 111.0], [92.2, 111.0], [92.3, 111.0], [92.4, 111.0], [92.5, 112.0], [92.6, 112.0], [92.7, 112.0], [92.8, 113.0], [92.9, 113.0], [93.0, 113.0], [93.1, 113.0], [93.2, 113.0], [93.3, 113.0], [93.4, 114.0], [93.5, 114.0], [93.6, 114.0], [93.7, 114.0], [93.8, 115.0], [93.9, 116.0], [94.0, 116.0], [94.1, 116.0], [94.2, 116.0], [94.3, 116.0], [94.4, 116.0], [94.5, 117.0], [94.6, 117.0], [94.7, 117.0], [94.8, 118.0], [94.9, 118.0], [95.0, 118.0], [95.1, 119.0], [95.2, 120.0], [95.3, 120.0], [95.4, 120.0], [95.5, 121.0], [95.6, 123.0], [95.7, 123.0], [95.8, 127.0], [95.9, 130.0], [96.0, 133.0], [96.1, 136.0], [96.2, 136.0], [96.3, 301.0], [96.4, 318.0], [96.5, 325.0], [96.6, 325.0], [96.7, 326.0], [96.8, 332.0], [96.9, 336.0], [97.0, 336.0], [97.1, 341.0], [97.2, 342.0], [97.3, 345.0], [97.4, 346.0], [97.5, 346.0], [97.6, 346.0], [97.7, 346.0], [97.8, 348.0], [97.9, 348.0], [98.0, 349.0], [98.1, 352.0], [98.2, 356.0], [98.3, 356.0], [98.4, 358.0], [98.5, 358.0], [98.6, 364.0], [98.7, 382.0], [98.8, 382.0], [98.9, 383.0], [99.0, 401.0], [99.1, 417.0], [99.2, 417.0], [99.3, 727.0], [99.4, 764.0], [99.5, 767.0], [99.6, 767.0], [99.7, 806.0], [99.8, 859.0], [99.9, 1010.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 709.0, "series": [{"data": [[600.0, 11.0], [10000.0, 244.0], [10100.0, 8.0], [10200.0, 4.0], [700.0, 4.0], [200.0, 195.0], [800.0, 15.0], [900.0, 15.0], [1000.0, 15.0], [1100.0, 4.0], [300.0, 59.0], [1200.0, 2.0], [1300.0, 3.0], [1400.0, 2.0], [1500.0, 3.0], [100.0, 35.0], [400.0, 122.0], [500.0, 27.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[0.0, 709.0], [300.0, 28.0], [100.0, 27.0], [400.0, 4.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 668.0], [300.0, 21.0], [700.0, 3.0], [100.0, 71.0], [400.0, 2.0], [800.0, 2.0], [1000.0, 1.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1429.0, "series": [{"data": [[0.0, 1429.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 105.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 2.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 768.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 369.254340277777, "minX": 1.70395104E12, "maxY": 369.254340277777, "series": [{"data": [[1.70395104E12, 369.254340277777]], "isOverall": false, "label": "Pub Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70395104E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 10214.0, "series": [{"data": [[2.0, 10002.0], [3.0, 10003.0], [4.0, 10005.0], [5.0, 10000.0], [6.0, 10000.0], [7.0, 10001.0], [8.0, 10003.0], [9.0, 10002.0], [11.0, 10001.0], [12.0, 10004.0], [13.0, 10007.0], [14.0, 10007.0], [15.0, 10002.0], [16.0, 10013.0], [17.0, 10002.0], [18.0, 10007.0], [19.0, 10011.0], [20.0, 10008.0], [21.0, 10010.0], [22.0, 10004.0], [23.0, 10005.0], [24.0, 10006.0], [25.0, 10005.0], [26.0, 10004.0], [27.0, 10005.0], [28.0, 10005.0], [29.0, 10005.0], [30.0, 10003.0], [31.0, 10003.0], [33.0, 10008.0], [32.0, 10008.0], [35.0, 10008.0], [34.0, 10002.0], [37.0, 10006.0], [36.0, 10008.0], [39.0, 10003.0], [38.0, 10007.0], [41.0, 10003.0], [40.0, 10004.0], [43.0, 10002.0], [42.0, 10002.0], [45.0, 10001.0], [44.0, 10003.0], [47.0, 10001.0], [46.0, 10001.0], [49.0, 10001.0], [48.0, 10001.0], [51.0, 10001.0], [50.0, 10001.0], [53.0, 10002.0], [52.0, 10002.0], [55.0, 10001.0], [54.0, 10001.0], [57.0, 10007.0], [56.0, 10004.0], [59.0, 10005.0], [61.0, 10004.0], [60.0, 10002.0], [63.0, 10003.0], [62.0, 10008.0], [67.0, 10006.0], [66.0, 10003.0], [65.0, 10003.0], [64.0, 10005.0], [71.0, 10002.0], [70.0, 10003.0], [69.0, 10005.0], [68.0, 10007.0], [75.0, 10003.0], [74.0, 10005.0], [73.0, 10008.0], [72.0, 10006.0], [79.0, 10001.0], [78.0, 10001.0], [77.0, 10004.0], [76.0, 10004.0], [83.0, 10006.0], [82.0, 10009.0], [81.0, 10010.0], [80.0, 10001.0], [87.0, 10002.0], [86.0, 10006.0], [85.0, 10004.0], [84.0, 10004.0], [91.0, 10004.0], [90.0, 10003.0], [89.0, 10003.0], [88.0, 10008.0], [95.0, 10003.0], [94.0, 10004.0], [93.0, 10004.0], [92.0, 10004.0], [99.0, 10005.0], [98.0, 10005.0], [97.0, 10003.0], [96.0, 10001.0], [103.0, 10005.0], [102.0, 10010.0], [101.0, 10009.0], [100.0, 10007.0], [107.0, 10006.0], [105.0, 10013.0], [104.0, 10012.0], [111.0, 10018.0], [110.0, 10002.0], [109.0, 10016.5], [115.0, 10012.5], [113.0, 10005.0], [112.0, 10017.0], [119.0, 10022.0], [118.0, 10008.0], [117.0, 10005.0], [116.0, 10004.0], [123.0, 10011.0], [122.0, 10010.0], [121.0, 10008.0], [120.0, 10007.0], [127.0, 10017.0], [126.0, 10020.0], [125.0, 10021.0], [124.0, 10012.0], [135.0, 10034.0], [134.0, 10005.0], [133.0, 10018.0], [132.0, 10005.0], [131.0, 10018.0], [130.0, 10017.0], [129.0, 10019.0], [128.0, 10005.0], [143.0, 10016.0], [142.0, 10014.0], [141.0, 10019.0], [140.0, 10020.0], [139.0, 10014.0], [138.0, 10006.0], [137.0, 10032.0], [136.0, 10033.0], [151.0, 10016.0], [150.0, 10005.0], [149.0, 10006.0], [148.0, 10021.0], [147.0, 10021.0], [146.0, 10003.0], [145.0, 10016.0], [144.0, 10017.0], [158.0, 10017.0], [157.0, 10004.0], [156.0, 10018.0], [155.0, 10018.0], [153.0, 10018.0], [152.0, 10016.0], [167.0, 10002.0], [166.0, 10007.0], [165.0, 10004.0], [164.0, 10007.0], [163.0, 10004.0], [162.0, 10005.0], [161.0, 10007.0], [160.0, 10009.5], [175.0, 10002.0], [174.0, 10005.0], [173.0, 10005.0], [172.0, 10005.0], [171.0, 10004.0], [170.0, 10002.0], [169.0, 10002.0], [168.0, 10004.0], [183.0, 10003.0], [182.0, 10006.0], [181.0, 10003.0], [180.0, 10005.0], [179.0, 10006.0], [178.0, 10002.0], [177.0, 10001.0], [176.0, 10002.0], [191.0, 10008.0], [190.0, 10007.0], [189.0, 10007.0], [188.0, 10008.0], [187.0, 10015.0], [186.0, 10013.0], [185.0, 10014.0], [184.0, 10010.0], [199.0, 10001.0], [198.0, 10001.0], [197.0, 10005.0], [196.0, 10005.0], [195.0, 10006.0], [194.0, 10007.0], [193.0, 10008.0], [192.0, 10008.0], [207.0, 10005.0], [206.0, 10005.0], [205.0, 10004.0], [204.0, 10003.0], [203.0, 10002.0], [201.0, 10005.0], [200.0, 10002.0], [215.0, 10004.0], [214.0, 10005.0], [213.0, 10005.0], [212.0, 10005.0], [211.0, 10006.0], [210.0, 10002.0], [209.0, 10002.0], [208.0, 10005.0], [223.0, 10009.0], [222.0, 10005.0], [221.0, 10005.0], [220.0, 10006.0], [219.0, 10006.0], [218.0, 10003.0], [217.0, 10004.0], [216.0, 10007.0], [231.0, 10004.0], [230.0, 10007.0], [229.0, 10003.0], [228.0, 10003.0], [227.0, 10005.0], [226.0, 10005.0], [225.0, 10012.0], [224.0, 10008.0], [239.0, 10154.0], [238.0, 10130.0], [237.0, 10090.0], [236.0, 10101.0], [235.0, 10181.0], [234.0, 10065.0], [233.0, 10140.5], [247.0, 10074.0], [246.0, 10070.0], [245.0, 10163.0], [244.0, 10214.0], [243.0, 10073.0], [242.0, 10050.0], [241.0, 10039.0], [240.0, 10104.0], [255.0, 10191.0], [254.0, 10211.0], [253.0, 10091.0], [252.0, 10162.0], [251.0, 10056.0], [250.0, 10101.666666666666], [270.0, 1085.0], [266.0, 1095.5555555555557], [256.0, 10076.0], [276.0, 1310.75], [274.0, 1433.0], [273.0, 1472.25], [299.0, 997.0], [298.0, 818.3333333333334], [295.0, 1098.75], [311.0, 810.6666666666666], [351.0, 1011.5], [350.0, 988.0], [349.0, 930.0], [348.0, 1055.0], [343.0, 937.25], [339.0, 801.0], [365.0, 956.0], [361.0, 455.0], [354.0, 474.0], [381.0, 475.09999999999997], [380.0, 482.0], [378.0, 762.25], [376.0, 460.0], [373.0, 687.3333333333334], [369.0, 922.0], [397.0, 459.0], [394.0, 473.0], [393.0, 465.6666666666667], [384.0, 499.5], [415.0, 331.0], [412.0, 292.3333333333333], [411.0, 371.0], [413.0, 934.0], [409.0, 903.0], [419.0, 269.42857142857144], [420.0, 379.0], [422.0, 343.55555555555554], [426.0, 292.0], [427.0, 285.5], [428.0, 299.5], [430.0, 325.8], [444.0, 295.6666666666667], [432.0, 343.6666666666667], [439.0, 377.5555555555555], [440.0, 289.0], [443.0, 314.6666666666667], [447.0, 297.8], [438.0, 456.5], [436.0, 464.0], [435.0, 436.0], [434.0, 437.0], [448.0, 335.25], [449.0, 209.0], [450.0, 380.0], [455.0, 359.0], [461.0, 354.0], [463.0, 329.2], [462.0, 419.0], [459.0, 480.0], [479.0, 369.5], [465.0, 353.85714285714283], [470.0, 360.2], [472.0, 331.0], [478.0, 256.0], [477.0, 408.0], [475.0, 404.0], [474.0, 431.0], [473.0, 407.0], [485.0, 303.00000000000006], [489.0, 256.0], [495.0, 410.0], [491.0, 415.0], [487.0, 761.3333333333334], [484.0, 663.5], [483.0, 441.6], [506.0, 332.0], [507.0, 323.0], [509.0, 232.5], [510.0, 359.5], [511.0, 290.83333333333337], [503.0, 431.5], [501.0, 434.0], [496.0, 410.0], [525.0, 222.45454545454544], [514.0, 273.4], [513.0, 413.0], [526.0, 206.0], [527.0, 423.0], [515.0, 246.0], [516.0, 293.1176470588236], [518.0, 336.0], [517.0, 427.0], [539.0, 200.77777777777777], [528.0, 213.66666666666666], [529.0, 206.75], [530.0, 211.5], [531.0, 188.0], [522.0, 256.0], [523.0, 329.0], [524.0, 222.16666666666669], [571.0, 387.42857142857144], [556.0, 188.5], [552.0, 205.83333333333334], [553.0, 199.0], [554.0, 207.0], [557.0, 190.75], [548.0, 207.5], [547.0, 203.25], [550.0, 210.0], [549.0, 201.0], [562.0, 485.5], [567.0, 322.5], [565.0, 252.0], [563.0, 231.0], [564.0, 247.66666666666666], [575.0, 294.44444444444446], [574.0, 515.0], [572.0, 322.5], [573.0, 241.125], [568.0, 426.0], [569.0, 237.0], [570.0, 378.5], [577.0, 346.5], [580.0, 385.0909090909091], [581.0, 378.5], [582.0, 299.2857142857143], [583.0, 322.61538461538464], [598.0, 360.0], [595.0, 650.0], [594.0, 433.66666666666663], [602.0, 447.75], [600.0, 325.25], [601.0, 544.1428571428571], [584.0, 367.3333333333333], [585.0, 394.57142857142856], [587.0, 415.5714285714286], [586.0, 230.25], [588.0, 216.0], [589.0, 220.0], [591.0, 214.0], [590.0, 216.5], [579.0, 316.50000000000006], [578.0, 362.0], [1.0, 10002.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[369.88281249999983, 3617.3333333333344]], "isOverall": false, "label": "MQTT Connect-Aggregated", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [34.0, 0.0], [37.0, 0.0], [36.0, 0.0], [39.0, 0.0], [38.0, 0.0], [41.0, 0.0], [40.0, 0.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [58.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [67.0, 0.0], [66.0, 0.0], [65.0, 0.0], [64.0, 0.0], [71.0, 0.0], [70.0, 0.0], [69.0, 0.0], [68.0, 0.0], [75.0, 0.0], [74.0, 0.0], [73.0, 0.0], [72.0, 0.0], [79.0, 0.0], [78.0, 0.0], [77.0, 0.0], [76.0, 0.0], [83.0, 0.0], [82.0, 0.0], [81.0, 0.0], [80.0, 0.0], [87.0, 0.0], [86.0, 0.0], [85.0, 0.0], [84.0, 0.0], [91.0, 0.0], [90.0, 0.0], [89.0, 0.0], [88.0, 0.0], [95.0, 0.0], [94.0, 0.0], [93.0, 0.0], [92.0, 0.0], [99.0, 0.0], [98.0, 0.0], [97.0, 0.0], [96.0, 0.0], [103.0, 0.0], [102.0, 0.0], [101.0, 0.0], [100.0, 0.0], [107.0, 0.0], [106.0, 0.0], [105.0, 0.0], [104.0, 0.0], [111.0, 0.0], [110.0, 0.0], [109.0, 0.0], [115.0, 0.0], [114.0, 0.0], [113.0, 0.0], [112.0, 0.0], [119.0, 0.0], [118.0, 0.0], [117.0, 0.0], [116.0, 0.0], [123.0, 0.0], [122.0, 0.0], [121.0, 0.0], [120.0, 0.0], [127.0, 0.0], [126.0, 0.0], [125.0, 0.0], [124.0, 0.0], [135.0, 0.0], [134.0, 0.0], [133.0, 0.0], [132.0, 0.0], [131.0, 0.0], [130.0, 0.0], [129.0, 0.0], [128.0, 0.0], [143.0, 0.0], [142.0, 0.0], [141.0, 0.0], [140.0, 0.0], [139.0, 0.0], [138.0, 0.0], [137.0, 0.0], [136.0, 0.0], [151.0, 0.0], [150.0, 0.0], [149.0, 0.0], [148.0, 0.0], [147.0, 0.0], [146.0, 0.0], [145.0, 0.0], [144.0, 0.0], [159.0, 0.0], [158.0, 0.0], [157.0, 0.0], [156.0, 0.0], [155.0, 0.0], [154.0, 0.0], [153.0, 0.0], [152.0, 0.0], [167.0, 0.0], [166.0, 0.0], [165.0, 0.0], [164.0, 0.0], [163.0, 0.0], [162.0, 0.0], [161.0, 0.0], [160.0, 0.0], [175.0, 0.0], [174.0, 0.0], [173.0, 0.0], [172.0, 0.0], [171.0, 0.0], [170.0, 0.0], [169.0, 0.0], [168.0, 0.0], [183.0, 0.0], [182.0, 0.0], [181.0, 0.0], [180.0, 0.0], [179.0, 0.0], [178.0, 0.0], [177.0, 0.0], [176.0, 0.0], [191.0, 0.0], [190.0, 0.0], [189.0, 0.0], [188.0, 0.0], [187.0, 0.0], [186.0, 0.0], [185.0, 0.0], [184.0, 0.0], [199.0, 0.0], [198.0, 0.0], [197.0, 0.0], [196.0, 0.0], [195.0, 0.0], [194.0, 0.0], [193.0, 0.0], [192.0, 0.0], [207.0, 0.0], [206.0, 0.0], [205.0, 0.0], [204.0, 0.0], [203.0, 0.0], [202.0, 0.0], [201.0, 0.0], [200.0, 0.0], [215.0, 0.0], [214.0, 0.0], [213.0, 0.0], [212.0, 0.0], [211.0, 0.0], [210.0, 0.0], [209.0, 0.0], [208.0, 0.0], [223.0, 0.0], [222.0, 0.0], [221.0, 0.0], [220.0, 0.0], [219.0, 0.0], [218.0, 0.0], [217.0, 0.0], [216.0, 0.0], [231.0, 0.0], [230.0, 0.0], [229.0, 0.0], [228.0, 0.0], [227.0, 0.0], [226.0, 0.0], [225.0, 0.0], [224.0, 0.0], [239.0, 0.0], [238.0, 0.0], [237.0, 0.0], [236.0, 0.0], [235.0, 0.0], [234.0, 0.0], [233.0, 0.0], [247.0, 0.0], [246.0, 0.0], [245.0, 0.0], [244.0, 0.0], [243.0, 0.0], [242.0, 0.0], [241.0, 0.0], [240.0, 0.0], [255.0, 0.0], [254.0, 0.0], [253.0, 0.0], [252.0, 0.0], [251.0, 0.0], [250.0, 0.0], [249.0, 0.0], [270.0, 42.0], [271.0, 45.0], [269.0, 44.0], [256.0, 0.0], [266.0, 42.0], [265.0, 43.0], [264.0, 44.0], [262.0, 46.0], [261.0, 48.0], [260.0, 45.25], [286.0, 47.0], [287.0, 51.0], [285.0, 43.0], [284.0, 44.0], [283.0, 44.0], [282.0, 44.0], [281.0, 42.0], [280.0, 46.0], [279.0, 43.0], [273.0, 44.0], [272.0, 41.0], [275.0, 42.0], [274.0, 59.0], [278.0, 44.0], [277.0, 44.0], [276.0, 45.0], [299.0, 48.0], [298.0, 50.0], [297.0, 44.0], [295.0, 47.0], [291.0, 48.0], [319.0, 144.33333333333334], [316.0, 46.333333333333336], [313.0, 322.0], [312.0, 42.0], [311.0, 48.0], [309.0, 352.0], [308.0, 54.0], [306.0, 44.0], [335.0, 53.0], [326.0, 51.4], [324.0, 50.0], [339.0, 50.0], [350.0, 47.75], [351.0, 46.0], [349.0, 48.0], [344.0, 44.0], [343.0, 43.0], [342.0, 42.0], [340.0, 42.0], [337.0, 52.99999999999999], [336.0, 53.666666666666664], [366.0, 52.0], [365.0, 46.75], [361.0, 55.2], [356.0, 43.0], [355.0, 44.0], [354.0, 48.5], [352.0, 44.0], [383.0, 72.0], [381.0, 69.0], [378.0, 69.0], [377.0, 63.0], [376.0, 54.0], [373.0, 59.0], [372.0, 59.333333333333336], [369.0, 54.666666666666664], [397.0, 79.0], [395.0, 64.0], [394.0, 68.0], [393.0, 71.75], [389.0, 221.0], [387.0, 71.0], [386.0, 223.0], [384.0, 65.0], [413.0, 72.5], [412.0, 68.0], [411.0, 178.0], [405.0, 394.0], [403.0, 82.66666666666667], [400.0, 179.66666666666669], [429.0, 217.0], [427.0, 142.25], [423.0, 66.0], [419.0, 67.0], [418.0, 384.0], [417.0, 363.25], [439.0, 70.0], [438.0, 70.5], [436.0, 170.33333333333334], [435.0, 68.0], [463.0, 66.66666666666667], [460.0, 413.0], [459.0, 304.2857142857143], [452.0, 77.66666666666667], [449.0, 304.7142857142857], [448.0, 182.0], [479.0, 126.50000000000001], [473.0, 73.2], [468.0, 75.33333333333333], [465.0, 367.0], [464.0, 72.0], [495.0, 68.28571428571429], [493.0, 68.0], [487.0, 66.0], [485.0, 68.0], [484.0, 68.0], [483.0, 75.5], [511.0, 63.5], [509.0, 65.0], [507.0, 70.0], [504.0, 63.0], [503.0, 61.0], [501.0, 63.2], [496.0, 74.0], [539.0, 60.5], [543.0, 58.0], [542.0, 67.0], [541.0, 64.0], [537.0, 56.33333333333333], [531.0, 65.75], [527.0, 56.75], [523.0, 56.25], [519.0, 57.0], [518.0, 58.333333333333336], [515.0, 55.0], [514.0, 58.0], [571.0, 89.33333333333333], [572.0, 92.55555555555556], [568.0, 93.25], [555.0, 74.4], [547.0, 60.25], [550.0, 79.0], [549.0, 70.5], [570.0, 86.1], [567.0, 96.0], [575.0, 94.3529411764706], [574.0, 84.5], [573.0, 97.66666666666667], [566.0, 75.18181818181819], [591.0, 88.25], [594.0, 84.5], [600.0, 92.78571428571429], [601.0, 93.375], [602.0, 93.60000000000001], [603.0, 93.33333333333333], [599.0, 89.0], [598.0, 91.5], [595.0, 84.25], [596.0, 93.0], [589.0, 86.0], [590.0, 88.41666666666667], [588.0, 87.85714285714286], [587.0, 86.5], [586.0, 82.0], [585.0, 85.0], [584.0, 79.42857142857143], [583.0, 84.63636363636364], [582.0, 88.5], [581.0, 100.0], [580.0, 111.75], [579.0, 90.57142857142857], [577.0, 94.0], [578.0, 91.0], [1.0, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[363.8098958333332, 61.37369791666659]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[2.0, 0.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 0.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [34.0, 0.0], [37.0, 0.0], [36.0, 0.0], [39.0, 0.0], [38.0, 0.0], [41.0, 0.0], [40.0, 0.0], [43.0, 0.0], [42.0, 0.0], [45.0, 0.0], [44.0, 0.0], [47.0, 0.0], [46.0, 0.0], [49.0, 0.0], [48.0, 0.0], [51.0, 0.0], [50.0, 0.0], [53.0, 0.0], [52.0, 0.0], [55.0, 0.0], [54.0, 0.0], [57.0, 0.0], [56.0, 0.0], [59.0, 0.0], [61.0, 0.0], [60.0, 0.0], [63.0, 0.0], [62.0, 0.0], [67.0, 0.0], [66.0, 0.0], [65.0, 0.0], [64.0, 0.0], [71.0, 0.0], [70.0, 0.0], [69.0, 0.0], [68.0, 0.0], [75.0, 0.0], [74.0, 0.0], [73.0, 0.0], [72.0, 0.0], [79.0, 0.0], [78.0, 0.0], [77.0, 0.0], [76.0, 0.0], [83.0, 0.0], [82.0, 0.0], [81.0, 0.0], [80.0, 0.0], [87.0, 0.0], [86.0, 0.0], [85.0, 0.0], [84.0, 0.0], [91.0, 0.0], [90.0, 0.0], [89.0, 0.0], [88.0, 0.0], [95.0, 0.0], [94.0, 0.0], [93.0, 0.0], [92.0, 0.0], [99.0, 0.0], [98.0, 0.0], [97.0, 0.0], [96.0, 0.0], [103.0, 0.0], [102.0, 0.0], [101.0, 0.0], [100.0, 0.0], [107.0, 0.0], [106.0, 0.0], [105.0, 0.0], [104.0, 0.0], [111.0, 0.0], [110.0, 0.0], [109.0, 0.0], [115.0, 0.0], [114.0, 0.0], [113.0, 0.0], [112.0, 0.0], [119.0, 0.0], [118.0, 0.0], [117.0, 0.0], [116.0, 0.0], [123.0, 0.0], [122.0, 0.0], [121.0, 0.0], [120.0, 0.0], [127.0, 0.0], [126.0, 0.0], [125.0, 0.0], [124.0, 0.0], [135.0, 0.0], [134.0, 0.0], [133.0, 0.0], [132.0, 0.0], [131.0, 0.0], [130.0, 0.0], [129.0, 0.0], [128.0, 0.0], [143.0, 0.0], [142.0, 0.0], [141.0, 0.0], [140.0, 0.0], [139.0, 0.0], [138.0, 0.0], [137.0, 0.0], [136.0, 0.0], [151.0, 0.0], [150.0, 0.0], [149.0, 0.0], [148.0, 0.0], [147.0, 0.0], [146.0, 0.0], [145.0, 0.0], [144.0, 0.0], [158.0, 0.0], [157.0, 0.0], [156.0, 0.0], [155.0, 0.0], [154.0, 0.0], [153.0, 0.0], [152.0, 0.0], [167.0, 0.0], [166.0, 0.0], [165.0, 0.0], [164.0, 0.0], [163.0, 0.0], [162.0, 0.0], [161.0, 0.0], [160.0, 0.0], [175.0, 0.0], [174.0, 0.0], [173.0, 0.0], [172.0, 0.0], [171.0, 0.0], [170.0, 0.0], [169.0, 0.0], [168.0, 0.0], [183.0, 0.0], [182.0, 0.0], [181.0, 0.0], [180.0, 0.0], [179.0, 0.0], [178.0, 0.0], [177.0, 0.0], [176.0, 0.0], [191.0, 0.0], [190.0, 0.0], [189.0, 0.0], [188.0, 0.0], [187.0, 0.0], [186.0, 0.0], [185.0, 0.0], [184.0, 0.0], [199.0, 0.0], [198.0, 0.0], [197.0, 0.0], [196.0, 0.0], [195.0, 0.0], [194.0, 0.0], [193.0, 0.0], [192.0, 0.0], [207.0, 0.0], [206.0, 0.0], [205.0, 0.0], [204.0, 0.0], [203.0, 0.0], [201.0, 0.0], [200.0, 0.0], [215.0, 0.0], [214.0, 0.0], [213.0, 0.0], [212.0, 0.0], [211.0, 0.0], [210.0, 0.0], [209.0, 0.0], [208.0, 0.0], [223.0, 0.0], [222.0, 0.0], [221.0, 0.0], [220.0, 0.0], [219.0, 0.0], [218.0, 0.0], [217.0, 0.0], [216.0, 0.0], [231.0, 0.0], [230.0, 0.0], [229.0, 0.0], [228.0, 0.0], [227.0, 0.0], [226.0, 0.0], [225.0, 0.0], [224.0, 0.0], [239.0, 0.0], [238.0, 0.0], [237.0, 0.0], [236.0, 0.0], [235.0, 0.0], [234.0, 0.0], [233.0, 0.0], [247.0, 0.0], [246.0, 0.0], [245.0, 0.0], [244.0, 0.0], [243.0, 0.0], [242.0, 0.0], [241.0, 0.0], [240.0, 0.0], [255.0, 0.0], [254.0, 0.0], [253.0, 0.0], [252.0, 0.0], [251.0, 0.0], [250.0, 0.0], [249.0, 0.0], [266.0, 45.3], [256.0, 0.0], [286.0, 297.6666666666667], [283.0, 43.0], [278.0, 859.0], [276.0, 43.0], [275.0, 1010.0], [273.0, 44.0], [272.0, 43.8], [299.0, 44.666666666666664], [298.0, 139.625], [297.0, 39.0], [295.0, 395.75], [319.0, 47.0], [313.0, 44.0], [312.0, 60.0], [311.0, 44.0], [326.0, 47.0], [325.0, 49.0], [324.0, 47.333333333333336], [351.0, 57.76190476190476], [344.0, 49.0], [343.0, 46.0], [342.0, 41.0], [339.0, 48.0], [365.0, 62.0], [356.0, 57.0], [354.0, 53.333333333333336], [383.0, 67.0], [381.0, 70.66666666666667], [378.0, 55.0], [369.0, 58.16666666666667], [368.0, 63.0], [394.0, 76.5], [393.0, 71.33333333333333], [389.0, 79.0], [386.0, 68.0], [384.0, 77.5], [413.0, 61.0], [403.0, 76.66666666666667], [400.0, 75.33333333333333], [427.0, 67.5], [423.0, 67.0], [418.0, 59.0], [417.0, 66.0], [439.0, 243.0], [438.0, 70.0], [436.0, 68.0], [460.0, 65.0], [452.0, 40.0], [479.0, 267.3333333333333], [465.0, 60.333333333333336], [464.0, 131.5], [492.0, 84.33333333333333], [493.0, 85.0], [495.0, 256.6666666666667], [487.0, 157.5], [484.0, 105.125], [483.0, 234.3], [510.0, 77.33333333333333], [502.0, 87.33333333333333], [503.0, 196.6], [504.0, 139.5], [506.0, 84.5], [507.0, 85.09999999999998], [509.0, 92.5], [496.0, 162.4], [511.0, 71.16666666666667], [501.0, 354.0], [539.0, 78.27777777777777], [514.0, 130.0], [513.0, 66.5], [527.0, 70.83333333333333], [516.0, 72.4], [515.0, 246.33333333333331], [518.0, 104.25], [537.0, 74.5], [519.0, 76.75], [524.0, 75.0], [523.0, 101.0], [525.0, 90.0], [529.0, 73.0], [531.0, 54.0], [543.0, 82.5], [542.0, 58.833333333333336], [541.0, 99.66666666666667], [572.0, 96.8], [554.0, 85.25], [555.0, 95.88888888888889], [556.0, 77.0], [562.0, 94.0], [564.0, 102.0], [563.0, 84.71428571428572], [571.0, 93.875], [570.0, 74.66666666666667], [575.0, 85.82926829268293], [574.0, 101.0], [573.0, 102.0], [568.0, 93.0], [550.0, 117.0], [547.0, 97.0], [569.0, 80.5], [567.0, 93.2], [566.0, 92.5], [576.0, 72.2], [579.0, 88.5], [578.0, 100.16666666666666], [577.0, 99.0], [580.0, 94.0], [581.0, 78.83333333333334], [583.0, 84.0], [582.0, 96.0], [600.0, 65.2], [597.0, 59.400000000000006], [599.0, 66.5], [598.0, 70.80952380952382], [584.0, 72.0], [585.0, 86.66666666666667], [586.0, 83.0], [587.0, 111.0], [588.0, 104.66666666666667], [589.0, 69.91666666666666], [1.0, 0.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}, {"data": [[374.0638020833333, 64.5963541666666]], "isOverall": false, "label": "MQTT Pub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 603.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 614.4, "minX": 1.70395104E12, "maxY": 942.9333333333333, "series": [{"data": [[1.70395104E12, 942.9333333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.70395104E12, 614.4]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70395104E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 61.37369791666659, "minX": 1.70395104E12, "maxY": 3617.3333333333344, "series": [{"data": [[1.70395104E12, 3617.3333333333344]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.70395104E12, 61.37369791666659]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.70395104E12, 64.5963541666666]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70395104E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70395104E12, "maxY": 64.5963541666666, "series": [{"data": [[1.70395104E12, 0.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.70395104E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.70395104E12, 64.5963541666666]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70395104E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.70395104E12, "maxY": 4.9E-324, "series": [{"data": [[1.70395104E12, 0.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.70395104E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.70395104E12, 0.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70395104E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 39.0, "minX": 1.70395104E12, "maxY": 1519.0, "series": [{"data": [[1.70395104E12, 1519.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.70395104E12, 39.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.70395104E12, 464.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.70395104E12, 1097.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.70395104E12, 91.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.70395104E12, 626.1999999999962]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70395104E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 66.0, "maxY": 92.0, "series": [{"data": [[66.0, 45.0], [1470.0, 92.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[666.0, 0.0], [102.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1470.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 66.0, "maxY": 4.9E-324, "series": [{"data": [[66.0, 0.0], [1470.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[666.0, 0.0], [102.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1470.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 38.4, "minX": 1.70395104E12, "maxY": 38.4, "series": [{"data": [[1.70395104E12, 38.4]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70395104E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.266666666666667, "minX": 1.70395104E12, "maxY": 25.6, "series": [{"data": [[1.70395104E12, 25.6]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.70395104E12, 8.533333333333333]], "isOverall": false, "label": "500", "isController": false}, {"data": [[1.70395104E12, 4.266666666666667]], "isOverall": false, "label": "502", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.70395104E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.266666666666667, "minX": 1.70395104E12, "maxY": 8.533333333333333, "series": [{"data": [[1.70395104E12, 4.266666666666667]], "isOverall": false, "label": "MQTT Connect-failure", "isController": false}, {"data": [[1.70395104E12, 8.533333333333333]], "isOverall": false, "label": "MQTT Pub Sampler-success", "isController": false}, {"data": [[1.70395104E12, 4.266666666666667]], "isOverall": false, "label": "MQTT Pub Sampler-failure", "isController": false}, {"data": [[1.70395104E12, 8.533333333333333]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.70395104E12, 8.533333333333333]], "isOverall": false, "label": "MQTT Connect-success", "isController": false}, {"data": [[1.70395104E12, 4.266666666666667]], "isOverall": false, "label": "MQTT DisConnect-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70395104E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 12.8, "minX": 1.70395104E12, "maxY": 25.6, "series": [{"data": [[1.70395104E12, 25.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.70395104E12, 12.8]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.70395104E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

