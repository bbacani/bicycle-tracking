/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 36.0, "minX": 0.0, "maxY": 32567.0, "series": [{"data": [[0.0, 158.0], [0.1, 169.0], [0.2, 174.0], [0.3, 174.0], [0.4, 187.0], [0.5, 188.0], [0.6, 188.0], [0.7, 191.0], [0.8, 193.0], [0.9, 198.0], [1.0, 201.0], [1.1, 201.0], [1.2, 201.0], [1.3, 201.0], [1.4, 204.0], [1.5, 204.0], [1.6, 205.0], [1.7, 206.0], [1.8, 206.0], [1.9, 206.0], [2.0, 206.0], [2.1, 207.0], [2.2, 207.0], [2.3, 207.0], [2.4, 208.0], [2.5, 208.0], [2.6, 208.0], [2.7, 208.0], [2.8, 208.0], [2.9, 208.0], [3.0, 209.0], [3.1, 209.0], [3.2, 210.0], [3.3, 210.0], [3.4, 210.0], [3.5, 210.0], [3.6, 211.0], [3.7, 211.0], [3.8, 211.0], [3.9, 212.0], [4.0, 212.0], [4.1, 212.0], [4.2, 213.0], [4.3, 213.0], [4.4, 213.0], [4.5, 213.0], [4.6, 213.0], [4.7, 214.0], [4.8, 214.0], [4.9, 214.0], [5.0, 214.0], [5.1, 214.0], [5.2, 215.0], [5.3, 215.0], [5.4, 215.0], [5.5, 215.0], [5.6, 215.0], [5.7, 215.0], [5.8, 215.0], [5.9, 215.0], [6.0, 215.0], [6.1, 215.0], [6.2, 216.0], [6.3, 216.0], [6.4, 216.0], [6.5, 216.0], [6.6, 216.0], [6.7, 217.0], [6.8, 217.0], [6.9, 217.0], [7.0, 217.0], [7.1, 217.0], [7.2, 218.0], [7.3, 218.0], [7.4, 218.0], [7.5, 218.0], [7.6, 218.0], [7.7, 219.0], [7.8, 219.0], [7.9, 220.0], [8.0, 220.0], [8.1, 220.0], [8.2, 220.0], [8.3, 221.0], [8.4, 221.0], [8.5, 221.0], [8.6, 222.0], [8.7, 222.0], [8.8, 222.0], [8.9, 222.0], [9.0, 222.0], [9.1, 223.0], [9.2, 223.0], [9.3, 223.0], [9.4, 223.0], [9.5, 223.0], [9.6, 224.0], [9.7, 224.0], [9.8, 224.0], [9.9, 224.0], [10.0, 224.0], [10.1, 224.0], [10.2, 224.0], [10.3, 224.0], [10.4, 224.0], [10.5, 224.0], [10.6, 224.0], [10.7, 224.0], [10.8, 226.0], [10.9, 226.0], [11.0, 226.0], [11.1, 226.0], [11.2, 226.0], [11.3, 226.0], [11.4, 226.0], [11.5, 226.0], [11.6, 226.0], [11.7, 226.0], [11.8, 227.0], [11.9, 227.0], [12.0, 227.0], [12.1, 227.0], [12.2, 227.0], [12.3, 227.0], [12.4, 227.0], [12.5, 227.0], [12.6, 227.0], [12.7, 227.0], [12.8, 228.0], [12.9, 228.0], [13.0, 228.0], [13.1, 228.0], [13.2, 228.0], [13.3, 229.0], [13.4, 229.0], [13.5, 229.0], [13.6, 229.0], [13.7, 230.0], [13.8, 230.0], [13.9, 230.0], [14.0, 230.0], [14.1, 230.0], [14.2, 230.0], [14.3, 231.0], [14.4, 231.0], [14.5, 231.0], [14.6, 231.0], [14.7, 231.0], [14.8, 232.0], [14.9, 232.0], [15.0, 232.0], [15.1, 232.0], [15.2, 232.0], [15.3, 233.0], [15.4, 233.0], [15.5, 233.0], [15.6, 233.0], [15.7, 233.0], [15.8, 233.0], [15.9, 233.0], [16.0, 233.0], [16.1, 234.0], [16.2, 234.0], [16.3, 235.0], [16.4, 235.0], [16.5, 235.0], [16.6, 235.0], [16.7, 235.0], [16.8, 236.0], [16.9, 236.0], [17.0, 236.0], [17.1, 237.0], [17.2, 237.0], [17.3, 237.0], [17.4, 237.0], [17.5, 238.0], [17.6, 238.0], [17.7, 238.0], [17.8, 239.0], [17.9, 240.0], [18.0, 240.0], [18.1, 240.0], [18.2, 241.0], [18.3, 241.0], [18.4, 241.0], [18.5, 241.0], [18.6, 242.0], [18.7, 242.0], [18.8, 242.0], [18.9, 243.0], [19.0, 243.0], [19.1, 244.0], [19.2, 245.0], [19.3, 245.0], [19.4, 246.0], [19.5, 247.0], [19.6, 249.0], [19.7, 250.0], [19.8, 251.0], [19.9, 251.0], [20.0, 252.0], [20.1, 252.0], [20.2, 252.0], [20.3, 253.0], [20.4, 253.0], [20.5, 257.0], [20.6, 257.0], [20.7, 257.0], [20.8, 257.0], [20.9, 258.0], [21.0, 259.0], [21.1, 259.0], [21.2, 260.0], [21.3, 261.0], [21.4, 262.0], [21.5, 262.0], [21.6, 263.0], [21.7, 264.0], [21.8, 264.0], [21.9, 264.0], [22.0, 265.0], [22.1, 267.0], [22.2, 267.0], [22.3, 269.0], [22.4, 270.0], [22.5, 270.0], [22.6, 270.0], [22.7, 272.0], [22.8, 280.0], [22.9, 282.0], [23.0, 282.0], [23.1, 283.0], [23.2, 287.0], [23.3, 287.0], [23.4, 290.0], [23.5, 292.0], [23.6, 292.0], [23.7, 294.0], [23.8, 295.0], [23.9, 296.0], [24.0, 296.0], [24.1, 296.0], [24.2, 298.0], [24.3, 298.0], [24.4, 299.0], [24.5, 302.0], [24.6, 302.0], [24.7, 304.0], [24.8, 306.0], [24.9, 306.0], [25.0, 307.0], [25.1, 311.0], [25.2, 313.0], [25.3, 319.0], [25.4, 322.0], [25.5, 323.0], [25.6, 326.0], [25.7, 326.0], [25.8, 328.0], [25.9, 329.0], [26.0, 332.0], [26.1, 335.0], [26.2, 336.0], [26.3, 337.0], [26.4, 338.0], [26.5, 340.0], [26.6, 340.0], [26.7, 340.0], [26.8, 342.0], [26.9, 343.0], [27.0, 343.0], [27.1, 344.0], [27.2, 344.0], [27.3, 344.0], [27.4, 345.0], [27.5, 346.0], [27.6, 346.0], [27.7, 347.0], [27.8, 347.0], [27.9, 348.0], [28.0, 351.0], [28.1, 352.0], [28.2, 354.0], [28.3, 354.0], [28.4, 355.0], [28.5, 358.0], [28.6, 360.0], [28.7, 360.0], [28.8, 361.0], [28.9, 363.0], [29.0, 364.0], [29.1, 365.0], [29.2, 366.0], [29.3, 368.0], [29.4, 369.0], [29.5, 370.0], [29.6, 370.0], [29.7, 371.0], [29.8, 372.0], [29.9, 373.0], [30.0, 373.0], [30.1, 376.0], [30.2, 379.0], [30.3, 385.0], [30.4, 385.0], [30.5, 389.0], [30.6, 390.0], [30.7, 398.0], [30.8, 398.0], [30.9, 399.0], [31.0, 401.0], [31.1, 402.0], [31.2, 407.0], [31.3, 407.0], [31.4, 408.0], [31.5, 412.0], [31.6, 413.0], [31.7, 425.0], [31.8, 427.0], [31.9, 427.0], [32.0, 429.0], [32.1, 430.0], [32.2, 431.0], [32.3, 431.0], [32.4, 431.0], [32.5, 434.0], [32.6, 435.0], [32.7, 438.0], [32.8, 439.0], [32.9, 439.0], [33.0, 440.0], [33.1, 441.0], [33.2, 441.0], [33.3, 441.0], [33.4, 442.0], [33.5, 444.0], [33.6, 445.0], [33.7, 447.0], [33.8, 451.0], [33.9, 454.0], [34.0, 454.0], [34.1, 454.0], [34.2, 455.0], [34.3, 456.0], [34.4, 456.0], [34.5, 457.0], [34.6, 458.0], [34.7, 458.0], [34.8, 458.0], [34.9, 460.0], [35.0, 460.0], [35.1, 461.0], [35.2, 461.0], [35.3, 462.0], [35.4, 463.0], [35.5, 463.0], [35.6, 466.0], [35.7, 469.0], [35.8, 469.0], [35.9, 469.0], [36.0, 470.0], [36.1, 470.0], [36.2, 470.0], [36.3, 471.0], [36.4, 471.0], [36.5, 471.0], [36.6, 472.0], [36.7, 472.0], [36.8, 473.0], [36.9, 474.0], [37.0, 474.0], [37.1, 474.0], [37.2, 475.0], [37.3, 476.0], [37.4, 476.0], [37.5, 477.0], [37.6, 478.0], [37.7, 479.0], [37.8, 479.0], [37.9, 479.0], [38.0, 481.0], [38.1, 482.0], [38.2, 485.0], [38.3, 485.0], [38.4, 485.0], [38.5, 490.0], [38.6, 490.0], [38.7, 491.0], [38.8, 493.0], [38.9, 493.0], [39.0, 494.0], [39.1, 494.0], [39.2, 495.0], [39.3, 496.0], [39.4, 497.0], [39.5, 497.0], [39.6, 498.0], [39.7, 500.0], [39.8, 502.0], [39.9, 504.0], [40.0, 505.0], [40.1, 519.0], [40.2, 526.0], [40.3, 526.0], [40.4, 529.0], [40.5, 532.0], [40.6, 550.0], [40.7, 559.0], [40.8, 561.0], [40.9, 569.0], [41.0, 580.0], [41.1, 637.0], [41.2, 656.0], [41.3, 787.0], [41.4, 803.0], [41.5, 808.0], [41.6, 810.0], [41.7, 822.0], [41.8, 824.0], [41.9, 833.0], [42.0, 833.0], [42.1, 848.0], [42.2, 859.0], [42.3, 861.0], [42.4, 871.0], [42.5, 877.0], [42.6, 879.0], [42.7, 889.0], [42.8, 890.0], [42.9, 895.0], [43.0, 906.0], [43.1, 906.0], [43.2, 907.0], [43.3, 907.0], [43.4, 911.0], [43.5, 914.0], [43.6, 914.0], [43.7, 917.0], [43.8, 918.0], [43.9, 920.0], [44.0, 920.0], [44.1, 922.0], [44.2, 923.0], [44.3, 924.0], [44.4, 926.0], [44.5, 929.0], [44.6, 938.0], [44.7, 939.0], [44.8, 946.0], [44.9, 949.0], [45.0, 956.0], [45.1, 956.0], [45.2, 967.0], [45.3, 974.0], [45.4, 981.0], [45.5, 984.0], [45.6, 985.0], [45.7, 988.0], [45.8, 993.0], [45.9, 997.0], [46.0, 1003.0], [46.1, 1004.0], [46.2, 1008.0], [46.3, 1011.0], [46.4, 1012.0], [46.5, 1014.0], [46.6, 1014.0], [46.7, 1018.0], [46.8, 1032.0], [46.9, 1034.0], [47.0, 1035.0], [47.1, 1045.0], [47.2, 1048.0], [47.3, 1060.0], [47.4, 1072.0], [47.5, 1080.0], [47.6, 1083.0], [47.7, 1086.0], [47.8, 1097.0], [47.9, 1097.0], [48.0, 1098.0], [48.1, 1099.0], [48.2, 1099.0], [48.3, 1099.0], [48.4, 1099.0], [48.5, 1101.0], [48.6, 1103.0], [48.7, 1104.0], [48.8, 1106.0], [48.9, 1107.0], [49.0, 1127.0], [49.1, 1136.0], [49.2, 1136.0], [49.3, 1148.0], [49.4, 1170.0], [49.5, 1180.0], [49.6, 1180.0], [49.7, 1181.0], [49.8, 1183.0], [49.9, 1203.0], [50.0, 1221.0], [50.1, 1222.0], [50.2, 1233.0], [50.3, 1238.0], [50.4, 1246.0], [50.5, 1263.0], [50.6, 1273.0], [50.7, 1292.0], [50.8, 1304.0], [50.9, 1309.0], [51.0, 1317.0], [51.1, 1322.0], [51.2, 1325.0], [51.3, 11084.0], [51.4, 11097.0], [51.5, 11097.0], [51.6, 11098.0], [51.7, 11099.0], [51.8, 11100.0], [51.9, 11100.0], [52.0, 11101.0], [52.1, 11101.0], [52.2, 11101.0], [52.3, 11102.0], [52.4, 11102.0], [52.5, 11102.0], [52.6, 11103.0], [52.7, 11103.0], [52.8, 11103.0], [52.9, 11104.0], [53.0, 11104.0], [53.1, 11104.0], [53.2, 11104.0], [53.3, 11105.0], [53.4, 11105.0], [53.5, 11105.0], [53.6, 11106.0], [53.7, 11106.0], [53.8, 11106.0], [53.9, 11106.0], [54.0, 11106.0], [54.1, 11106.0], [54.2, 11106.0], [54.3, 11107.0], [54.4, 11107.0], [54.5, 11107.0], [54.6, 11108.0], [54.7, 11108.0], [54.8, 11108.0], [54.9, 11108.0], [55.0, 11108.0], [55.1, 11108.0], [55.2, 11108.0], [55.3, 11108.0], [55.4, 11108.0], [55.5, 11109.0], [55.6, 11109.0], [55.7, 11109.0], [55.8, 11109.0], [55.9, 11109.0], [56.0, 11109.0], [56.1, 11109.0], [56.2, 11110.0], [56.3, 11110.0], [56.4, 11110.0], [56.5, 11110.0], [56.6, 11110.0], [56.7, 11110.0], [56.8, 11111.0], [56.9, 11111.0], [57.0, 11111.0], [57.1, 11111.0], [57.2, 11112.0], [57.3, 11112.0], [57.4, 11113.0], [57.5, 11113.0], [57.6, 11113.0], [57.7, 11113.0], [57.8, 11113.0], [57.9, 11113.0], [58.0, 11113.0], [58.1, 11113.0], [58.2, 11114.0], [58.3, 11114.0], [58.4, 11114.0], [58.5, 11114.0], [58.6, 11114.0], [58.7, 11114.0], [58.8, 11114.0], [58.9, 11115.0], [59.0, 11115.0], [59.1, 11115.0], [59.2, 11116.0], [59.3, 11116.0], [59.4, 11116.0], [59.5, 11116.0], [59.6, 11116.0], [59.7, 11117.0], [59.8, 11117.0], [59.9, 11117.0], [60.0, 11117.0], [60.1, 11117.0], [60.2, 11117.0], [60.3, 11117.0], [60.4, 11117.0], [60.5, 11117.0], [60.6, 11117.0], [60.7, 11117.0], [60.8, 11117.0], [60.9, 11118.0], [61.0, 11118.0], [61.1, 11118.0], [61.2, 11118.0], [61.3, 11118.0], [61.4, 11119.0], [61.5, 11119.0], [61.6, 11120.0], [61.7, 11120.0], [61.8, 11120.0], [61.9, 11121.0], [62.0, 11121.0], [62.1, 11121.0], [62.2, 11122.0], [62.3, 11122.0], [62.4, 11122.0], [62.5, 11122.0], [62.6, 11122.0], [62.7, 11122.0], [62.8, 11123.0], [62.9, 11123.0], [63.0, 11123.0], [63.1, 11123.0], [63.2, 11124.0], [63.3, 11124.0], [63.4, 11124.0], [63.5, 11124.0], [63.6, 11124.0], [63.7, 11125.0], [63.8, 11125.0], [63.9, 11125.0], [64.0, 11126.0], [64.1, 11126.0], [64.2, 11127.0], [64.3, 11128.0], [64.4, 11128.0], [64.5, 11128.0], [64.6, 11129.0], [64.7, 11130.0], [64.8, 11130.0], [64.9, 11130.0], [65.0, 11130.0], [65.1, 11130.0], [65.2, 11131.0], [65.3, 11131.0], [65.4, 11132.0], [65.5, 11132.0], [65.6, 11132.0], [65.7, 11132.0], [65.8, 11132.0], [65.9, 11133.0], [66.0, 11133.0], [66.1, 11133.0], [66.2, 11133.0], [66.3, 11133.0], [66.4, 11134.0], [66.5, 11134.0], [66.6, 11134.0], [66.7, 11134.0], [66.8, 11134.0], [66.9, 11135.0], [67.0, 11135.0], [67.1, 11135.0], [67.2, 11136.0], [67.3, 11136.0], [67.4, 11136.0], [67.5, 11137.0], [67.6, 11137.0], [67.7, 11137.0], [67.8, 11137.0], [67.9, 11137.0], [68.0, 11137.0], [68.1, 11137.0], [68.2, 11141.0], [68.3, 11142.0], [68.4, 11142.0], [68.5, 11143.0], [68.6, 11144.0], [68.7, 11144.0], [68.8, 11144.0], [68.9, 11144.0], [69.0, 11144.0], [69.1, 11145.0], [69.2, 11145.0], [69.3, 11145.0], [69.4, 11145.0], [69.5, 11145.0], [69.6, 11145.0], [69.7, 11146.0], [69.8, 11146.0], [69.9, 11146.0], [70.0, 11146.0], [70.1, 11146.0], [70.2, 11147.0], [70.3, 11147.0], [70.4, 11147.0], [70.5, 11147.0], [70.6, 11147.0], [70.7, 11147.0], [70.8, 11147.0], [70.9, 11147.0], [71.0, 11148.0], [71.1, 11148.0], [71.2, 11148.0], [71.3, 11148.0], [71.4, 11148.0], [71.5, 11148.0], [71.6, 11149.0], [71.7, 11149.0], [71.8, 11149.0], [71.9, 11149.0], [72.0, 11150.0], [72.1, 11150.0], [72.2, 11151.0], [72.3, 11151.0], [72.4, 11151.0], [72.5, 11151.0], [72.6, 11151.0], [72.7, 11151.0], [72.8, 11151.0], [72.9, 11152.0], [73.0, 11152.0], [73.1, 11152.0], [73.2, 11152.0], [73.3, 11152.0], [73.4, 11153.0], [73.5, 11153.0], [73.6, 11153.0], [73.7, 11153.0], [73.8, 11153.0], [73.9, 11153.0], [74.0, 11154.0], [74.1, 11154.0], [74.2, 11154.0], [74.3, 11154.0], [74.4, 11154.0], [74.5, 11154.0], [74.6, 11154.0], [74.7, 11154.0], [74.8, 11155.0], [74.9, 11155.0], [75.0, 11156.0], [75.1, 11156.0], [75.2, 11156.0], [75.3, 11156.0], [75.4, 11156.0], [75.5, 11157.0], [75.6, 11157.0], [75.7, 11159.0], [75.8, 11159.0], [75.9, 11160.0], [76.0, 11160.0], [76.1, 11161.0], [76.2, 11162.0], [76.3, 11162.0], [76.4, 11163.0], [76.5, 11163.0], [76.6, 11163.0], [76.7, 11163.0], [76.8, 11163.0], [76.9, 11164.0], [77.0, 11164.0], [77.1, 11164.0], [77.2, 11165.0], [77.3, 11166.0], [77.4, 11166.0], [77.5, 11166.0], [77.6, 11166.0], [77.7, 11167.0], [77.8, 11167.0], [77.9, 11167.0], [78.0, 11167.0], [78.1, 11168.0], [78.2, 11168.0], [78.3, 11168.0], [78.4, 11169.0], [78.5, 11169.0], [78.6, 11169.0], [78.7, 11169.0], [78.8, 11170.0], [78.9, 11170.0], [79.0, 11170.0], [79.1, 11171.0], [79.2, 11171.0], [79.3, 11171.0], [79.4, 11171.0], [79.5, 11171.0], [79.6, 11172.0], [79.7, 11172.0], [79.8, 11172.0], [79.9, 11172.0], [80.0, 11172.0], [80.1, 11173.0], [80.2, 11173.0], [80.3, 11173.0], [80.4, 11173.0], [80.5, 11173.0], [80.6, 11173.0], [80.7, 11173.0], [80.8, 11174.0], [80.9, 11174.0], [81.0, 11174.0], [81.1, 11174.0], [81.2, 11174.0], [81.3, 11174.0], [81.4, 11174.0], [81.5, 11174.0], [81.6, 11174.0], [81.7, 11174.0], [81.8, 11175.0], [81.9, 11175.0], [82.0, 11175.0], [82.1, 11175.0], [82.2, 11175.0], [82.3, 11175.0], [82.4, 11175.0], [82.5, 11175.0], [82.6, 11175.0], [82.7, 11176.0], [82.8, 11176.0], [82.9, 11176.0], [83.0, 11176.0], [83.1, 11176.0], [83.2, 11176.0], [83.3, 11177.0], [83.4, 11177.0], [83.5, 11177.0], [83.6, 11177.0], [83.7, 11177.0], [83.8, 11178.0], [83.9, 11178.0], [84.0, 11178.0], [84.1, 11179.0], [84.2, 11179.0], [84.3, 11179.0], [84.4, 11180.0], [84.5, 11180.0], [84.6, 11180.0], [84.7, 11180.0], [84.8, 11180.0], [84.9, 11182.0], [85.0, 11183.0], [85.1, 11193.0], [85.2, 11194.0], [85.3, 11194.0], [85.4, 11194.0], [85.5, 11350.0], [85.6, 11350.0], [85.7, 11353.0], [85.8, 11353.0], [85.9, 11354.0], [86.0, 11354.0], [86.1, 11356.0], [86.2, 11358.0], [86.3, 11358.0], [86.4, 11360.0], [86.5, 11360.0], [86.6, 11362.0], [86.7, 11363.0], [86.8, 11363.0], [86.9, 11364.0], [87.0, 11364.0], [87.1, 11366.0], [87.2, 11366.0], [87.3, 11366.0], [87.4, 11367.0], [87.5, 11367.0], [87.6, 11367.0], [87.7, 11368.0], [87.8, 11368.0], [87.9, 11369.0], [88.0, 11369.0], [88.1, 11369.0], [88.2, 11369.0], [88.3, 11370.0], [88.4, 11370.0], [88.5, 11371.0], [88.6, 11372.0], [88.7, 11372.0], [88.8, 11373.0], [88.9, 11374.0], [89.0, 11377.0], [89.1, 11377.0], [89.2, 11380.0], [89.3, 11381.0], [89.4, 11382.0], [89.5, 11382.0], [89.6, 11383.0], [89.7, 11384.0], [89.8, 11385.0], [89.9, 11388.0], [90.0, 11393.0], [90.1, 11398.0], [90.2, 11400.0], [90.3, 19086.0], [90.4, 19086.0], [90.5, 19087.0], [90.6, 19088.0], [90.7, 19088.0], [90.8, 19088.0], [90.9, 19088.0], [91.0, 19089.0], [91.1, 19089.0], [91.2, 19089.0], [91.3, 19090.0], [91.4, 19090.0], [91.5, 19090.0], [91.6, 19090.0], [91.7, 19090.0], [91.8, 19092.0], [91.9, 19092.0], [92.0, 19092.0], [92.1, 19092.0], [92.2, 19093.0], [92.3, 19093.0], [92.4, 19093.0], [92.5, 19093.0], [92.6, 19093.0], [92.7, 19094.0], [92.8, 19094.0], [92.9, 19094.0], [93.0, 19094.0], [93.1, 19095.0], [93.2, 19096.0], [93.3, 19096.0], [93.4, 19096.0], [93.5, 19096.0], [93.6, 19096.0], [93.7, 19097.0], [93.8, 19098.0], [93.9, 19099.0], [94.0, 19100.0], [94.1, 19100.0], [94.2, 19100.0], [94.3, 19101.0], [94.4, 19102.0], [94.5, 19103.0], [94.6, 19103.0], [94.7, 19104.0], [94.8, 19104.0], [94.9, 19104.0], [95.0, 19105.0], [95.1, 19105.0], [95.2, 19105.0], [95.3, 19105.0], [95.4, 19105.0], [95.5, 19105.0], [95.6, 19105.0], [95.7, 19106.0], [95.8, 19108.0], [95.9, 19108.0], [96.0, 19108.0], [96.1, 19108.0], [96.2, 19108.0], [96.3, 19109.0], [96.4, 19112.0], [96.5, 19113.0], [96.6, 19113.0], [96.7, 19114.0], [96.8, 19115.0], [96.9, 19116.0], [97.0, 19123.0], [97.1, 31602.0], [97.2, 31750.0], [97.3, 31761.0], [97.4, 31784.0], [97.5, 31785.0], [97.6, 31903.0], [97.7, 31952.0], [97.8, 31979.0], [97.9, 32013.0], [98.0, 32041.0], [98.1, 32072.0], [98.2, 32087.0], [98.3, 32109.0], [98.4, 32182.0], [98.5, 32187.0], [98.6, 32242.0], [98.7, 32258.0], [98.8, 32270.0], [98.9, 32288.0], [99.0, 32367.0], [99.1, 32380.0], [99.2, 32404.0], [99.3, 32434.0], [99.4, 32445.0], [99.5, 32465.0], [99.6, 32486.0], [99.7, 32500.0], [99.8, 32525.0], [99.9, 32567.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[0.0, 36.0], [0.1, 37.0], [0.2, 37.0], [0.3, 37.0], [0.4, 39.0], [0.5, 39.0], [0.6, 39.0], [0.7, 39.0], [0.8, 39.0], [0.9, 39.0], [1.0, 40.0], [1.1, 40.0], [1.2, 40.0], [1.3, 40.0], [1.4, 40.0], [1.5, 40.0], [1.6, 40.0], [1.7, 40.0], [1.8, 41.0], [1.9, 41.0], [2.0, 41.0], [2.1, 41.0], [2.2, 41.0], [2.3, 41.0], [2.4, 41.0], [2.5, 41.0], [2.6, 41.0], [2.7, 41.0], [2.8, 41.0], [2.9, 41.0], [3.0, 41.0], [3.1, 41.0], [3.2, 41.0], [3.3, 41.0], [3.4, 41.0], [3.5, 41.0], [3.6, 41.0], [3.7, 42.0], [3.8, 42.0], [3.9, 42.0], [4.0, 42.0], [4.1, 42.0], [4.2, 42.0], [4.3, 42.0], [4.4, 42.0], [4.5, 42.0], [4.6, 42.0], [4.7, 42.0], [4.8, 42.0], [4.9, 42.0], [5.0, 42.0], [5.1, 42.0], [5.2, 42.0], [5.3, 42.0], [5.4, 42.0], [5.5, 42.0], [5.6, 42.0], [5.7, 42.0], [5.8, 42.0], [5.9, 43.0], [6.0, 43.0], [6.1, 43.0], [6.2, 43.0], [6.3, 43.0], [6.4, 43.0], [6.5, 43.0], [6.6, 43.0], [6.7, 43.0], [6.8, 43.0], [6.9, 43.0], [7.0, 43.0], [7.1, 43.0], [7.2, 43.0], [7.3, 43.0], [7.4, 43.0], [7.5, 43.0], [7.6, 43.0], [7.7, 43.0], [7.8, 43.0], [7.9, 43.0], [8.0, 43.0], [8.1, 43.0], [8.2, 43.0], [8.3, 43.0], [8.4, 43.0], [8.5, 43.0], [8.6, 43.0], [8.7, 44.0], [8.8, 44.0], [8.9, 44.0], [9.0, 44.0], [9.1, 44.0], [9.2, 44.0], [9.3, 44.0], [9.4, 44.0], [9.5, 44.0], [9.6, 44.0], [9.7, 44.0], [9.8, 44.0], [9.9, 44.0], [10.0, 44.0], [10.1, 44.0], [10.2, 44.0], [10.3, 44.0], [10.4, 44.0], [10.5, 44.0], [10.6, 44.0], [10.7, 44.0], [10.8, 44.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 44.0], [11.4, 44.0], [11.5, 44.0], [11.6, 44.0], [11.7, 44.0], [11.8, 44.0], [11.9, 44.0], [12.0, 44.0], [12.1, 44.0], [12.2, 44.0], [12.3, 44.0], [12.4, 44.0], [12.5, 44.0], [12.6, 44.0], [12.7, 45.0], [12.8, 45.0], [12.9, 45.0], [13.0, 45.0], [13.1, 45.0], [13.2, 45.0], [13.3, 45.0], [13.4, 45.0], [13.5, 45.0], [13.6, 45.0], [13.7, 45.0], [13.8, 45.0], [13.9, 45.0], [14.0, 45.0], [14.1, 45.0], [14.2, 45.0], [14.3, 45.0], [14.4, 45.0], [14.5, 45.0], [14.6, 45.0], [14.7, 45.0], [14.8, 45.0], [14.9, 45.0], [15.0, 45.0], [15.1, 45.0], [15.2, 45.0], [15.3, 45.0], [15.4, 45.0], [15.5, 45.0], [15.6, 45.0], [15.7, 45.0], [15.8, 45.0], [15.9, 45.0], [16.0, 45.0], [16.1, 45.0], [16.2, 45.0], [16.3, 45.0], [16.4, 45.0], [16.5, 45.0], [16.6, 45.0], [16.7, 45.0], [16.8, 46.0], [16.9, 46.0], [17.0, 46.0], [17.1, 46.0], [17.2, 46.0], [17.3, 46.0], [17.4, 46.0], [17.5, 46.0], [17.6, 46.0], [17.7, 46.0], [17.8, 46.0], [17.9, 46.0], [18.0, 46.0], [18.1, 46.0], [18.2, 46.0], [18.3, 46.0], [18.4, 46.0], [18.5, 46.0], [18.6, 46.0], [18.7, 46.0], [18.8, 46.0], [18.9, 46.0], [19.0, 46.0], [19.1, 46.0], [19.2, 46.0], [19.3, 46.0], [19.4, 46.0], [19.5, 46.0], [19.6, 46.0], [19.7, 46.0], [19.8, 46.0], [19.9, 46.0], [20.0, 46.0], [20.1, 46.0], [20.2, 46.0], [20.3, 47.0], [20.4, 47.0], [20.5, 47.0], [20.6, 47.0], [20.7, 47.0], [20.8, 47.0], [20.9, 47.0], [21.0, 47.0], [21.1, 47.0], [21.2, 47.0], [21.3, 47.0], [21.4, 47.0], [21.5, 47.0], [21.6, 47.0], [21.7, 47.0], [21.8, 47.0], [21.9, 47.0], [22.0, 47.0], [22.1, 47.0], [22.2, 47.0], [22.3, 47.0], [22.4, 47.0], [22.5, 47.0], [22.6, 47.0], [22.7, 47.0], [22.8, 47.0], [22.9, 47.0], [23.0, 47.0], [23.1, 47.0], [23.2, 47.0], [23.3, 47.0], [23.4, 47.0], [23.5, 48.0], [23.6, 48.0], [23.7, 48.0], [23.8, 48.0], [23.9, 48.0], [24.0, 48.0], [24.1, 48.0], [24.2, 48.0], [24.3, 48.0], [24.4, 48.0], [24.5, 48.0], [24.6, 48.0], [24.7, 48.0], [24.8, 48.0], [24.9, 48.0], [25.0, 48.0], [25.1, 48.0], [25.2, 48.0], [25.3, 48.0], [25.4, 48.0], [25.5, 48.0], [25.6, 48.0], [25.7, 48.0], [25.8, 48.0], [25.9, 48.0], [26.0, 48.0], [26.1, 48.0], [26.2, 48.0], [26.3, 48.0], [26.4, 48.0], [26.5, 48.0], [26.6, 48.0], [26.7, 48.0], [26.8, 48.0], [26.9, 48.0], [27.0, 48.0], [27.1, 48.0], [27.2, 48.0], [27.3, 48.0], [27.4, 48.0], [27.5, 48.0], [27.6, 48.0], [27.7, 48.0], [27.8, 48.0], [27.9, 48.0], [28.0, 48.0], [28.1, 48.0], [28.2, 48.0], [28.3, 49.0], [28.4, 49.0], [28.5, 49.0], [28.6, 49.0], [28.7, 49.0], [28.8, 49.0], [28.9, 49.0], [29.0, 49.0], [29.1, 49.0], [29.2, 49.0], [29.3, 49.0], [29.4, 49.0], [29.5, 49.0], [29.6, 49.0], [29.7, 49.0], [29.8, 49.0], [29.9, 49.0], [30.0, 49.0], [30.1, 49.0], [30.2, 49.0], [30.3, 49.0], [30.4, 49.0], [30.5, 49.0], [30.6, 49.0], [30.7, 49.0], [30.8, 49.0], [30.9, 49.0], [31.0, 49.0], [31.1, 49.0], [31.2, 49.0], [31.3, 49.0], [31.4, 49.0], [31.5, 49.0], [31.6, 49.0], [31.7, 49.0], [31.8, 49.0], [31.9, 49.0], [32.0, 49.0], [32.1, 49.0], [32.2, 49.0], [32.3, 49.0], [32.4, 49.0], [32.5, 49.0], [32.6, 49.0], [32.7, 49.0], [32.8, 49.0], [32.9, 49.0], [33.0, 50.0], [33.1, 50.0], [33.2, 50.0], [33.3, 50.0], [33.4, 50.0], [33.5, 50.0], [33.6, 50.0], [33.7, 50.0], [33.8, 50.0], [33.9, 50.0], [34.0, 50.0], [34.1, 50.0], [34.2, 50.0], [34.3, 50.0], [34.4, 50.0], [34.5, 50.0], [34.6, 50.0], [34.7, 50.0], [34.8, 50.0], [34.9, 50.0], [35.0, 50.0], [35.1, 50.0], [35.2, 50.0], [35.3, 50.0], [35.4, 50.0], [35.5, 50.0], [35.6, 50.0], [35.7, 50.0], [35.8, 50.0], [35.9, 50.0], [36.0, 50.0], [36.1, 50.0], [36.2, 50.0], [36.3, 50.0], [36.4, 50.0], [36.5, 50.0], [36.6, 50.0], [36.7, 50.0], [36.8, 50.0], [36.9, 50.0], [37.0, 50.0], [37.1, 50.0], [37.2, 50.0], [37.3, 50.0], [37.4, 50.0], [37.5, 50.0], [37.6, 50.0], [37.7, 50.0], [37.8, 50.0], [37.9, 50.0], [38.0, 50.0], [38.1, 51.0], [38.2, 51.0], [38.3, 51.0], [38.4, 51.0], [38.5, 51.0], [38.6, 51.0], [38.7, 51.0], [38.8, 51.0], [38.9, 51.0], [39.0, 51.0], [39.1, 51.0], [39.2, 51.0], [39.3, 51.0], [39.4, 51.0], [39.5, 51.0], [39.6, 51.0], [39.7, 51.0], [39.8, 51.0], [39.9, 51.0], [40.0, 51.0], [40.1, 51.0], [40.2, 51.0], [40.3, 51.0], [40.4, 51.0], [40.5, 51.0], [40.6, 51.0], [40.7, 51.0], [40.8, 51.0], [40.9, 51.0], [41.0, 51.0], [41.1, 51.0], [41.2, 51.0], [41.3, 51.0], [41.4, 51.0], [41.5, 51.0], [41.6, 51.0], [41.7, 51.0], [41.8, 51.0], [41.9, 51.0], [42.0, 51.0], [42.1, 51.0], [42.2, 52.0], [42.3, 52.0], [42.4, 52.0], [42.5, 52.0], [42.6, 52.0], [42.7, 52.0], [42.8, 52.0], [42.9, 52.0], [43.0, 52.0], [43.1, 52.0], [43.2, 52.0], [43.3, 52.0], [43.4, 52.0], [43.5, 52.0], [43.6, 52.0], [43.7, 52.0], [43.8, 52.0], [43.9, 52.0], [44.0, 52.0], [44.1, 52.0], [44.2, 52.0], [44.3, 52.0], [44.4, 52.0], [44.5, 52.0], [44.6, 52.0], [44.7, 52.0], [44.8, 52.0], [44.9, 52.0], [45.0, 52.0], [45.1, 52.0], [45.2, 52.0], [45.3, 52.0], [45.4, 52.0], [45.5, 52.0], [45.6, 52.0], [45.7, 52.0], [45.8, 52.0], [45.9, 52.0], [46.0, 52.0], [46.1, 52.0], [46.2, 52.0], [46.3, 52.0], [46.4, 52.0], [46.5, 52.0], [46.6, 52.0], [46.7, 52.0], [46.8, 52.0], [46.9, 53.0], [47.0, 53.0], [47.1, 53.0], [47.2, 53.0], [47.3, 53.0], [47.4, 53.0], [47.5, 53.0], [47.6, 53.0], [47.7, 53.0], [47.8, 53.0], [47.9, 53.0], [48.0, 53.0], [48.1, 53.0], [48.2, 53.0], [48.3, 53.0], [48.4, 53.0], [48.5, 53.0], [48.6, 53.0], [48.7, 53.0], [48.8, 53.0], [48.9, 53.0], [49.0, 53.0], [49.1, 53.0], [49.2, 53.0], [49.3, 53.0], [49.4, 53.0], [49.5, 53.0], [49.6, 53.0], [49.7, 53.0], [49.8, 53.0], [49.9, 53.0], [50.0, 53.0], [50.1, 53.0], [50.2, 53.0], [50.3, 53.0], [50.4, 53.0], [50.5, 53.0], [50.6, 53.0], [50.7, 53.0], [50.8, 53.0], [50.9, 53.0], [51.0, 54.0], [51.1, 54.0], [51.2, 54.0], [51.3, 54.0], [51.4, 54.0], [51.5, 54.0], [51.6, 54.0], [51.7, 54.0], [51.8, 54.0], [51.9, 54.0], [52.0, 54.0], [52.1, 54.0], [52.2, 54.0], [52.3, 54.0], [52.4, 54.0], [52.5, 54.0], [52.6, 54.0], [52.7, 54.0], [52.8, 54.0], [52.9, 54.0], [53.0, 54.0], [53.1, 54.0], [53.2, 54.0], [53.3, 54.0], [53.4, 54.0], [53.5, 54.0], [53.6, 54.0], [53.7, 54.0], [53.8, 54.0], [53.9, 54.0], [54.0, 54.0], [54.1, 54.0], [54.2, 54.0], [54.3, 54.0], [54.4, 54.0], [54.5, 54.0], [54.6, 55.0], [54.7, 55.0], [54.8, 55.0], [54.9, 55.0], [55.0, 55.0], [55.1, 55.0], [55.2, 55.0], [55.3, 55.0], [55.4, 55.0], [55.5, 55.0], [55.6, 55.0], [55.7, 55.0], [55.8, 55.0], [55.9, 55.0], [56.0, 55.0], [56.1, 55.0], [56.2, 55.0], [56.3, 55.0], [56.4, 55.0], [56.5, 55.0], [56.6, 55.0], [56.7, 55.0], [56.8, 55.0], [56.9, 56.0], [57.0, 56.0], [57.1, 56.0], [57.2, 56.0], [57.3, 56.0], [57.4, 56.0], [57.5, 56.0], [57.6, 56.0], [57.7, 56.0], [57.8, 56.0], [57.9, 56.0], [58.0, 56.0], [58.1, 56.0], [58.2, 56.0], [58.3, 56.0], [58.4, 56.0], [58.5, 56.0], [58.6, 56.0], [58.7, 56.0], [58.8, 56.0], [58.9, 56.0], [59.0, 56.0], [59.1, 57.0], [59.2, 57.0], [59.3, 57.0], [59.4, 57.0], [59.5, 57.0], [59.6, 57.0], [59.7, 57.0], [59.8, 57.0], [59.9, 57.0], [60.0, 57.0], [60.1, 57.0], [60.2, 57.0], [60.3, 57.0], [60.4, 57.0], [60.5, 57.0], [60.6, 57.0], [60.7, 57.0], [60.8, 57.0], [60.9, 57.0], [61.0, 57.0], [61.1, 57.0], [61.2, 57.0], [61.3, 57.0], [61.4, 57.0], [61.5, 57.0], [61.6, 57.0], [61.7, 57.0], [61.8, 57.0], [61.9, 57.0], [62.0, 57.0], [62.1, 58.0], [62.2, 58.0], [62.3, 58.0], [62.4, 58.0], [62.5, 58.0], [62.6, 58.0], [62.7, 58.0], [62.8, 58.0], [62.9, 58.0], [63.0, 58.0], [63.1, 58.0], [63.2, 58.0], [63.3, 58.0], [63.4, 58.0], [63.5, 58.0], [63.6, 58.0], [63.7, 58.0], [63.8, 58.0], [63.9, 58.0], [64.0, 59.0], [64.1, 59.0], [64.2, 59.0], [64.3, 59.0], [64.4, 59.0], [64.5, 59.0], [64.6, 59.0], [64.7, 59.0], [64.8, 59.0], [64.9, 59.0], [65.0, 60.0], [65.1, 60.0], [65.2, 60.0], [65.3, 60.0], [65.4, 60.0], [65.5, 60.0], [65.6, 60.0], [65.7, 60.0], [65.8, 60.0], [65.9, 60.0], [66.0, 60.0], [66.1, 60.0], [66.2, 60.0], [66.3, 60.0], [66.4, 60.0], [66.5, 60.0], [66.6, 60.0], [66.7, 60.0], [66.8, 60.0], [66.9, 60.0], [67.0, 60.0], [67.1, 60.0], [67.2, 60.0], [67.3, 60.0], [67.4, 60.0], [67.5, 61.0], [67.6, 61.0], [67.7, 61.0], [67.8, 61.0], [67.9, 61.0], [68.0, 61.0], [68.1, 61.0], [68.2, 61.0], [68.3, 61.0], [68.4, 61.0], [68.5, 61.0], [68.6, 61.0], [68.7, 61.0], [68.8, 61.0], [68.9, 61.0], [69.0, 61.0], [69.1, 61.0], [69.2, 61.0], [69.3, 61.0], [69.4, 61.0], [69.5, 61.0], [69.6, 61.0], [69.7, 62.0], [69.8, 62.0], [69.9, 62.0], [70.0, 62.0], [70.1, 62.0], [70.2, 62.0], [70.3, 62.0], [70.4, 62.0], [70.5, 62.0], [70.6, 62.0], [70.7, 62.0], [70.8, 62.0], [70.9, 62.0], [71.0, 62.0], [71.1, 62.0], [71.2, 62.0], [71.3, 62.0], [71.4, 63.0], [71.5, 63.0], [71.6, 63.0], [71.7, 63.0], [71.8, 63.0], [71.9, 63.0], [72.0, 64.0], [72.1, 64.0], [72.2, 64.0], [72.3, 64.0], [72.4, 64.0], [72.5, 65.0], [72.6, 65.0], [72.7, 65.0], [72.8, 65.0], [72.9, 65.0], [73.0, 65.0], [73.1, 65.0], [73.2, 65.0], [73.3, 65.0], [73.4, 65.0], [73.5, 65.0], [73.6, 66.0], [73.7, 66.0], [73.8, 66.0], [73.9, 66.0], [74.0, 66.0], [74.1, 66.0], [74.2, 67.0], [74.3, 67.0], [74.4, 67.0], [74.5, 67.0], [74.6, 68.0], [74.7, 68.0], [74.8, 68.0], [74.9, 68.0], [75.0, 68.0], [75.1, 68.0], [75.2, 69.0], [75.3, 69.0], [75.4, 69.0], [75.5, 69.0], [75.6, 69.0], [75.7, 69.0], [75.8, 69.0], [75.9, 69.0], [76.0, 70.0], [76.1, 70.0], [76.2, 70.0], [76.3, 70.0], [76.4, 70.0], [76.5, 70.0], [76.6, 70.0], [76.7, 71.0], [76.8, 71.0], [76.9, 71.0], [77.0, 71.0], [77.1, 71.0], [77.2, 71.0], [77.3, 71.0], [77.4, 71.0], [77.5, 71.0], [77.6, 71.0], [77.7, 71.0], [77.8, 71.0], [77.9, 72.0], [78.0, 72.0], [78.1, 73.0], [78.2, 73.0], [78.3, 73.0], [78.4, 73.0], [78.5, 73.0], [78.6, 73.0], [78.7, 73.0], [78.8, 73.0], [78.9, 73.0], [79.0, 73.0], [79.1, 73.0], [79.2, 73.0], [79.3, 73.0], [79.4, 74.0], [79.5, 74.0], [79.6, 74.0], [79.7, 74.0], [79.8, 74.0], [79.9, 74.0], [80.0, 75.0], [80.1, 75.0], [80.2, 75.0], [80.3, 75.0], [80.4, 75.0], [80.5, 75.0], [80.6, 75.0], [80.7, 75.0], [80.8, 76.0], [80.9, 76.0], [81.0, 76.0], [81.1, 76.0], [81.2, 76.0], [81.3, 76.0], [81.4, 76.0], [81.5, 76.0], [81.6, 76.0], [81.7, 76.0], [81.8, 76.0], [81.9, 76.0], [82.0, 76.0], [82.1, 76.0], [82.2, 76.0], [82.3, 76.0], [82.4, 76.0], [82.5, 77.0], [82.6, 77.0], [82.7, 77.0], [82.8, 77.0], [82.9, 77.0], [83.0, 77.0], [83.1, 77.0], [83.2, 77.0], [83.3, 78.0], [83.4, 78.0], [83.5, 78.0], [83.6, 78.0], [83.7, 78.0], [83.8, 78.0], [83.9, 79.0], [84.0, 79.0], [84.1, 79.0], [84.2, 79.0], [84.3, 79.0], [84.4, 79.0], [84.5, 79.0], [84.6, 79.0], [84.7, 79.0], [84.8, 79.0], [84.9, 79.0], [85.0, 80.0], [85.1, 80.0], [85.2, 80.0], [85.3, 80.0], [85.4, 81.0], [85.5, 81.0], [85.6, 82.0], [85.7, 82.0], [85.8, 82.0], [85.9, 82.0], [86.0, 82.0], [86.1, 82.0], [86.2, 82.0], [86.3, 82.0], [86.4, 82.0], [86.5, 82.0], [86.6, 82.0], [86.7, 83.0], [86.8, 83.0], [86.9, 84.0], [87.0, 84.0], [87.1, 84.0], [87.2, 84.0], [87.3, 84.0], [87.4, 84.0], [87.5, 84.0], [87.6, 84.0], [87.7, 84.0], [87.8, 84.0], [87.9, 85.0], [88.0, 85.0], [88.1, 85.0], [88.2, 85.0], [88.3, 85.0], [88.4, 85.0], [88.5, 85.0], [88.6, 85.0], [88.7, 86.0], [88.8, 86.0], [88.9, 86.0], [89.0, 86.0], [89.1, 86.0], [89.2, 87.0], [89.3, 87.0], [89.4, 87.0], [89.5, 87.0], [89.6, 87.0], [89.7, 87.0], [89.8, 87.0], [89.9, 87.0], [90.0, 87.0], [90.1, 88.0], [90.2, 88.0], [90.3, 88.0], [90.4, 88.0], [90.5, 88.0], [90.6, 88.0], [90.7, 88.0], [90.8, 89.0], [90.9, 89.0], [91.0, 89.0], [91.1, 89.0], [91.2, 89.0], [91.3, 89.0], [91.4, 90.0], [91.5, 90.0], [91.6, 90.0], [91.7, 90.0], [91.8, 90.0], [91.9, 90.0], [92.0, 90.0], [92.1, 90.0], [92.2, 90.0], [92.3, 90.0], [92.4, 90.0], [92.5, 90.0], [92.6, 90.0], [92.7, 90.0], [92.8, 90.0], [92.9, 90.0], [93.0, 90.0], [93.1, 91.0], [93.2, 91.0], [93.3, 91.0], [93.4, 91.0], [93.5, 91.0], [93.6, 91.0], [93.7, 91.0], [93.8, 91.0], [93.9, 91.0], [94.0, 91.0], [94.1, 91.0], [94.2, 91.0], [94.3, 91.0], [94.4, 91.0], [94.5, 91.0], [94.6, 91.0], [94.7, 91.0], [94.8, 91.0], [94.9, 91.0], [95.0, 92.0], [95.1, 92.0], [95.2, 92.0], [95.3, 92.0], [95.4, 92.0], [95.5, 92.0], [95.6, 92.0], [95.7, 93.0], [95.8, 93.0], [95.9, 93.0], [96.0, 93.0], [96.1, 93.0], [96.2, 93.0], [96.3, 94.0], [96.4, 94.0], [96.5, 94.0], [96.6, 95.0], [96.7, 95.0], [96.8, 95.0], [96.9, 95.0], [97.0, 96.0], [97.1, 97.0], [97.2, 98.0], [97.3, 99.0], [97.4, 99.0], [97.5, 100.0], [97.6, 100.0], [97.7, 100.0], [97.8, 102.0], [97.9, 103.0], [98.0, 103.0], [98.1, 103.0], [98.2, 103.0], [98.3, 103.0], [98.4, 103.0], [98.5, 103.0], [98.6, 103.0], [98.7, 103.0], [98.8, 104.0], [98.9, 106.0], [99.0, 108.0], [99.1, 108.0], [99.2, 110.0], [99.3, 178.0], [99.4, 344.0], [99.5, 365.0], [99.6, 370.0], [99.7, 380.0], [99.8, 380.0], [99.9, 386.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 36.0], [0.1, 36.0], [0.2, 36.0], [0.3, 36.0], [0.4, 37.0], [0.5, 37.0], [0.6, 37.0], [0.7, 37.0], [0.8, 37.0], [0.9, 38.0], [1.0, 38.0], [1.1, 38.0], [1.2, 38.0], [1.3, 38.0], [1.4, 39.0], [1.5, 39.0], [1.6, 39.0], [1.7, 39.0], [1.8, 39.0], [1.9, 39.0], [2.0, 39.0], [2.1, 39.0], [2.2, 39.0], [2.3, 39.0], [2.4, 39.0], [2.5, 39.0], [2.6, 39.0], [2.7, 39.0], [2.8, 39.0], [2.9, 40.0], [3.0, 40.0], [3.1, 40.0], [3.2, 40.0], [3.3, 40.0], [3.4, 40.0], [3.5, 40.0], [3.6, 40.0], [3.7, 40.0], [3.8, 40.0], [3.9, 40.0], [4.0, 40.0], [4.1, 40.0], [4.2, 40.0], [4.3, 40.0], [4.4, 40.0], [4.5, 40.0], [4.6, 40.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 41.0], [5.3, 41.0], [5.4, 41.0], [5.5, 41.0], [5.6, 41.0], [5.7, 41.0], [5.8, 41.0], [5.9, 41.0], [6.0, 41.0], [6.1, 41.0], [6.2, 41.0], [6.3, 41.0], [6.4, 41.0], [6.5, 41.0], [6.6, 41.0], [6.7, 41.0], [6.8, 41.0], [6.9, 41.0], [7.0, 41.0], [7.1, 41.0], [7.2, 41.0], [7.3, 41.0], [7.4, 41.0], [7.5, 41.0], [7.6, 41.0], [7.7, 41.0], [7.8, 41.0], [7.9, 41.0], [8.0, 41.0], [8.1, 41.0], [8.2, 41.0], [8.3, 41.0], [8.4, 42.0], [8.5, 42.0], [8.6, 42.0], [8.7, 42.0], [8.8, 42.0], [8.9, 42.0], [9.0, 42.0], [9.1, 42.0], [9.2, 42.0], [9.3, 42.0], [9.4, 42.0], [9.5, 42.0], [9.6, 42.0], [9.7, 42.0], [9.8, 42.0], [9.9, 42.0], [10.0, 42.0], [10.1, 42.0], [10.2, 42.0], [10.3, 42.0], [10.4, 42.0], [10.5, 42.0], [10.6, 42.0], [10.7, 42.0], [10.8, 42.0], [10.9, 42.0], [11.0, 42.0], [11.1, 42.0], [11.2, 42.0], [11.3, 43.0], [11.4, 43.0], [11.5, 43.0], [11.6, 43.0], [11.7, 43.0], [11.8, 43.0], [11.9, 43.0], [12.0, 43.0], [12.1, 43.0], [12.2, 43.0], [12.3, 43.0], [12.4, 43.0], [12.5, 43.0], [12.6, 43.0], [12.7, 43.0], [12.8, 43.0], [12.9, 43.0], [13.0, 43.0], [13.1, 43.0], [13.2, 43.0], [13.3, 43.0], [13.4, 43.0], [13.5, 43.0], [13.6, 43.0], [13.7, 43.0], [13.8, 43.0], [13.9, 43.0], [14.0, 43.0], [14.1, 43.0], [14.2, 43.0], [14.3, 43.0], [14.4, 43.0], [14.5, 43.0], [14.6, 43.0], [14.7, 43.0], [14.8, 44.0], [14.9, 44.0], [15.0, 44.0], [15.1, 44.0], [15.2, 44.0], [15.3, 44.0], [15.4, 44.0], [15.5, 44.0], [15.6, 44.0], [15.7, 44.0], [15.8, 44.0], [15.9, 44.0], [16.0, 44.0], [16.1, 44.0], [16.2, 44.0], [16.3, 44.0], [16.4, 44.0], [16.5, 44.0], [16.6, 44.0], [16.7, 44.0], [16.8, 44.0], [16.9, 44.0], [17.0, 44.0], [17.1, 44.0], [17.2, 44.0], [17.3, 44.0], [17.4, 44.0], [17.5, 44.0], [17.6, 44.0], [17.7, 45.0], [17.8, 45.0], [17.9, 45.0], [18.0, 45.0], [18.1, 45.0], [18.2, 45.0], [18.3, 45.0], [18.4, 45.0], [18.5, 45.0], [18.6, 45.0], [18.7, 45.0], [18.8, 45.0], [18.9, 45.0], [19.0, 45.0], [19.1, 45.0], [19.2, 45.0], [19.3, 45.0], [19.4, 45.0], [19.5, 45.0], [19.6, 45.0], [19.7, 45.0], [19.8, 45.0], [19.9, 45.0], [20.0, 45.0], [20.1, 45.0], [20.2, 45.0], [20.3, 46.0], [20.4, 46.0], [20.5, 46.0], [20.6, 46.0], [20.7, 46.0], [20.8, 46.0], [20.9, 46.0], [21.0, 46.0], [21.1, 46.0], [21.2, 46.0], [21.3, 46.0], [21.4, 46.0], [21.5, 46.0], [21.6, 46.0], [21.7, 46.0], [21.8, 46.0], [21.9, 46.0], [22.0, 46.0], [22.1, 46.0], [22.2, 46.0], [22.3, 46.0], [22.4, 46.0], [22.5, 46.0], [22.6, 46.0], [22.7, 46.0], [22.8, 46.0], [22.9, 46.0], [23.0, 46.0], [23.1, 46.0], [23.2, 46.0], [23.3, 46.0], [23.4, 46.0], [23.5, 47.0], [23.6, 47.0], [23.7, 47.0], [23.8, 47.0], [23.9, 47.0], [24.0, 47.0], [24.1, 47.0], [24.2, 47.0], [24.3, 47.0], [24.4, 47.0], [24.5, 47.0], [24.6, 47.0], [24.7, 47.0], [24.8, 47.0], [24.9, 47.0], [25.0, 47.0], [25.1, 47.0], [25.2, 47.0], [25.3, 47.0], [25.4, 47.0], [25.5, 47.0], [25.6, 47.0], [25.7, 47.0], [25.8, 48.0], [25.9, 48.0], [26.0, 48.0], [26.1, 48.0], [26.2, 48.0], [26.3, 48.0], [26.4, 48.0], [26.5, 48.0], [26.6, 48.0], [26.7, 48.0], [26.8, 48.0], [26.9, 48.0], [27.0, 48.0], [27.1, 48.0], [27.2, 48.0], [27.3, 48.0], [27.4, 48.0], [27.5, 48.0], [27.6, 48.0], [27.7, 48.0], [27.8, 48.0], [27.9, 48.0], [28.0, 48.0], [28.1, 48.0], [28.2, 48.0], [28.3, 49.0], [28.4, 49.0], [28.5, 49.0], [28.6, 49.0], [28.7, 49.0], [28.8, 49.0], [28.9, 49.0], [29.0, 49.0], [29.1, 49.0], [29.2, 49.0], [29.3, 49.0], [29.4, 49.0], [29.5, 49.0], [29.6, 49.0], [29.7, 49.0], [29.8, 49.0], [29.9, 49.0], [30.0, 50.0], [30.1, 50.0], [30.2, 50.0], [30.3, 50.0], [30.4, 50.0], [30.5, 50.0], [30.6, 50.0], [30.7, 50.0], [30.8, 50.0], [30.9, 50.0], [31.0, 50.0], [31.1, 50.0], [31.2, 51.0], [31.3, 51.0], [31.4, 51.0], [31.5, 51.0], [31.6, 51.0], [31.7, 51.0], [31.8, 51.0], [31.9, 51.0], [32.0, 52.0], [32.1, 52.0], [32.2, 52.0], [32.3, 52.0], [32.4, 52.0], [32.5, 52.0], [32.6, 52.0], [32.7, 52.0], [32.8, 52.0], [32.9, 52.0], [33.0, 53.0], [33.1, 53.0], [33.2, 53.0], [33.3, 53.0], [33.4, 53.0], [33.5, 53.0], [33.6, 53.0], [33.7, 53.0], [33.8, 53.0], [33.9, 54.0], [34.0, 54.0], [34.1, 54.0], [34.2, 54.0], [34.3, 54.0], [34.4, 54.0], [34.5, 54.0], [34.6, 54.0], [34.7, 54.0], [34.8, 54.0], [34.9, 55.0], [35.0, 55.0], [35.1, 55.0], [35.2, 55.0], [35.3, 55.0], [35.4, 55.0], [35.5, 55.0], [35.6, 55.0], [35.7, 55.0], [35.8, 55.0], [35.9, 56.0], [36.0, 56.0], [36.1, 56.0], [36.2, 56.0], [36.3, 56.0], [36.4, 56.0], [36.5, 56.0], [36.6, 56.0], [36.7, 56.0], [36.8, 56.0], [36.9, 56.0], [37.0, 56.0], [37.1, 57.0], [37.2, 57.0], [37.3, 57.0], [37.4, 57.0], [37.5, 57.0], [37.6, 57.0], [37.7, 57.0], [37.8, 57.0], [37.9, 57.0], [38.0, 57.0], [38.1, 57.0], [38.2, 57.0], [38.3, 57.0], [38.4, 58.0], [38.5, 58.0], [38.6, 58.0], [38.7, 58.0], [38.8, 58.0], [38.9, 58.0], [39.0, 58.0], [39.1, 59.0], [39.2, 59.0], [39.3, 59.0], [39.4, 59.0], [39.5, 59.0], [39.6, 59.0], [39.7, 59.0], [39.8, 59.0], [39.9, 59.0], [40.0, 59.0], [40.1, 59.0], [40.2, 59.0], [40.3, 59.0], [40.4, 59.0], [40.5, 59.0], [40.6, 60.0], [40.7, 60.0], [40.8, 60.0], [40.9, 60.0], [41.0, 60.0], [41.1, 60.0], [41.2, 60.0], [41.3, 60.0], [41.4, 60.0], [41.5, 60.0], [41.6, 60.0], [41.7, 61.0], [41.8, 61.0], [41.9, 61.0], [42.0, 61.0], [42.1, 61.0], [42.2, 61.0], [42.3, 61.0], [42.4, 61.0], [42.5, 61.0], [42.6, 61.0], [42.7, 61.0], [42.8, 61.0], [42.9, 61.0], [43.0, 61.0], [43.1, 61.0], [43.2, 61.0], [43.3, 61.0], [43.4, 61.0], [43.5, 62.0], [43.6, 62.0], [43.7, 62.0], [43.8, 62.0], [43.9, 62.0], [44.0, 62.0], [44.1, 62.0], [44.2, 62.0], [44.3, 62.0], [44.4, 62.0], [44.5, 62.0], [44.6, 62.0], [44.7, 63.0], [44.8, 63.0], [44.9, 63.0], [45.0, 63.0], [45.1, 63.0], [45.2, 63.0], [45.3, 63.0], [45.4, 63.0], [45.5, 63.0], [45.6, 63.0], [45.7, 63.0], [45.8, 63.0], [45.9, 63.0], [46.0, 63.0], [46.1, 63.0], [46.2, 63.0], [46.3, 63.0], [46.4, 63.0], [46.5, 63.0], [46.6, 63.0], [46.7, 63.0], [46.8, 63.0], [46.9, 63.0], [47.0, 64.0], [47.1, 64.0], [47.2, 64.0], [47.3, 64.0], [47.4, 64.0], [47.5, 64.0], [47.6, 64.0], [47.7, 64.0], [47.8, 64.0], [47.9, 64.0], [48.0, 64.0], [48.1, 64.0], [48.2, 64.0], [48.3, 64.0], [48.4, 64.0], [48.5, 64.0], [48.6, 64.0], [48.7, 64.0], [48.8, 64.0], [48.9, 64.0], [49.0, 64.0], [49.1, 64.0], [49.2, 64.0], [49.3, 64.0], [49.4, 64.0], [49.5, 64.0], [49.6, 64.0], [49.7, 64.0], [49.8, 64.0], [49.9, 64.0], [50.0, 64.0], [50.1, 65.0], [50.2, 65.0], [50.3, 65.0], [50.4, 65.0], [50.5, 65.0], [50.6, 65.0], [50.7, 65.0], [50.8, 65.0], [50.9, 65.0], [51.0, 65.0], [51.1, 65.0], [51.2, 65.0], [51.3, 65.0], [51.4, 65.0], [51.5, 65.0], [51.6, 65.0], [51.7, 65.0], [51.8, 65.0], [51.9, 65.0], [52.0, 65.0], [52.1, 65.0], [52.2, 65.0], [52.3, 65.0], [52.4, 66.0], [52.5, 66.0], [52.6, 66.0], [52.7, 66.0], [52.8, 66.0], [52.9, 66.0], [53.0, 66.0], [53.1, 66.0], [53.2, 66.0], [53.3, 66.0], [53.4, 66.0], [53.5, 66.0], [53.6, 66.0], [53.7, 66.0], [53.8, 66.0], [53.9, 66.0], [54.0, 66.0], [54.1, 66.0], [54.2, 67.0], [54.3, 67.0], [54.4, 67.0], [54.5, 67.0], [54.6, 67.0], [54.7, 67.0], [54.8, 67.0], [54.9, 67.0], [55.0, 67.0], [55.1, 67.0], [55.2, 67.0], [55.3, 67.0], [55.4, 67.0], [55.5, 67.0], [55.6, 67.0], [55.7, 68.0], [55.8, 68.0], [55.9, 68.0], [56.0, 68.0], [56.1, 68.0], [56.2, 68.0], [56.3, 68.0], [56.4, 68.0], [56.5, 68.0], [56.6, 68.0], [56.7, 68.0], [56.8, 68.0], [56.9, 68.0], [57.0, 68.0], [57.1, 68.0], [57.2, 68.0], [57.3, 68.0], [57.4, 68.0], [57.5, 69.0], [57.6, 69.0], [57.7, 69.0], [57.8, 69.0], [57.9, 69.0], [58.0, 69.0], [58.1, 69.0], [58.2, 69.0], [58.3, 69.0], [58.4, 69.0], [58.5, 70.0], [58.6, 70.0], [58.7, 70.0], [58.8, 70.0], [58.9, 70.0], [59.0, 70.0], [59.1, 70.0], [59.2, 70.0], [59.3, 70.0], [59.4, 70.0], [59.5, 70.0], [59.6, 70.0], [59.7, 70.0], [59.8, 70.0], [59.9, 71.0], [60.0, 71.0], [60.1, 71.0], [60.2, 71.0], [60.3, 71.0], [60.4, 71.0], [60.5, 71.0], [60.6, 71.0], [60.7, 71.0], [60.8, 71.0], [60.9, 71.0], [61.0, 71.0], [61.1, 71.0], [61.2, 71.0], [61.3, 72.0], [61.4, 72.0], [61.5, 72.0], [61.6, 72.0], [61.7, 72.0], [61.8, 72.0], [61.9, 72.0], [62.0, 72.0], [62.1, 72.0], [62.2, 72.0], [62.3, 72.0], [62.4, 72.0], [62.5, 72.0], [62.6, 72.0], [62.7, 73.0], [62.8, 73.0], [62.9, 73.0], [63.0, 73.0], [63.1, 73.0], [63.2, 73.0], [63.3, 73.0], [63.4, 73.0], [63.5, 73.0], [63.6, 73.0], [63.7, 73.0], [63.8, 74.0], [63.9, 74.0], [64.0, 74.0], [64.1, 74.0], [64.2, 74.0], [64.3, 74.0], [64.4, 74.0], [64.5, 74.0], [64.6, 74.0], [64.7, 74.0], [64.8, 75.0], [64.9, 75.0], [65.0, 75.0], [65.1, 75.0], [65.2, 75.0], [65.3, 75.0], [65.4, 76.0], [65.5, 76.0], [65.6, 76.0], [65.7, 76.0], [65.8, 77.0], [65.9, 77.0], [66.0, 77.0], [66.1, 77.0], [66.2, 77.0], [66.3, 78.0], [66.4, 78.0], [66.5, 78.0], [66.6, 78.0], [66.7, 78.0], [66.8, 78.0], [66.9, 78.0], [67.0, 78.0], [67.1, 78.0], [67.2, 78.0], [67.3, 78.0], [67.4, 79.0], [67.5, 79.0], [67.6, 79.0], [67.7, 79.0], [67.8, 79.0], [67.9, 79.0], [68.0, 79.0], [68.1, 79.0], [68.2, 79.0], [68.3, 79.0], [68.4, 79.0], [68.5, 79.0], [68.6, 80.0], [68.7, 80.0], [68.8, 80.0], [68.9, 80.0], [69.0, 80.0], [69.1, 80.0], [69.2, 80.0], [69.3, 80.0], [69.4, 80.0], [69.5, 80.0], [69.6, 80.0], [69.7, 80.0], [69.8, 80.0], [69.9, 81.0], [70.0, 81.0], [70.1, 81.0], [70.2, 81.0], [70.3, 81.0], [70.4, 81.0], [70.5, 81.0], [70.6, 81.0], [70.7, 82.0], [70.8, 82.0], [70.9, 82.0], [71.0, 82.0], [71.1, 82.0], [71.2, 82.0], [71.3, 82.0], [71.4, 82.0], [71.5, 82.0], [71.6, 82.0], [71.7, 83.0], [71.8, 83.0], [71.9, 83.0], [72.0, 83.0], [72.1, 83.0], [72.2, 83.0], [72.3, 83.0], [72.4, 83.0], [72.5, 83.0], [72.6, 83.0], [72.7, 84.0], [72.8, 84.0], [72.9, 84.0], [73.0, 84.0], [73.1, 84.0], [73.2, 84.0], [73.3, 84.0], [73.4, 84.0], [73.5, 84.0], [73.6, 84.0], [73.7, 85.0], [73.8, 85.0], [73.9, 85.0], [74.0, 85.0], [74.1, 85.0], [74.2, 86.0], [74.3, 86.0], [74.4, 86.0], [74.5, 86.0], [74.6, 86.0], [74.7, 87.0], [74.8, 87.0], [74.9, 87.0], [75.0, 87.0], [75.1, 87.0], [75.2, 87.0], [75.3, 87.0], [75.4, 87.0], [75.5, 87.0], [75.6, 88.0], [75.7, 88.0], [75.8, 88.0], [75.9, 88.0], [76.0, 88.0], [76.1, 88.0], [76.2, 88.0], [76.3, 88.0], [76.4, 88.0], [76.5, 88.0], [76.6, 88.0], [76.7, 88.0], [76.8, 88.0], [76.9, 89.0], [77.0, 89.0], [77.1, 89.0], [77.2, 89.0], [77.3, 89.0], [77.4, 89.0], [77.5, 89.0], [77.6, 89.0], [77.7, 89.0], [77.8, 89.0], [77.9, 89.0], [78.0, 89.0], [78.1, 90.0], [78.2, 90.0], [78.3, 90.0], [78.4, 90.0], [78.5, 90.0], [78.6, 90.0], [78.7, 90.0], [78.8, 90.0], [78.9, 90.0], [79.0, 90.0], [79.1, 90.0], [79.2, 90.0], [79.3, 90.0], [79.4, 91.0], [79.5, 91.0], [79.6, 91.0], [79.7, 91.0], [79.8, 91.0], [79.9, 91.0], [80.0, 91.0], [80.1, 91.0], [80.2, 91.0], [80.3, 91.0], [80.4, 91.0], [80.5, 91.0], [80.6, 91.0], [80.7, 91.0], [80.8, 92.0], [80.9, 92.0], [81.0, 92.0], [81.1, 92.0], [81.2, 92.0], [81.3, 92.0], [81.4, 92.0], [81.5, 92.0], [81.6, 92.0], [81.7, 92.0], [81.8, 92.0], [81.9, 93.0], [82.0, 93.0], [82.1, 93.0], [82.2, 93.0], [82.3, 93.0], [82.4, 93.0], [82.5, 93.0], [82.6, 93.0], [82.7, 93.0], [82.8, 93.0], [82.9, 93.0], [83.0, 94.0], [83.1, 94.0], [83.2, 94.0], [83.3, 94.0], [83.4, 94.0], [83.5, 94.0], [83.6, 94.0], [83.7, 95.0], [83.8, 95.0], [83.9, 95.0], [84.0, 95.0], [84.1, 95.0], [84.2, 95.0], [84.3, 95.0], [84.4, 95.0], [84.5, 95.0], [84.6, 96.0], [84.7, 96.0], [84.8, 96.0], [84.9, 96.0], [85.0, 96.0], [85.1, 96.0], [85.2, 96.0], [85.3, 96.0], [85.4, 96.0], [85.5, 97.0], [85.6, 97.0], [85.7, 97.0], [85.8, 97.0], [85.9, 97.0], [86.0, 97.0], [86.1, 97.0], [86.2, 97.0], [86.3, 98.0], [86.4, 98.0], [86.5, 98.0], [86.6, 98.0], [86.7, 98.0], [86.8, 98.0], [86.9, 98.0], [87.0, 99.0], [87.1, 99.0], [87.2, 99.0], [87.3, 99.0], [87.4, 99.0], [87.5, 99.0], [87.6, 99.0], [87.7, 99.0], [87.8, 100.0], [87.9, 100.0], [88.0, 100.0], [88.1, 100.0], [88.2, 100.0], [88.3, 100.0], [88.4, 100.0], [88.5, 101.0], [88.6, 101.0], [88.7, 101.0], [88.8, 101.0], [88.9, 101.0], [89.0, 101.0], [89.1, 101.0], [89.2, 101.0], [89.3, 101.0], [89.4, 101.0], [89.5, 102.0], [89.6, 102.0], [89.7, 102.0], [89.8, 102.0], [89.9, 102.0], [90.0, 102.0], [90.1, 102.0], [90.2, 102.0], [90.3, 102.0], [90.4, 102.0], [90.5, 102.0], [90.6, 102.0], [90.7, 103.0], [90.8, 103.0], [90.9, 103.0], [91.0, 104.0], [91.1, 104.0], [91.2, 104.0], [91.3, 104.0], [91.4, 105.0], [91.5, 105.0], [91.6, 105.0], [91.7, 105.0], [91.8, 105.0], [91.9, 106.0], [92.0, 106.0], [92.1, 106.0], [92.2, 106.0], [92.3, 106.0], [92.4, 107.0], [92.5, 107.0], [92.6, 107.0], [92.7, 107.0], [92.8, 107.0], [92.9, 108.0], [93.0, 108.0], [93.1, 108.0], [93.2, 110.0], [93.3, 110.0], [93.4, 111.0], [93.5, 111.0], [93.6, 111.0], [93.7, 115.0], [93.8, 115.0], [93.9, 116.0], [94.0, 117.0], [94.1, 118.0], [94.2, 118.0], [94.3, 118.0], [94.4, 119.0], [94.5, 119.0], [94.6, 119.0], [94.7, 119.0], [94.8, 119.0], [94.9, 120.0], [95.0, 122.0], [95.1, 122.0], [95.2, 122.0], [95.3, 123.0], [95.4, 124.0], [95.5, 124.0], [95.6, 125.0], [95.7, 125.0], [95.8, 125.0], [95.9, 125.0], [96.0, 126.0], [96.1, 127.0], [96.2, 129.0], [96.3, 130.0], [96.4, 134.0], [96.5, 136.0], [96.6, 312.0], [96.7, 312.0], [96.8, 318.0], [96.9, 319.0], [97.0, 321.0], [97.1, 324.0], [97.2, 325.0], [97.3, 326.0], [97.4, 326.0], [97.5, 327.0], [97.6, 328.0], [97.7, 330.0], [97.8, 330.0], [97.9, 331.0], [98.0, 333.0], [98.1, 334.0], [98.2, 336.0], [98.3, 338.0], [98.4, 341.0], [98.5, 345.0], [98.6, 348.0], [98.7, 350.0], [98.8, 353.0], [98.9, 362.0], [99.0, 379.0], [99.1, 715.0], [99.2, 720.0], [99.3, 726.0], [99.4, 763.0], [99.5, 778.0], [99.6, 784.0], [99.7, 788.0], [99.8, 895.0], [99.9, 906.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 975.0, "series": [{"data": [[600.0, 2.0], [700.0, 1.0], [11000.0, 5.0], [11100.0, 337.0], [11300.0, 47.0], [11400.0, 1.0], [800.0, 16.0], [900.0, 30.0], [1000.0, 25.0], [1100.0, 14.0], [1200.0, 9.0], [19100.0, 31.0], [19000.0, 37.0], [1300.0, 5.0], [100.0, 10.0], [31600.0, 1.0], [31700.0, 4.0], [32000.0, 4.0], [32100.0, 3.0], [31900.0, 3.0], [32200.0, 5.0], [32300.0, 2.0], [32400.0, 5.0], [32500.0, 3.0], [200.0, 234.0], [300.0, 65.0], [400.0, 87.0], [500.0, 14.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[0.0, 975.0], [300.0, 6.0], [100.0, 19.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[0.0, 878.0], [300.0, 25.0], [700.0, 7.0], [100.0, 88.0], [800.0, 1.0], [900.0, 1.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 32500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 124.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 2388.0, "series": [{"data": [[0.0, 2388.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 124.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 488.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 415.41733333333264, "minX": 1.7039571E12, "maxY": 415.41733333333264, "series": [{"data": [[1.7039571E12, 415.41733333333264]], "isOverall": false, "label": "Pub Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7039571E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.0, "maxY": 32567.0, "series": [{"data": [[4.0, 32525.0], [5.0, 32567.0], [8.0, 32456.333333333332], [11.0, 32400.333333333332], [12.0, 32354.0], [13.0, 32334.0], [17.0, 32247.2], [19.0, 31952.0], [22.0, 31991.75], [26.0, 31770.0], [29.0, 31602.0], [30.0, 32079.0], [48.0, 19088.5], [53.0, 19100.0], [52.0, 19094.5], [54.0, 19096.25], [57.0, 19095.0], [59.0, 19093.0], [58.0, 19087.5], [61.0, 19088.0], [60.0, 19094.0], [63.0, 19092.0], [67.0, 19093.0], [66.0, 19088.0], [71.0, 19095.571428571428], [69.0, 19088.0], [68.0, 19093.0], [98.0, 19106.814814814814], [111.0, 11398.0], [112.0, 11366.0], [123.0, 11368.5], [122.0, 11358.0], [126.0, 11366.0], [128.0, 11385.0], [155.0, 11381.333333333334], [154.0, 11367.0], [166.0, 11353.0], [170.0, 11354.0], [188.0, 11372.0], [198.0, 11360.0], [194.0, 11370.0], [207.0, 11194.0], [205.0, 11309.0], [201.0, 11370.0], [210.0, 11193.0], [209.0, 11194.0], [222.0, 11179.75], [218.0, 11354.0], [228.0, 11164.0], [227.0, 11171.8], [226.0, 11270.0], [225.0, 11213.2], [236.0, 11173.5], [235.0, 11224.625000000002], [234.0, 11356.0], [247.0, 11244.5], [255.0, 11176.0], [254.0, 11173.0], [253.0, 11225.5], [251.0, 11163.0], [249.0, 11260.4], [248.0, 11244.666666666668], [271.0, 11177.0], [270.0, 11176.0], [269.0, 11171.0], [268.0, 11235.333333333332], [262.0, 11169.0], [259.0, 11367.0], [256.0, 11174.5], [285.0, 11175.0], [284.0, 11177.0], [282.0, 11175.375], [280.0, 11176.0], [279.0, 11168.0], [278.0, 11263.5], [276.0, 11350.0], [275.0, 11353.0], [272.0, 11360.0], [301.0, 11156.0], [299.0, 11163.0], [298.0, 11165.0], [296.0, 11170.2], [318.0, 11152.6], [317.0, 11158.333333333334], [309.0, 11152.333333333334], [308.0, 11148.0], [306.0, 11153.5], [334.0, 11162.5], [327.0, 11170.333333333334], [325.0, 11151.0], [321.0, 11156.0], [320.0, 11150.666666666666], [347.0, 11154.0], [346.0, 11153.0], [345.0, 11156.0], [344.0, 11149.75], [343.0, 11156.0], [366.0, 11151.25], [365.0, 11147.0], [362.0, 11146.0], [361.0, 11153.666666666666], [359.0, 11148.4], [354.0, 11148.5], [382.0, 5705.25], [381.0, 11149.666666666666], [378.0, 11145.0], [376.0, 11149.142857142857], [373.0, 11160.0], [371.0, 11148.5], [369.0, 11150.0], [399.0, 347.0], [398.0, 11136.6], [391.0, 11133.5], [412.0, 257.0], [401.0, 282.0], [400.0, 11133.0], [402.0, 344.0], [403.0, 921.5294117647059], [410.0, 6509.142857142858], [414.0, 249.0], [415.0, 300.0], [409.0, 11131.0], [407.0, 11132.0], [405.0, 11134.0], [404.0, 11134.5], [419.0, 307.2], [420.0, 6606.083333333334], [421.0, 3889.6666666666665], [431.0, 4642.6], [430.0, 11123.5], [424.0, 11126.5], [417.0, 11125.818181818182], [416.0, 11129.8], [445.0, 333.5], [436.0, 303.0], [437.0, 7508.166666666666], [439.0, 270.0], [441.0, 306.6666666666667], [442.0, 299.50000000000006], [443.0, 303.75], [440.0, 11115.0], [435.0, 11123.0], [451.0, 5405.764705882352], [463.0, 11117.5], [460.0, 11109.0], [453.0, 11114.0], [452.0, 11117.0], [450.0, 11111.666666666666], [449.0, 11116.25], [471.0, 8417.25], [467.0, 2479.8], [469.0, 3896.3333333333335], [472.0, 381.3333333333333], [476.0, 263.0], [477.0, 376.0], [473.0, 11112.5], [470.0, 11102.0], [466.0, 11114.0], [464.0, 11116.666666666666], [482.0, 2482.2], [481.0, 441.0], [483.0, 7514.333333333333], [484.0, 5737.5], [485.0, 11107.0], [486.0, 8941.6], [487.0, 292.0], [488.0, 10729.175438596494], [495.0, 338.0], [494.0, 1097.5], [498.0, 372.0], [497.0, 337.0], [499.0, 1018.9000000000001], [508.0, 336.0], [509.0, 232.0], [511.0, 224.0], [500.0, 264.0], [501.0, 326.5], [502.0, 308.0], [504.0, 307.5], [505.0, 251.5], [506.0, 239.6], [507.0, 247.99999999999997], [516.0, 278.1428571428571], [513.0, 255.75], [514.0, 370.0], [515.0, 241.0], [531.0, 335.0], [541.0, 221.0], [540.0, 221.0], [542.0, 264.7142857142857], [538.0, 431.2666666666667], [539.0, 295.5], [532.0, 389.6666666666667], [533.0, 523.2222222222222], [534.0, 470.0], [535.0, 1238.0], [536.0, 642.0], [537.0, 1037.142857142857], [550.0, 326.6666666666667], [557.0, 260.8571428571429], [553.0, 247.0], [552.0, 212.33333333333334], [554.0, 247.83333333333334], [556.0, 472.6], [555.0, 376.4], [558.0, 249.21428571428578], [561.0, 214.2], [564.0, 220.0], [563.0, 564.0], [566.0, 292.3333333333333], [565.0, 279.33333333333337], [562.0, 696.0], [560.0, 317.9444444444445], [551.0, 268.3333333333333], [571.0, 212.0], [574.0, 215.0], [575.0, 278.0], [559.0, 278.8333333333333], [546.0, 209.83333333333331], [547.0, 994.0], [545.0, 227.0], [544.0, 215.0], [579.0, 441.25], [578.0, 367.6666666666667], [580.0, 363.3333333333333], [576.0, 466.0], [582.0, 464.0], [590.0, 454.5], [586.0, 1001.9166666666667], [584.0, 988.0], [591.0, 449.5], [592.0, 532.0], [596.0, 660.0], [593.0, 469.0], [606.0, 474.0], [607.0, 470.0], [604.0, 533.25], [602.0, 677.5], [583.0, 924.0], [603.0, 570.5], [605.0, 466.6666666666667], [611.0, 822.0], [610.0, 728.0], [614.0, 787.0], [619.0, 881.0], [621.0, 794.0], [622.0, 635.0], [608.0, 1032.0], [633.0, 732.6666666666666], [631.0, 478.0], [627.0, 646.6666666666666], [625.0, 946.2857142857143], [624.0, 984.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[417.30499999999995, 6850.064000000004]], "isOverall": false, "label": "MQTT Connect-Aggregated", "isController": false}, {"data": [[2.0, 52.0], [3.0, 51.0], [4.0, 45.0], [5.0, 42.0], [6.0, 41.0], [8.0, 44.0], [9.0, 42.0], [10.0, 41.0], [11.0, 42.0], [12.0, 42.0], [13.0, 39.0], [14.0, 44.0], [17.0, 42.333333333333336], [18.0, 44.0], [19.0, 37.0], [20.0, 40.0], [21.0, 36.0], [22.0, 39.0], [23.0, 48.0], [24.0, 44.0], [25.0, 46.0], [26.0, 42.0], [27.0, 45.0], [28.0, 46.0], [29.0, 46.0], [30.0, 48.0], [31.0, 46.0], [33.0, 38.0], [32.0, 43.0], [34.0, 37.0], [39.0, 45.0], [38.0, 46.0], [41.0, 41.0], [44.0, 42.0], [49.0, 45.0], [48.0, 43.5], [53.0, 46.0], [52.0, 42.0], [55.0, 48.0], [54.0, 42.0], [57.0, 48.0], [56.0, 43.0], [59.0, 43.0], [58.0, 40.0], [61.0, 41.0], [60.0, 39.0], [63.0, 41.0], [62.0, 40.0], [67.0, 41.0], [66.0, 41.0], [65.0, 42.0], [64.0, 41.0], [71.0, 39.0], [70.0, 40.0], [69.0, 40.0], [68.0, 40.0], [75.0, 51.0], [74.0, 51.666666666666664], [83.0, 43.333333333333336], [80.0, 44.0], [85.0, 44.0], [84.0, 44.0], [90.0, 45.0], [94.0, 43.0], [99.0, 344.0], [98.0, 44.0], [97.0, 44.0], [103.0, 42.0], [101.0, 42.0], [100.0, 62.0], [107.0, 46.5], [105.0, 50.0], [104.0, 52.0], [111.0, 45.0], [110.0, 46.0], [115.0, 50.666666666666664], [112.0, 46.0], [123.0, 57.0], [122.0, 54.0], [121.0, 53.0], [126.0, 53.666666666666664], [134.0, 51.666666666666664], [133.0, 45.0], [130.0, 47.0], [129.0, 48.333333333333336], [140.0, 53.5], [138.0, 47.0], [147.0, 60.0], [146.0, 49.833333333333336], [159.0, 56.666666666666664], [156.0, 53.0], [155.0, 54.0], [154.0, 53.0], [153.0, 55.666666666666664], [167.0, 56.666666666666664], [164.0, 54.4], [175.0, 54.0], [174.0, 42.0], [173.0, 59.0], [171.0, 54.75], [182.0, 54.57142857142857], [189.0, 51.0], [188.0, 54.0], [198.0, 55.0], [197.0, 45.0], [194.0, 45.0], [192.0, 49.0], [205.0, 51.333333333333336], [204.0, 50.0], [201.0, 52.0], [200.0, 45.0], [215.0, 55.0], [213.0, 56.333333333333336], [212.0, 56.0], [222.0, 56.0], [218.0, 55.0], [231.0, 50.0], [228.0, 45.0], [227.0, 48.0], [226.0, 48.0], [225.0, 55.0], [238.0, 59.0], [236.0, 64.0], [235.0, 60.0], [234.0, 53.0], [247.0, 70.0], [246.0, 61.0], [244.0, 60.833333333333336], [255.0, 54.0], [254.0, 61.0], [253.0, 60.0], [249.0, 62.0], [248.0, 65.0], [271.0, 65.0], [268.0, 65.0], [265.0, 60.0], [263.0, 60.25], [259.0, 61.0], [256.0, 58.0], [285.0, 57.333333333333336], [282.0, 58.666666666666664], [279.0, 60.0], [278.0, 57.0], [277.0, 57.0], [275.0, 58.0], [274.0, 61.0], [272.0, 65.0], [302.0, 52.0], [301.0, 51.0], [299.0, 53.666666666666664], [296.0, 54.0], [294.0, 54.0], [289.0, 57.0], [288.0, 62.0], [318.0, 54.44444444444444], [309.0, 51.0], [306.0, 56.0], [305.0, 46.666666666666664], [334.0, 59.0], [328.0, 66.0], [327.0, 68.0], [325.0, 62.5], [323.0, 59.666666666666664], [320.0, 53.0], [347.0, 52.0], [346.0, 56.0], [345.0, 57.0], [344.0, 63.1], [366.0, 55.0], [362.0, 52.0], [361.0, 50.0], [359.0, 49.5], [355.0, 51.0], [354.0, 51.0], [382.0, 56.0], [381.0, 48.333333333333336], [378.0, 51.5], [376.0, 50.0], [374.0, 49.0], [372.0, 49.0], [369.0, 50.0], [398.0, 48.6], [393.0, 48.0], [391.0, 57.0], [390.0, 60.0], [389.0, 47.0], [388.0, 49.333333333333336], [410.0, 50.25], [409.0, 49.0], [405.0, 52.0], [404.0, 52.0], [400.0, 54.0], [431.0, 52.4], [426.0, 54.0], [424.0, 56.75], [420.0, 51.0], [417.0, 52.0], [416.0, 50.0], [445.0, 50.0], [443.0, 50.333333333333336], [440.0, 54.0], [438.0, 46.0], [437.0, 48.0], [432.0, 50.0], [451.0, 56.0], [463.0, 47.666666666666664], [460.0, 47.5], [458.0, 49.0], [457.0, 46.666666666666664], [454.0, 47.0], [453.0, 48.5], [450.0, 52.0], [449.0, 48.0], [467.0, 53.0], [477.0, 43.0], [478.0, 53.0], [476.0, 49.333333333333336], [473.0, 44.0], [471.0, 46.0], [470.0, 44.0], [469.0, 47.0], [468.0, 49.0], [466.0, 53.0], [464.0, 50.0], [494.0, 46.0], [490.0, 44.5], [488.0, 51.0], [486.0, 50.0], [485.0, 45.5], [483.0, 48.333333333333336], [480.0, 49.0], [511.0, 47.666666666666664], [510.0, 48.0], [506.0, 51.0], [504.0, 52.5], [500.0, 51.0], [499.0, 49.0], [498.0, 44.0], [497.0, 50.666666666666664], [541.0, 52.0], [538.0, 71.6], [543.0, 53.0], [537.0, 51.0], [535.0, 51.5], [533.0, 44.0], [532.0, 50.0], [531.0, 53.75], [527.0, 50.0], [513.0, 47.0], [515.0, 42.0], [514.0, 44.0], [517.0, 45.0], [516.0, 44.0], [526.0, 42.4], [521.0, 51.0], [520.0, 52.333333333333336], [571.0, 65.3], [559.0, 82.6470588235294], [561.0, 92.83333333333333], [562.0, 71.55555555555556], [560.0, 85.97872340425532], [573.0, 90.25], [572.0, 45.0], [574.0, 62.0], [575.0, 68.75], [568.0, 60.87499999999999], [570.0, 74.2], [569.0, 48.0], [558.0, 85.00000000000001], [556.0, 82.23333333333332], [554.0, 85.2], [555.0, 66.375], [557.0, 77.55555555555556], [553.0, 73.0], [552.0, 85.0], [545.0, 76.0], [547.0, 50.0], [550.0, 71.0], [549.0, 61.5], [551.0, 78.60000000000001], [564.0, 87.06666666666668], [566.0, 85.58333333333333], [567.0, 65.66666666666667], [565.0, 85.125], [563.0, 74.58333333333334], [577.0, 50.5], [576.0, 67.75], [591.0, 42.0], [590.0, 42.0], [578.0, 58.125], [581.0, 60.63636363636363], [580.0, 52.5], [579.0, 50.833333333333336], [582.0, 58.0], [583.0, 45.42857142857142], [601.0, 50.0], [605.0, 49.714285714285715], [606.0, 46.0], [607.0, 46.5], [604.0, 129.5], [603.0, 48.0], [602.0, 45.66666666666667], [592.0, 50.0], [596.0, 47.333333333333336], [594.0, 51.0], [593.0, 42.5], [589.0, 50.0], [586.0, 44.75], [588.0, 43.0], [587.0, 42.0], [612.0, 51.75], [609.0, 49.0], [610.0, 108.63636363636364], [608.0, 268.6666666666667], [613.0, 50.25], [611.0, 46.8], [615.0, 46.0], [634.0, 53.0], [626.0, 45.0], [625.0, 43.666666666666664], [628.0, 52.0], [627.0, 44.0], [633.0, 64.8], [614.0, 48.5], [622.0, 48.588235294117645], [617.0, 46.0], [1.0, 42.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[411.4440000000003, 61.01299999999998]], "isOverall": false, "label": "MQTT DisConnect-Aggregated", "isController": false}, {"data": [[2.0, 49.0], [3.0, 49.0], [5.0, 41.0], [6.0, 40.0], [9.0, 42.666666666666664], [11.0, 42.0], [12.0, 43.333333333333336], [14.0, 40.0], [17.0, 43.5], [18.0, 39.0], [20.0, 40.0], [22.0, 42.0], [24.0, 43.0], [26.0, 44.0], [28.0, 43.0], [29.0, 38.0], [30.0, 42.0], [39.0, 39.0], [38.0, 39.0], [41.0, 38.5], [44.0, 41.0], [49.0, 40.75], [53.0, 42.0], [52.0, 39.0], [55.0, 42.0], [54.0, 42.2], [57.0, 40.0], [56.0, 40.0], [59.0, 43.0], [58.0, 42.0], [63.0, 40.333333333333336], [67.0, 36.5], [66.0, 41.0], [65.0, 41.0], [71.0, 39.625], [98.0, 43.879999999999995], [97.0, 42.5], [107.0, 44.0], [105.0, 44.5], [111.0, 45.5], [110.0, 42.0], [122.0, 50.0], [126.0, 50.6], [134.0, 45.0], [147.0, 46.666666666666664], [156.0, 53.666666666666664], [155.0, 65.5], [154.0, 41.0], [164.0, 59.333333333333336], [175.0, 62.0], [182.0, 55.0], [189.0, 54.166666666666664], [188.0, 55.0], [198.0, 58.27272727272727], [194.0, 50.0], [192.0, 55.5], [205.0, 65.35714285714285], [201.0, 57.0], [200.0, 60.0], [215.0, 68.8], [213.0, 59.75], [222.0, 69.42857142857143], [218.0, 77.33333333333333], [231.0, 74.0], [228.0, 57.5], [226.0, 88.0], [225.0, 92.6], [238.0, 72.0], [235.0, 64.8], [247.0, 64.75], [246.0, 56.5], [244.0, 71.0], [253.0, 44.0], [249.0, 72.90909090909092], [248.0, 67.5], [271.0, 93.0], [270.0, 93.0], [268.0, 87.83333333333333], [259.0, 91.0], [256.0, 71.33333333333333], [285.0, 70.0], [282.0, 68.5], [272.0, 92.0], [299.0, 72.75], [296.0, 88.2], [289.0, 66.0], [288.0, 66.0], [318.0, 75.44444444444444], [309.0, 83.33333333333333], [306.0, 87.71428571428571], [334.0, 59.0], [328.0, 67.33333333333333], [327.0, 76.0], [325.0, 90.0], [323.0, 92.0], [347.0, 95.0], [346.0, 63.5], [345.0, 62.0], [344.0, 62.57142857142857], [366.0, 64.33333333333333], [362.0, 81.33333333333333], [361.0, 88.0], [355.0, 91.0], [382.0, 65.57142857142857], [381.0, 80.33333333333333], [378.0, 96.0], [376.0, 69.125], [372.0, 62.666666666666664], [369.0, 68.5], [391.0, 65.5], [390.0, 66.75], [388.0, 91.0], [410.0, 63.5], [405.0, 63.75], [404.0, 60.0], [431.0, 54.0], [424.0, 48.42857142857142], [420.0, 56.5], [417.0, 57.5], [445.0, 51.5], [443.0, 47.0], [437.0, 52.0], [432.0, 51.75], [451.0, 50.0], [457.0, 71.0], [460.0, 45.5], [458.0, 48.0], [449.0, 55.75], [466.0, 51.0], [469.0, 45.75], [465.0, 79.0], [464.0, 51.66666666666666], [468.0, 45.75], [476.0, 67.5], [477.0, 68.5], [478.0, 76.0], [473.0, 53.0], [467.0, 50.0], [494.0, 44.333333333333336], [482.0, 78.25], [485.0, 51.166666666666664], [488.0, 57.800000000000004], [491.0, 89.0], [493.0, 77.33333333333333], [495.0, 80.0], [486.0, 45.0], [480.0, 45.0], [483.0, 48.0], [507.0, 88.63636363636363], [508.0, 72.5], [509.0, 73.0], [510.0, 71.66666666666667], [499.0, 46.8], [539.0, 70.0], [516.0, 101.33333333333333], [527.0, 60.0], [526.0, 146.07999999999998], [530.0, 87.54545454545455], [534.0, 73.75], [535.0, 63.5], [538.0, 59.5], [542.0, 95.16666666666666], [541.0, 296.1666666666667], [543.0, 778.0], [568.0, 106.33333333333333], [559.0, 87.72413793103448], [549.0, 72.16666666666667], [547.0, 383.25], [545.0, 76.125], [546.0, 88.0], [550.0, 146.9], [551.0, 107.0], [570.0, 150.0], [569.0, 37.0], [571.0, 124.0], [572.0, 64.0], [573.0, 105.33333333333333], [575.0, 93.66666666666667], [574.0, 96.0], [552.0, 75.66666666666667], [553.0, 55.0], [555.0, 80.46153846153847], [554.0, 103.16666666666667], [556.0, 86.74999999999999], [562.0, 56.84615384615385], [561.0, 94.0], [565.0, 89.85714285714286], [566.0, 115.375], [567.0, 115.5], [563.0, 82.2], [564.0, 68.0], [560.0, 95.84615384615384], [558.0, 86.04761904761905], [557.0, 89.57142857142857], [578.0, 179.0], [576.0, 160.0], [579.0, 159.25], [581.0, 149.25], [577.0, 212.0], [582.0, 110.0], [583.0, 95.0], [595.0, 169.0], [592.0, 47.0], [593.0, 41.16666666666666], [606.0, 54.0], [601.0, 67.0], [604.0, 100.66666666666666], [605.0, 130.71428571428572], [596.0, 282.6], [599.0, 62.0], [588.0, 52.666666666666664], [586.0, 106.45454545454545], [589.0, 55.0], [591.0, 143.5], [590.0, 239.66666666666669], [633.0, 61.76470588235294], [608.0, 183.0], [610.0, 52.0], [611.0, 44.42857142857143], [621.0, 53.0], [617.0, 43.5], [622.0, 42.0], [634.0, 48.5], [628.0, 41.5], [627.0, 41.818181818181806], [625.0, 39.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}, {"data": [[417.50200000000024, 80.14700000000003]], "isOverall": false, "label": "MQTT Pub Sampler-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 634.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 700.0, "minX": 1.7039571E12, "maxY": 1200.0, "series": [{"data": [[1.7039571E12, 700.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7039571E12, 1200.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7039571E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 61.01299999999998, "minX": 1.7039571E12, "maxY": 6850.064000000004, "series": [{"data": [[1.7039571E12, 6850.064000000004]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.7039571E12, 61.01299999999998]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.7039571E12, 80.14700000000003]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7039571E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7039571E12, "maxY": 80.14700000000003, "series": [{"data": [[1.7039571E12, 0.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.7039571E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.7039571E12, 80.14700000000003]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7039571E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7039571E12, "maxY": 4.9E-324, "series": [{"data": [[1.7039571E12, 0.0]], "isOverall": false, "label": "MQTT Connect", "isController": false}, {"data": [[1.7039571E12, 0.0]], "isOverall": false, "label": "MQTT DisConnect", "isController": false}, {"data": [[1.7039571E12, 0.0]], "isOverall": false, "label": "MQTT Pub Sampler", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7039571E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 36.0, "minX": 1.7039571E12, "maxY": 32567.0, "series": [{"data": [[1.7039571E12, 32567.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7039571E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7039571E12, 11146.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7039571E12, 31477.209999997278]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7039571E12, 78.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.7039571E12, 11192.499999999998]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7039571E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 44.0, "minX": 1.0, "maxY": 91.0, "series": [{"data": [[261.0, 55.0], [1.0, 46.0], [39.0, 45.0], [1342.0, 91.0], [194.0, 52.0], [203.0, 44.0], [51.0, 46.0], [909.0, 67.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1342.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4.9E-324, "series": [{"data": [[261.0, 0.0], [1.0, 0.0], [39.0, 0.0], [1342.0, 0.0], [194.0, 0.0], [203.0, 0.0], [51.0, 0.0], [909.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 1342.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.7039571E12, "maxY": 50.0, "series": [{"data": [[1.7039571E12, 50.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7039571E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.7039571E12, "maxY": 50.0, "series": [{"data": [[1.7039571E12, 50.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7039571E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 16.666666666666668, "minX": 1.7039571E12, "maxY": 16.666666666666668, "series": [{"data": [[1.7039571E12, 16.666666666666668]], "isOverall": false, "label": "MQTT Pub Sampler-success", "isController": false}, {"data": [[1.7039571E12, 16.666666666666668]], "isOverall": false, "label": "MQTT DisConnect-success", "isController": false}, {"data": [[1.7039571E12, 16.666666666666668]], "isOverall": false, "label": "MQTT Connect-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7039571E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 50.0, "minX": 1.7039571E12, "maxY": 50.0, "series": [{"data": [[1.7039571E12, 50.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7039571E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

